{"version":3,"sources":["../src/index.js"],"names":["L","isEqual","PropTypes","MapLayer","withLeaflet","Transitive","transitiveStyles","require","checkHiPPI","canvas","window","devicePixelRatio","PIXEL_RATIO","style","width","height","context","getContext","scale","otpModeToGtfsType","otpMode","zoomFactors","minScale","gridCellSize","internalVertexFactor","angleConstraint","mergeVertexThreshold","useGeographicRendering","defaultLabeledModes","TransitiveCanvasOverlay","map","props","leaflet","canvasLayer","delegate","addTo","prevProps","transitive","transitiveData","updateData","render","updateBoundsAndRender","routingType","activeItinerary","focusJourney","journeys","journey_id","labeledModes","styles","gtfsLabeledModes","mapBounds","getBounds","data","initialBounds","getWest","getSouth","getEast","getNorth","zoomEnabled","autoResize","display","console","log","setDisplayBounds","info","initTransitive","mapSize","getSize","lastMapSize","x","y","setDimensions","setCanvas","propTypes","arrayOf","string","shape","labels","segmentLabels"],"mappings":"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","sourcesContent":["import L from \"leaflet\";\nimport isEqual from \"lodash.isequal\";\nimport PropTypes from \"prop-types\";\nimport { MapLayer, withLeaflet } from \"react-leaflet\";\nimport Transitive from \"transitive-js\";\n\nimport transitiveStyles from \"./transitive-styles\";\n\nrequire(\"./leaflet-canvas-layer\");\n\n// TODO: move to util?\nfunction checkHiPPI(canvas) {\n  if (window.devicePixelRatio > 1) {\n    const PIXEL_RATIO = 2;\n    canvas.style.width = `${canvas.width}px`;\n    canvas.style.height = `${canvas.height}px`;\n\n    canvas.width *= PIXEL_RATIO;\n    canvas.height *= PIXEL_RATIO;\n\n    const context = canvas.getContext(\"2d\");\n    context.scale(PIXEL_RATIO, PIXEL_RATIO);\n  }\n}\n\n/**\n * Converts OTP mode string to GTFS mode number (copied from transitive-js).\n * TODO: Move to util?\n */\nfunction otpModeToGtfsType(otpMode) {\n  switch (otpMode) {\n    case \"TRAM\":\n      return 0;\n    case \"SUBWAY\":\n      return 1;\n    case \"RAIL\":\n      return 2;\n    case \"BUS\":\n      return 3;\n    case \"FERRY\":\n      return 4;\n    case \"CABLE_CAR\":\n      return 5;\n    case \"GONDOLA\":\n      return 6;\n    case \"FUNICULAR\":\n      return 7;\n    default:\n      return -1;\n  }\n}\n\nconst zoomFactors = [\n  {\n    minScale: 0,\n    gridCellSize: 0,\n    internalVertexFactor: 0,\n    angleConstraint: 5,\n    mergeVertexThreshold: 0,\n    useGeographicRendering: true\n  }\n];\n\nconst defaultLabeledModes = [\"BUS\"];\n\nclass TransitiveCanvasOverlay extends MapLayer {\n  // React Lifecycle Methods\n\n  componentDidMount() {\n    const { map } = this.props.leaflet;\n    L.canvasLayer()\n      .delegate(this) // -- if we do not inherit from L.CanvasLayer  we can setup a delegate to receive events from L.CanvasLayer\n      .addTo(map);\n  }\n\n  componentDidUpdate(prevProps) {\n    // Check if we received new transitive data\n    if (\n      this.transitive &&\n      !isEqual(prevProps.transitiveData, this.props.transitiveData)\n    ) {\n      this.transitive.updateData(this.props.transitiveData);\n      if (!this.props.transitiveData) this.transitive.render();\n      else this.updateBoundsAndRender();\n    }\n\n    if (\n      // this block only applies for profile trips where active option changed\n      this.props.routingType === \"PROFILE\" &&\n      prevProps.activeItinerary !== this.props.activeItinerary\n    ) {\n      if (this.props.activeItinerary == null) {\n        // no option selected; clear focus\n        this.transitive.focusJourney(null);\n        this.transitive.render();\n      } else if (this.props.transitiveData) {\n        this.transitive.focusJourney(\n          this.props.transitiveData.journeys[this.props.activeItinerary]\n            .journey_id\n        );\n        this.transitive.render();\n      }\n    }\n  }\n\n  componentWillUnmount() {\n    if (this.transitive) {\n      this.transitive.updateData(null);\n      this.transitive.render();\n    }\n  }\n\n  // Internal Methods\n\n  initTransitive(canvas) {\n    const {\n      labeledModes = defaultLabeledModes,\n      leaflet,\n      styles,\n      transitiveData\n    } = this.props;\n    const { map } = leaflet;\n\n    // Convert OTP modes to GTFS mode numbers.\n    const gtfsLabeledModes = labeledModes.map(otpModeToGtfsType);\n\n    // set up the transitive instance\n    const mapBounds = map.getBounds();\n    this.transitive = new Transitive({\n      data: transitiveData,\n      initialBounds: [\n        [mapBounds.getWest(), mapBounds.getSouth()],\n        [mapBounds.getEast(), mapBounds.getNorth()]\n      ],\n      zoomEnabled: false,\n      autoResize: false,\n      labeledModes: gtfsLabeledModes,\n      styles: {\n        ...transitiveStyles,\n        ...styles\n      },\n      zoomFactors,\n      display: \"canvas\",\n      canvas\n    });\n\n    checkHiPPI(canvas);\n\n    // the initial map draw\n    this.updateBoundsAndRender();\n  }\n\n  updateBoundsAndRender() {\n    if (!this.transitive) {\n      console.log(\n        \"WARNING: Transitive object not set in transitive-canvas-overlay\"\n      );\n      return;\n    }\n\n    const mapBounds = this.props.leaflet.map.getBounds();\n    this.transitive.setDisplayBounds([\n      [mapBounds.getWest(), mapBounds.getSouth()],\n      [mapBounds.getEast(), mapBounds.getNorth()]\n    ]);\n    this.transitive.render();\n  }\n\n  // Leaflet Layer API Methods\n\n  onDrawLayer(info) {\n    if (!this.transitive) this.initTransitive(info.canvas);\n\n    const mapSize = this.props.leaflet.map.getSize();\n    if (\n      this.lastMapSize &&\n      (mapSize.x !== this.lastMapSize.x || mapSize.y !== this.lastMapSize.y)\n    ) {\n      const canvas = info.canvas;\n      checkHiPPI(canvas);\n      this.transitive.display.setDimensions(mapSize.x, mapSize.y);\n      this.transitive.display.setCanvas(canvas);\n    }\n\n    this.updateBoundsAndRender();\n\n    this.lastMapSize = this.props.leaflet.map.getSize();\n  }\n\n  createTile() {}\n\n  createLeafletElement() {}\n\n  updateLeafletElement() {}\n}\n\nTransitiveCanvasOverlay.propTypes = {\n  /**\n   * Optional array of OTP modes whose lines should be rendered with a label.\n   * Defaults to ['BUS'] if none specified.\n   */\n  labeledModes: PropTypes.arrayOf(PropTypes.string),\n  /**\n   * Optional styles to customize the basic defaults for place labels and route segment labels.\n   * For examples of applicable style attributes, see\n   * https://github.com/conveyal/transitive.js/blob/master/stories/Transitive.stories.js#L47.\n   */\n  styles: PropTypes.shape({\n    labels: PropTypes.shape({}),\n    segmentLabels: PropTypes.shape({})\n  })\n  /**\n   * The transitiveData object is assumed to be the result of converting an\n   * OpenTripPlanner itinerary result into a transitive-readable format. This is\n   * typically done using the @opentripplanner/core-utils/map#itineraryToTransitive\n   * function.\n   */\n  // transitiveData: coreUtils.types.transitiveDataType\n};\n\nexport default withLeaflet(TransitiveCanvasOverlay);\n"],"file":"index.js"}