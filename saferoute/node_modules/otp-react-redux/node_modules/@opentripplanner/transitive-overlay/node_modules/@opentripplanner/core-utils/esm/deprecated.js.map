{"version":3,"sources":["../src/deprecated.js"],"names":["moment","logDeprecationWarning","method","alternative","console","warn","getStepDirection","step","relativeDirection","absoluteDirection","toLowerCase","getStepInstructions","conjunction","streetName","getStepStreetName","getLegModeLabel","leg","mode","hailedCar","routeLongName","indexOf","require","toSentenceCase","getModeForPlace","place","vertexType","getPlaceName","companies","address","split","networks","company","getCompanyForNetwork","label","name","getTransitFare","fareComponent","digits","transitFare","symbol","currencyCode","currency","defaultFractionDigits","cents","centsToString","dollars","toFixed","dollarsToString","calculateFares","itinerary","multiple","minTNCFare","maxTNCFare","tncCurrencyCode","legs","forEach","tncData","maxCost","minCost","transitFares","fare","Object","keys","fareKey","regular","transitCurrencyCode","latlngToString","latlng","lat","lng","lon","coordsToString","coords","length","map","c","join","getDetailText","location","detailText","type","id","timestamp","fromNow","summarizeQuery","query","locations","findLocationType","ls","types","match","find","l","matchLatLon","from","to","hasTransit","getTimeZoneOffset","dstOffset","Date","startTime","getTimezoneOffset","agencyTimeZoneOffset"],"mappings":"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","sourcesContent":["import moment from \"moment\";\n\n/**\n * To disable cyclic dependency resolution we need to require() within methods\n * This is a good reason to disable this eslint-rule\n */\n/* eslint-disable global-require */\n\n/**\n * Generates a warning to tell developer that they are using deprecated methods!\n */\nexport function logDeprecationWarning(method, alternative) {\n  console.warn(\n    `${method ||\n      \"This method\"} is deprecated and will be removed in a future otp-ui release. All language functionality should be handled using react-intl.\n        ${\n          alternative\n            ? `\n\n        Use ${alternative} instead, which provides a new interface that doesn't return English strings.`\n            : \"\"\n        }`\n  );\n}\n\n// itinerary.js\n\nexport function getStepDirection(step) {\n  logDeprecationWarning(\"getStepDirection\");\n\n  switch (step.relativeDirection) {\n    case \"DEPART\":\n      return `Head ${step.absoluteDirection.toLowerCase()}`;\n    case \"LEFT\":\n      return \"Left\";\n    case \"HARD_LEFT\":\n      return \"Hard left\";\n    case \"SLIGHTLY_LEFT\":\n      return \"Slight left\";\n    case \"CONTINUE\":\n      return \"Continue\";\n    case \"SLIGHTLY_RIGHT\":\n      return \"Slight right\";\n    case \"RIGHT\":\n      return \"Right\";\n    case \"HARD_RIGHT\":\n      return \"Hard right\";\n    case \"CIRCLE_CLOCKWISE\":\n      return \"Follow circle clockwise\";\n    case \"CIRCLE_COUNTERCLOCKWISE\":\n      return \"Follow circle counterclockwise\";\n    case \"ELEVATOR\":\n      return \"Take elevator\";\n    case \"UTURN_LEFT\":\n      return \"Left U-turn\";\n    case \"UTURN_RIGHT\":\n      return \"Right U-turn\";\n    default:\n      return step.relativeDirection;\n  }\n}\n\nexport function getStepInstructions(step) {\n  logDeprecationWarning(\"getStepInstructions\");\n\n  const conjunction = step.relativeDirection === \"ELEVATOR\" ? \"to\" : \"on\";\n  return `${getStepDirection(step)} ${conjunction} ${step.streetName}`;\n}\n\nexport function getStepStreetName(step) {\n  logDeprecationWarning(\"getStepStreetName\");\n\n  if (step.streetName === \"road\") return \"Unnamed Road\";\n  if (step.streetName === \"path\") return \"Unnamed Path\";\n  return step.streetName;\n}\n\nexport function getLegModeLabel(leg) {\n  logDeprecationWarning(\"getLegModeLabel\");\n\n  switch (leg.mode) {\n    case \"BICYCLE_RENT\":\n      return \"Biketown\";\n    case \"CAR\":\n      return leg.hailedCar ? \"Ride\" : \"Drive\";\n    case \"GONDOLA\":\n      return \"Aerial Tram\";\n    case \"TRAM\":\n      if (leg.routeLongName.toLowerCase().indexOf(\"streetcar\") !== -1)\n        return \"Streetcar\";\n      return \"Light Rail\";\n    case \"MICROMOBILITY\":\n    case \"SCOOTER\":\n      return \"Ride\";\n    default:\n      return require(\"./itinerary\").toSentenceCase(leg.mode);\n  }\n}\n\n/**\n * Returns mode name by checking the vertex type (VertexType class in OTP) for\n * the provided place. NOTE: this is currently only intended for vehicles at\n * the moment (not transit or walking).\n *\n * @param  {string} place place from itinerary leg\n */\nexport function getModeForPlace(place) {\n  logDeprecationWarning(\"getModeForPlace\");\n\n  switch (place.vertexType) {\n    case \"CARSHARE\":\n      return \"car\";\n    case \"VEHICLERENTAL\":\n      return \"E-scooter\";\n    // TODO: Should the type change depending on bike vertex type?\n    case \"BIKESHARE\":\n    case \"BIKEPARK\":\n      return \"bike\";\n    // If company offers more than one mode, default to `vehicle` string.\n    default:\n      return \"vehicle\";\n  }\n}\n\nexport function getPlaceName(place, companies) {\n  logDeprecationWarning(\"getPlaceName\");\n\n  // If address is provided (i.e. for carshare station, use it)\n  if (place.address) return place.address.split(\",\")[0];\n  if (place.networks && place.vertexType === \"VEHICLERENTAL\") {\n    // For vehicle rental pick up, do not use the place name. Rather, use\n    // company name + vehicle type (e.g., SPIN E-scooter). Place name is often just\n    // a UUID that has no relevance to the actual vehicle. For bikeshare, however,\n    // there are often hubs or bikes that have relevant names to the user.\n    const company = require(\"./itinerary\").getCompanyForNetwork(\n      place.networks[0],\n      companies\n    );\n    if (company) {\n      return `${company.label} ${getModeForPlace(place)}`;\n    }\n  }\n  // Default to place name\n  return place.name;\n}\n\n/**\n * For a given fare component (either total fare or component parts), returns\n * an object with string formatters and the fare value (in cents).\n */\nexport function getTransitFare(fareComponent) {\n  logDeprecationWarning(\"getTransitFare\", \"the fare object and getTncFare\");\n\n  // Default values (if fare component is not valid).\n  let digits = 2;\n  let transitFare = 0;\n  let symbol = \"$\";\n  let currencyCode = \"USD\";\n  if (fareComponent) {\n    // Assign values without declaration. See: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment#assignment_without_declaration\n    ({\n      currencyCode,\n      defaultFractionDigits: digits,\n      symbol\n    } = fareComponent.currency);\n    transitFare = fareComponent.cents;\n  }\n  // For cents to string conversion, use digits from fare component.\n  const centsToString = cents => {\n    const dollars = (cents / 10 ** digits).toFixed(digits);\n    return `${symbol}${dollars}`;\n  };\n  // For dollars to string conversion, assume we're rounding to two digits.\n  const dollarsToString = dollars => `${symbol}${dollars.toFixed(2)}`;\n  return {\n    centsToString,\n    currencyCode,\n    dollarsToString,\n    transitFare\n  };\n}\n\n/**\n * For an itinerary, calculates the transit/TNC fares and returns an object with\n * these values, currency info, as well as string formatters.\n * It is assumed that the same currency is used for transit and TNC legs.\n *\n * multiple being set to true will change the output behavior:\n * - dollarsToString and centsToString will be returned as part of each fare\n * - currencyCode will be returned separately for each fare\n * - tnc currency code will be returned separately\n * - each fare type will be returned separately within a new transitFares property\n *\n * FIXME: a new approach to fare calculation must be found:\n * the current approach is not sustainable, as centsToString and DollarsToString\n * must be replaced by i18n anyway.\n *\n * However, the current behavior should ideally be kept to avoid a breaking change.\n * The \"multiple\" mode is helpful, but only prevents tnc fare calculation from being duplicated.\n * This method could be split out into a new one, along with tnc fare calculation.\n * If this is done, the individual fare calculation should also be modified to support\n * a default fare not being called \"regular\". However, this again would be a breaking change.\n * This breaking change is avoided by adding the \"multiple\" parameter.\n *\n * When centsToString and dollarsToString are removed, this method should be split into\n * individual fare calculation on a variable fare key, fare calculation of an entire leg,\n * which will get fares for every fare key in the leg, and a method to calculate the fare of\n * a tnc ride within the leg. This will make typescripting easier, as the types will be cleaner.\n */\nexport function calculateFares(itinerary, multiple = false) {\n  logDeprecationWarning(\"calculateFares\", \"the fare object and getTncFare\");\n\n  // Process any TNC fares\n  let minTNCFare = 0;\n  let maxTNCFare = 0;\n  let tncCurrencyCode;\n  itinerary.legs.forEach(leg => {\n    if (leg.mode === \"CAR\" && leg.hailedCar && leg.tncData) {\n      const { currency, maxCost, minCost } = leg.tncData;\n      // TODO: Support non-USD\n      minTNCFare += minCost;\n      maxTNCFare += maxCost;\n      tncCurrencyCode = currency;\n    }\n  });\n\n  if (multiple) {\n    // Return object of fares\n    const transitFares = {};\n    if (itinerary && itinerary.fare && itinerary.fare.fare) {\n      Object.keys(itinerary.fare.fare).forEach(fareKey => {\n        const fareComponent = itinerary.fare.fare[fareKey];\n        transitFares[fareKey] = getTransitFare(fareComponent);\n      });\n    }\n\n    return {\n      maxTNCFare,\n      minTNCFare,\n      tncCurrencyCode,\n      transitFares\n    };\n  }\n\n  // Extract fare total from itinerary fares.\n  const fareComponent =\n    itinerary.fare && itinerary.fare.fare && itinerary.fare.fare.regular;\n  // Get string formatters and itinerary fare.\n  const {\n    centsToString,\n    currencyCode: transitCurrencyCode,\n    dollarsToString,\n    transitFare\n  } = getTransitFare(fareComponent);\n\n  return {\n    centsToString,\n    currencyCode: transitCurrencyCode || tncCurrencyCode,\n    dollarsToString,\n    maxTNCFare,\n    minTNCFare,\n    transitFare\n  };\n}\n\n// map.js\n\nexport function latlngToString(latlng) {\n  logDeprecationWarning(\"latlngToString\", \"the latlng object\");\n\n  return (\n    latlng &&\n    `${latlng.lat.toFixed(5)}, ${(latlng.lng || latlng.lon).toFixed(5)}`\n  );\n}\n\nexport function coordsToString(coords) {\n  logDeprecationWarning(\"coordsToString\", \"the coords object\");\n\n  return coords.length && coords.map(c => (+c).toFixed(5)).join(\", \");\n}\n\nexport function getDetailText(location) {\n  let detailText;\n  if (location.type === \"home\" || location.type === \"work\") {\n    detailText = location.name;\n  }\n  if (location.type === \"stop\") {\n    detailText = location.id;\n  } else if (location.type === \"recent\" && location.timestamp) {\n    detailText = moment(location.timestamp).fromNow();\n  }\n  return detailText;\n}\n\n// query.js\n\nexport function summarizeQuery(query, locations = []) {\n  logDeprecationWarning(\"summarizeQuery\");\n\n  function findLocationType(\n    location,\n    ls = [],\n    types = [\"home\", \"work\", \"suggested\"]\n  ) {\n    const match = ls.find(l => require(\"./map\").matchLatLon(l, location));\n    return match && types.indexOf(match.type) !== -1 ? match.type : null;\n  }\n\n  const from =\n    findLocationType(query.from, locations) || query.from.name.split(\",\")[0];\n  const to =\n    findLocationType(query.to, locations) || query.to.name.split(\",\")[0];\n  const mode = require(\"./itinerary\").hasTransit(query.mode)\n    ? \"Transit\"\n    : require(\"./itinerary\").toSentenceCase(query.mode);\n  return `${mode} from ${from} to ${to}`;\n}\n\nexport function getTimeZoneOffset(itinerary) {\n  logDeprecationWarning(\"getTimeZoneOffset\");\n\n  if (!itinerary.legs || !itinerary.legs.length) return 0;\n\n  // Determine if there is a DST offset between now and the itinerary start date\n  const dstOffset =\n    new Date(itinerary.startTime).getTimezoneOffset() -\n    new Date().getTimezoneOffset();\n\n  return (\n    itinerary.legs[0].agencyTimeZoneOffset +\n    (new Date().getTimezoneOffset() + dstOffset) * 60000\n  );\n}\n"],"file":"deprecated.js"}