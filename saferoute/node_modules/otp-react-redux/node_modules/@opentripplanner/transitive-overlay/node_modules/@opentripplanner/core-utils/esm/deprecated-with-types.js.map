{"version":3,"sources":["../src/deprecated-with-types.ts"],"names":["format","logDeprecationWarning","formatDurationLikeMoment","offsetTime","OTP_API_TIME_FORMAT","formatTime","ms","options","formatDuration","seconds","region","enabled","code","formatDurationWithSeconds"],"mappings":"AAAA;AAEA,SAASA,MAAT,QAAuB,UAAvB;AAEA,SAASC,qBAAT,QAAsC,cAAtC;AACA,SACEC,wBADF,EAEEC,UAFF,EAGEC,mBAHF,QAIO,QAJP,C,CAMA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,UAAT,CAAoBC,EAApB,EAAgCC,OAAhC,EAA8D;AACnEN,EAAAA,qBAAqB,CAAC,YAAD,EAAe,UAAf,CAArB;AAEA,SAAOD,MAAM,CACXG,UAAU,CAACG,EAAD,EAAKC,OAAL,CADC,EAEX,CAAAA,OAAO,SAAP,IAAAA,OAAO,WAAP,YAAAA,OAAO,CAAEP,MAAT,KAAmBI,mBAFR,CAAb;AAID;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASI,cAAT,CAAwBC,OAAxB,EAAyCC,MAAzC,EAAiE;AACtET,EAAAA,qBAAqB,CAAC,gBAAD,EAAmB,UAAnB,CAArB;AAEA,SAAOC,wBAAwB,CAACO,OAAD,EAAU,KAAV,EAAiB;AAC9CE,IAAAA,OAAO,EAAE,IADqC;AAE9CC,IAAAA,IAAI,EAAEF;AAFwC,GAAjB,CAA/B;AAID;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASG,yBAAT,CACLJ,OADK,EAELC,MAFK,EAGG;AACRT,EAAAA,qBAAqB,CAAC,2BAAD,EAA8B,UAA9B,CAArB;AAEA,SAAOC,wBAAwB,CAACO,OAAD,EAAU,IAAV,EAAgB;AAC7CE,IAAAA,OAAO,EAAE,IADoC;AAE7CC,IAAAA,IAAI,EAAEF;AAFuC,GAAhB,CAA/B;AAID","sourcesContent":["/* eslint-disable import/no-cycle */\nimport { TimeOptions } from \"@opentripplanner/types\";\nimport { format } from \"date-fns\";\n\nimport { logDeprecationWarning } from \"./deprecated\";\nimport {\n  formatDurationLikeMoment,\n  offsetTime,\n  OTP_API_TIME_FORMAT\n} from \"./time\";\n\n// time.ts\n\n/**\n * Formats a time value for display in narrative\n * TODO: internationalization/timezone\n * @param {number} ms epoch time value in milliseconds\n * @returns {string} formatted text representation\n */\nexport function formatTime(ms: number, options: TimeOptions): string {\n  logDeprecationWarning(\"formatTime\", \"formatjs\");\n\n  return format(\n    offsetTime(ms, options),\n    options?.format || OTP_API_TIME_FORMAT\n  );\n}\n\n/**\n * Formats an elapsed time duration for display in narrative.\n * TODO: internationalization\n * @param {number} seconds duration in seconds\n * @returns {string} formatted text representation\n */\n// TS TODO: region as type?\nexport function formatDuration(seconds: number, region: string): string {\n  logDeprecationWarning(\"formatDuration\", \"formatjs\");\n\n  return formatDurationLikeMoment(seconds, false, {\n    enabled: true,\n    code: region\n  });\n}\n\n/**\n * Formats an elapsed time in seconds, minutes, hours duration for display in narrative\n * @param {number} seconds duration in seconds\n * @param {object} region  an object that allows internationalization of the time\n * @returns {string}       formatted text representation\n */\n// TS TODO: region as type?\nexport function formatDurationWithSeconds(\n  seconds: number,\n  region: string\n): string {\n  logDeprecationWarning(\"formatDurationWithSeconds\", \"formatjs\");\n\n  return formatDurationLikeMoment(seconds, true, {\n    enabled: true,\n    code: region\n  });\n}\n"],"file":"deprecated-with-types.js"}