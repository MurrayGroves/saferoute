{"version":3,"sources":["../src/index.js"],"names":["PropTypes","React","FeatureGroup","MapLayer","Polyline","withLeaflet","polyline","pointInPolygon","isGeomComplete","routeData","patterns","Object","values","every","ptn","geometry","removePointsInFlexZone","stops","points","bboxes","map","stop","geometries","geoJson","type","coordinates","filter","bbox","point","y","x","RouteViewerOverlay","props","allowMapCentering","allPoints","reduce","acc","concat","decode","length","leaflet","fitBounds","mapCenterCallback","clipToPatternStops","path","routeColor","color","segments","forEach","pattern","pts","clippedPts","push","id","propTypes","bool","func","shape","string","objectOf","isRequired","arrayOf","number","defaultProps","opacity","weight"],"mappings":"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","sourcesContent":["import PropTypes from \"prop-types\";\nimport React from \"react\";\nimport { FeatureGroup, MapLayer, Polyline, withLeaflet } from \"react-leaflet\";\n\nimport polyline from \"@mapbox/polyline\";\nimport pointInPolygon from \"point-in-polygon\";\n\n// helper fn to check if geometry has been populated for all patterns in route\nconst isGeomComplete = routeData => {\n  return (\n    routeData &&\n    routeData.patterns &&\n    Object.values(routeData.patterns).every(\n      ptn => typeof ptn?.geometry !== \"undefined\"\n    )\n  );\n};\n\n/**\n * helper function that removes all points from array of points that are\n * within flex zones defined in an array of stops\n * @param {*} stops   OTP stops response\n * @param {*} points  Array of coordinates to clip\n * @returns           The array of coordinates without coordinates within the stops\n */\nconst removePointsInFlexZone = (stops, points) => {\n  // First, go through all stops to find flex zones\n  const bboxes =\n    stops\n      ?.map(stop => {\n        if (stop.geometries?.geoJson?.type !== \"Polygon\") {\n          return null;\n        }\n        return stop.geometries.geoJson.coordinates?.[0] || null;\n      })\n      // Remove the null entries\n      .filter(bbox => !!bbox) || [];\n\n  // Points we keep can't be in any of the flex zones\n  return points.filter(point => {\n    const [y, x] = point;\n    return bboxes.every(bbox => !pointInPolygon([x, y], bbox));\n  });\n};\n\n/**\n * An overlay that will display all polylines of the patterns of a route.\n */\nclass RouteViewerOverlay extends MapLayer {\n  componentDidMount() {}\n\n  // TODO: determine why the default MapLayer componentWillUnmount() method throws an error\n  componentWillUnmount() {}\n\n  componentDidUpdate() {\n    // if pattern geometry updated, update the map points\n    if (this.props.allowMapCentering && isGeomComplete(this.props.routeData)) {\n      const allPoints = Object.values(this.props.routeData.patterns).reduce(\n        (acc, ptn) => {\n          return acc.concat(polyline.decode(ptn.geometry.points));\n        },\n        []\n      );\n      if (allPoints.length > 0 && this.props.leaflet.map) {\n        this.props.leaflet.map.fitBounds(allPoints);\n        if (this.props.mapCenterCallback) {\n          this.props.mapCenterCallback();\n        }\n      }\n    }\n  }\n\n  createLeafletElement() {}\n\n  updateLeafletElement() {}\n\n  render() {\n    const { clipToPatternStops, path, routeData } = this.props;\n\n    if (!routeData || !routeData.patterns) return <FeatureGroup />;\n\n    const routeColor = routeData.color ? `#${routeData.color}` : path.color;\n    const segments = [];\n    Object.values(routeData.patterns).forEach(pattern => {\n      if (!pattern?.geometry) return;\n      const pts = polyline.decode(pattern.geometry.points);\n      const clippedPts = clipToPatternStops\n        ? removePointsInFlexZone(pattern?.stops, pts)\n        : pts;\n\n      segments.push(\n        <Polyline\n          /* eslint-disable-next-line react/jsx-props-no-spreading */\n          {...path}\n          color={routeColor}\n          key={pattern.id}\n          positions={clippedPts}\n        />\n      );\n    });\n\n    return segments.length > 0 ? (\n      <FeatureGroup>\n        <div>{segments}</div>\n      </FeatureGroup>\n    ) : (\n      <FeatureGroup />\n    );\n  }\n}\n\nRouteViewerOverlay.propTypes = {\n  /**\n   * This boolean value allows disabling of map centering and panning.\n   */\n  allowMapCentering: PropTypes.bool,\n  /**\n   * If pattern stops contain polygons, we can request that the routes are not drawn\n   * inside of these polygons by setting this prop to true. If true, the layer will\n   * check every zone of every stop in a pattern before drawing the route for that pattern\n   * and only draw the route outside of the polygon.\n   */\n  clipToPatternStops: PropTypes.bool,\n  /**\n   * This method is called whenever the bounds are updated to fit a route\n   */\n  mapCenterCallback: PropTypes.func,\n  /**\n   * Leaflet path properties to use to style each polyline that represents a\n   * pattern of the route. Only a few of the items are actually used.\n   *\n   * See https://leafletjs.com/reference-1.6.0.html#path\n   */\n  // Typescript TODO: restore correct type ?\n  // path: coreUtils.types.leafletPathType,\n  /**\n   * This represents data about a route as obtained from a transit index.\n   * Typically a route has more data than these items, so this is only a list of\n   * the properties that this component actually uses.\n   */\n  routeData: PropTypes.shape({\n    color: PropTypes.string,\n    patterns: PropTypes.objectOf(\n      PropTypes.shape({\n        // Typescript TODO: restore correct type ?\n        // geometry: coreUtils.types.encodedPolylineType,\n        id: PropTypes.string.isRequired,\n        stops: PropTypes.arrayOf(\n          PropTypes.shape({\n            geometries: PropTypes.objectOf({\n              geoJson: PropTypes.objectOf({\n                coordinates: PropTypes.arrayOf(PropTypes.number),\n                type: PropTypes.string\n              })\n            })\n          })\n        )\n      }).isRequired\n    )\n  })\n};\n\nRouteViewerOverlay.defaultProps = {\n  allowMapCentering: true,\n  path: {\n    color: \"#00bfff\",\n    opacity: 1,\n    weight: 4\n  }\n};\n\nexport default withLeaflet(RouteViewerOverlay);\n"],"file":"index.js"}