{"version":3,"sources":["../src/storage.ts"],"names":["STORAGE_PREFIX","storeItem","key","object","window","localStorage","setItem","JSON","stringify","getItem","notFoundValue","itemAsString","json","parse","e","console","warn","removeItem","randId","Math","random","toString","substr"],"mappings":"AAAA;AACA;AACA,IAAMA,cAAc,GAAG,KAAvB;AAEA;AACA;AACA;;AACA,OAAO,SAASC,SAAT,CAAmBC,GAAnB,EAAgCC,MAAhC,EAAuD;AAC5DC,EAAAA,MAAM,CAACC,YAAP,CAAoBC,OAApB,WACKN,cADL,cACuBE,GADvB,GAEEK,IAAI,CAACC,SAAL,CAAeL,MAAf,CAFF;AAID;AAED;AACA;AACA;AACA;;AACA,OAAO,SAASM,OAAT,CAAiBP,GAAjB,EAAsE;AAAA,MAAxCQ,aAAwC,uEAAf,IAAe;AAC3E,MAAIC,YAAJ;;AACA,MAAI;AACFA,IAAAA,YAAY,GAAGP,MAAM,CAACC,YAAP,CAAoBI,OAApB,WAA+BT,cAA/B,cAAiDE,GAAjD,EAAf;AACA,QAAMU,IAAI,GAAGL,IAAI,CAACM,KAAL,CAAWF,YAAX,CAAb;AACA,QAAIC,IAAJ,EAAU,OAAOA,IAAP;AACV,WAAOF,aAAP;AACD,GALD,CAKE,OAAOI,CAAP,EAAU;AACV;AACAC,IAAAA,OAAO,CAACC,IAAR,CAAaF,CAAb,EAAgBH,YAAhB;AACA,WAAOD,aAAP;AACD;AACF;AAED;AACA;AACA;;AACA,OAAO,SAASO,UAAT,CAAoBf,GAApB,EAAuC;AAC5CE,EAAAA,MAAM,CAACC,YAAP,CAAoBY,UAApB,WAAkCjB,cAAlC,cAAoDE,GAApD;AACD;AAED;AACA;AACA;AACA;;AACA,OAAO,SAASgB,MAAT,GAA0B;AAC/B,SAAOC,IAAI,CAACC,MAAL,GACJC,QADI,CACK,EADL,EAEJC,MAFI,CAEG,CAFH,EAEM,CAFN,CAAP;AAGD","sourcesContent":["/* eslint-disable no-console */\n// Prefix to use with local storage keys.\nconst STORAGE_PREFIX = \"otp\";\n\n/**\n * Store a javascript object at the specified key.\n */\nexport function storeItem(key: string, object: unknown): void {\n  window.localStorage.setItem(\n    `${STORAGE_PREFIX}.${key}`,\n    JSON.stringify(object)\n  );\n}\n\n/**\n * Retrieve a javascript object at the specified key. If not found, defaults to\n * null or, the optionally provided notFoundValue.\n */\nexport function getItem(key: string, notFoundValue: unknown = null): unknown {\n  let itemAsString: string;\n  try {\n    itemAsString = window.localStorage.getItem(`${STORAGE_PREFIX}.${key}`);\n    const json = JSON.parse(itemAsString);\n    if (json) return json;\n    return notFoundValue;\n  } catch (e) {\n    // Catch any errors associated with parsing bad JSON.\n    console.warn(e, itemAsString);\n    return notFoundValue;\n  }\n}\n\n/**\n * Remove item at specified key.\n */\nexport function removeItem(key: string): void {\n  window.localStorage.removeItem(`${STORAGE_PREFIX}.${key}`);\n}\n\n/**\n * Generate a random ID. This might not quite be a UUID, but it serves our\n * purposes for now.\n */\nexport function randId(): string {\n  return Math.random()\n    .toString(36)\n    .substr(2, 9);\n}\n"],"file":"storage.js"}