{"version":3,"sources":["../src/index.js"],"names":["React","FeatureGroup","MapLayer","Polyline","withLeaflet","polyline","TripViewerOverlay","prevProps","oldGeometry","tripData","geometry","newGeometry","props","pts","decode","points","leaflet","map","fitBounds","leafletPath","propTypes","defaultProps","color","opacity","weight"],"mappings":";;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,YAAT,EAAuBC,QAAvB,EAAiCC,QAAjC,EAA2CC,WAA3C,QAA8D,eAA9D;AAEA,OAAOC,QAAP,MAAqB,kBAArB;AAEA;AACA;AACA;;IACMC,iB;;;;;;;;;;;;;WACJ,6BAAoB,CAAE,C,CAEtB;;;;WACA,gCAAuB,CAAE;;;WAEzB,4BAAmBC,SAAnB,EAA8B;AAC5B,UAAMC,WAAW,GAAGD,SAAS,CAACE,QAAV,IAAsBF,SAAS,CAACE,QAAV,CAAmBC,QAA7D;AACA,UAAMC,WAAW,GAAG,KAAKC,KAAL,CAAWH,QAAX,IAAuB,KAAKG,KAAL,CAAWH,QAAX,CAAoBC,QAA/D;AACA,UAAIF,WAAW,KAAKG,WAAhB,IAA+B,CAACA,WAApC,EAAiD;AACjD,UAAME,GAAG,GAAGR,QAAQ,CAACS,MAAT,CAAgBH,WAAW,CAACI,MAA5B,CAAZ;AACA,WAAKH,KAAL,CAAWI,OAAX,CAAmBC,GAAnB,CAAuBC,SAAvB,CAAiCL,GAAjC;AACD;;;WAED,gCAAuB,CAAE;;;WAEzB,gCAAuB,CAAE;;;WAEzB,kBAAS;AACP,wBAAkC,KAAKD,KAAvC;AAAA,UAAQO,WAAR,eAAQA,WAAR;AAAA,UAAqBV,QAArB,eAAqBA,QAArB;AAEA,UAAI,CAACA,QAAD,IAAa,CAACA,QAAQ,CAACC,QAA3B,EAAqC,oBAAO,oBAAC,YAAD,OAAP;AAErC,UAAMG,GAAG,GAAGR,QAAQ,CAACS,MAAT,CAAgBL,QAAQ,CAACC,QAAT,CAAkBK,MAAlC,CAAZ;AACA,0BACE,oBAAC,YAAD,qBAEE,oBAAC,QAAD,eAAcI,WAAd;AAA2B,QAAA,SAAS,EAAEN;AAAtC,SAFF,CADF;AAMD;;;;EA9B6BX,Q;;AAiChCI,iBAAiB,CAACc,SAAlB,GAA8B;AAC5B;AACF;AACA;AACA;AACA;AACA;AACE;;AACA;AACF;AACA;AACA;AACA;AACE;AACA;AACA;AAf4B,CAA9B;AAkBAd,iBAAiB,CAACe,YAAlB,GAAiC;AAC/BF,EAAAA,WAAW,EAAE;AACXG,IAAAA,KAAK,EAAE,SADI;AAEXC,IAAAA,OAAO,EAAE,GAFE;AAGXC,IAAAA,MAAM,EAAE;AAHG;AADkB,CAAjC;AAQA,eAAepB,WAAW,CAACE,iBAAD,CAA1B","sourcesContent":["import React from \"react\";\nimport { FeatureGroup, MapLayer, Polyline, withLeaflet } from \"react-leaflet\";\n\nimport polyline from \"@mapbox/polyline\";\n\n/**\n * An overlay that will display the geometry of a trip.\n */\nclass TripViewerOverlay extends MapLayer {\n  componentDidMount() {}\n\n  // TODO: determine why the default MapLayer componentWillUnmount() method throws an error\n  componentWillUnmount() {}\n\n  componentDidUpdate(prevProps) {\n    const oldGeometry = prevProps.tripData && prevProps.tripData.geometry;\n    const newGeometry = this.props.tripData && this.props.tripData.geometry;\n    if (oldGeometry === newGeometry || !newGeometry) return;\n    const pts = polyline.decode(newGeometry.points);\n    this.props.leaflet.map.fitBounds(pts);\n  }\n\n  createLeafletElement() {}\n\n  updateLeafletElement() {}\n\n  render() {\n    const { leafletPath, tripData } = this.props;\n\n    if (!tripData || !tripData.geometry) return <FeatureGroup />;\n\n    const pts = polyline.decode(tripData.geometry.points);\n    return (\n      <FeatureGroup>\n        {/* eslint-disable-next-line react/jsx-props-no-spreading */}\n        <Polyline {...leafletPath} positions={pts} />\n      </FeatureGroup>\n    );\n  }\n}\n\nTripViewerOverlay.propTypes = {\n  /**\n   * Leaflet path properties to use to style the polyline that represents the\n   * trip.\n   *\n   * See https://leafletjs.com/reference-1.6.0.html#path\n   */\n  // leafletPath: coreUtils.types.leafletPathType,\n  /**\n   * This represents data about a trip as obtained from a transit index.\n   * Typically a trip has more data than these items, so this is only a list of\n   * the properties that this component actually uses.\n   */\n  // tripData: PropTypes.shape({\n  // geometry: coreUtils.types.encodedPolylineType\n  // })\n};\n\nTripViewerOverlay.defaultProps = {\n  leafletPath: {\n    color: \"#00bfff\",\n    opacity: 0.6,\n    weight: 8\n  }\n};\n\nexport default withLeaflet(TripViewerOverlay);\n"],"file":"index.js"}