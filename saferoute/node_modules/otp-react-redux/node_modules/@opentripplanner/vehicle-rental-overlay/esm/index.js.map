{"version":3,"sources":["../src/index.js"],"names":["flatten","Styled","BaseMapStyled","coreUtils","FromToLocationPicker","ZoomBasedMarkers","PropTypes","React","FormattedMessage","injectIntl","FeatureGroup","MapLayer","Popup","withLeaflet","GenericMarker","HubAndFloatingBike","SharedBikeCircle","defaultEnglishMessages","defaultMessages","makeDefaultGetStationName","intl","defaultGetStationName","configCompanies","station","stationNetworks","itinerary","getCompaniesLabelFromNetworks","networks","stationName","name","id","match","length","isFloatingBike","formatMessage","defaultMessage","description","isFloatingCar","company","isFloatingVehicle","VehicleRentalOverlay","props","renderSymbolWithPopup","Symbol","SymbolWrapper","entity","zoom","renderPopupForStation","bikesAvailable","undefined","propTypes","number","isRequired","convertToZoomMarkerSymbols","mapSymbols","map","mapSymbol","symbol","type","minZoom","onOverlayAdded","startRefreshing","onOverlayRemoved","stopRefreshing","onViewportChanged","viewport","newZoom","state","setState","stationIsHub","getStationName","setLocation","getStationNameFunc","location","lat","y","lon","x","value","spacesAvailable","refreshVehicles","refreshTimer","setInterval","clearInterval","leaflet","registerOverlay","visible","getZoom","companies","stations","filteredStations","filter","includes","symbols","arrayOf","string","func","bool","defaultProps"],"mappings":"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","sourcesContent":["import flatten from \"flat\";\nimport { Styled as BaseMapStyled } from \"@opentripplanner/base-map\";\nimport coreUtils from \"@opentripplanner/core-utils\";\nimport FromToLocationPicker from \"@opentripplanner/from-to-location-picker\";\nimport ZoomBasedMarkers from \"@opentripplanner/zoom-based-markers\";\nimport PropTypes from \"prop-types\";\nimport React from \"react\";\nimport { FormattedMessage, injectIntl } from \"react-intl\";\nimport { FeatureGroup, MapLayer, Popup, withLeaflet } from \"react-leaflet\";\n\nimport {\n  GenericMarker,\n  HubAndFloatingBike,\n  SharedBikeCircle\n} from \"./DefaultMarkers\";\n\n// Load the default messages.\nimport defaultEnglishMessages from \"../i18n/en-US.yml\";\n\n// HACK: We should flatten the messages loaded above because\n// the YAML loaders behave differently between webpack and our version of jest:\n// - the yaml loader for webpack returns a nested object,\n// - the yaml loader for jest returns messages with flattened ids.\nconst defaultMessages = flatten(defaultEnglishMessages);\n\nfunction makeDefaultGetStationName(intl) {\n  return function defaultGetStationName(configCompanies, station) {\n    const stationNetworks = coreUtils.itinerary.getCompaniesLabelFromNetworks(\n      station.networks,\n      configCompanies\n    );\n    let stationName = station.name || station.id;\n    // If the station name or id is a giant UUID (with more than 3 \"-\" characters)\n    // best not to show that at all and instead use the network name.\n    if ((stationName.match(/-/g) || []).length > 3) {\n      stationName = stationNetworks;\n    }\n\n    if (station.isFloatingBike) {\n      stationName = intl.formatMessage(\n        {\n          defaultMessage:\n            defaultEnglishMessages[\"otpUi.VehicleRentalOverlay.floatingBike\"],\n          description: \"Popup title for a free-floating bike\",\n          id: \"otpUi.VehicleRentalOverlay.floatingBike\"\n        },\n        { name: stationName }\n      );\n    } else if (station.isFloatingCar) {\n      stationName = intl.formatMessage(\n        {\n          defaultMessage:\n            defaultEnglishMessages[\"otpUi.VehicleRentalOverlay.floatingCar\"],\n          description: \"Popup title for a free-floating car\",\n          id: \"otpUi.VehicleRentalOverlay.floatingCar\"\n        },\n        {\n          company: stationNetworks,\n          name: stationName\n        }\n      );\n    } else if (station.isFloatingVehicle) {\n      // assumes that all floating vehicles are E-scooters\n      stationName = intl.formatMessage(\n        {\n          defaultMessage:\n            defaultEnglishMessages[\n              \"otpUi.VehicleRentalOverlay.floatingEScooter\"\n            ],\n          description: \"Popup title for a free-floating e-scooter\",\n          id: \"otpUi.VehicleRentalOverlay.floatingEScooter\"\n        },\n        { company: stationNetworks }\n      );\n    }\n    return stationName;\n  };\n}\n\n/**\n * This vehicle rental overlay can be used to render vehicle rentals of various\n * types. This layer can be configured to show different styles of markers at\n * different zoom levels.\n */\nclass VehicleRentalOverlay extends MapLayer {\n  constructor(props) {\n    super(props);\n    this.state = {\n      zoom: null\n    };\n  }\n\n  /**\n   * This helper method will be passed to the ZoomBasedMarkers symbolTransform prop.\n   * It creates a component that inserts a popup\n   * as a child of the specified symbol from the mapSymbols prop.\n   */\n  renderSymbolWithPopup = Symbol => {\n    const SymbolWrapper = ({ entity: station, zoom }) => (\n      <Symbol entity={station} zoom={zoom}>\n        {this.renderPopupForStation(\n          station,\n          station.bikesAvailable !== undefined && !station.isFloatingBike\n        )}\n      </Symbol>\n    );\n    SymbolWrapper.propTypes = {\n      // entity: coreUtils.types.stationType.isRequired,\n      zoom: PropTypes.number.isRequired\n    };\n\n    return SymbolWrapper;\n  };\n\n  /**\n   * Convert map symbols to zoomBasedSymbolType.\n   */\n  convertToZoomMarkerSymbols = mapSymbols =>\n    mapSymbols.map(mapSymbol => {\n      // If mapSymbol uses zoomBasedSymbolType, use it as is.\n      if (mapSymbol.symbol) {\n        return mapSymbol;\n      }\n\n      // Otherwise, convert into zoomBasedType (no support for symbols by type).\n      let symbol;\n      switch (mapSymbol.type) {\n        case \"circle\":\n          symbol = SharedBikeCircle(mapSymbol);\n          break;\n        case \"hubAndFloatingBike\":\n          symbol = HubAndFloatingBike;\n          break;\n        default:\n          symbol = GenericMarker(mapSymbol);\n      }\n\n      return {\n        minZoom: mapSymbol.minZoom,\n        symbol\n      };\n    });\n\n  createLeafletElement() {}\n\n  updateLeafletElement() {}\n\n  startRefreshing() {\n    const { refreshVehicles } = this.props;\n\n    // Create the timer only if refreshVehicles is a valid function.\n    if (typeof refreshVehicles === \"function\") {\n      // initial station retrieval\n      refreshVehicles();\n\n      // set up timer to refresh stations periodically\n      this.refreshTimer = setInterval(() => {\n        refreshVehicles();\n      }, 30000); // defaults to every 30 sec. TODO: make this configurable?\n    }\n  }\n\n  stopRefreshing() {\n    if (this.refreshTimer) clearInterval(this.refreshTimer);\n  }\n\n  /**\n   * When the layer is added (or toggled on, or its visibility becomes true),\n   * start refreshing vehicle positions.\n   */\n  onOverlayAdded = () => {\n    this.startRefreshing();\n  };\n\n  /**\n   * When the layer is removed (or toggled off, or its visibility becomes false),\n   * stop refreshing vehicle positions.\n   */\n  onOverlayRemoved = () => {\n    this.stopRefreshing();\n  };\n\n  /**\n   * Listen to changes on the BaseMap's center or zoom.\n   * @param viewport The viewport data. See https://github.com/PaulLeCam/react-leaflet/blob/master/example/components/viewport.js for details.\n   */\n  onViewportChanged = viewport => {\n    const { zoom: newZoom } = viewport;\n    if (this.state.zoom !== newZoom) {\n      this.setState({ zoom: newZoom });\n    }\n  };\n\n  /**\n   * Upon mounting, see whether the vehicles should be fetched,\n   * and also call the register overlay prop that the\n   * @opentripplanner/base-map package has injected to listen to zoom/position changes.\n   */\n  componentDidMount() {\n    const { leaflet, registerOverlay, visible } = this.props;\n    this.setState({\n      zoom: leaflet.map.getZoom()\n    });\n    if (visible) this.startRefreshing();\n    if (typeof registerOverlay === \"function\") {\n      registerOverlay(this);\n    }\n  }\n\n  componentWillUnmount() {\n    this.stopRefreshing();\n  }\n\n  /**\n   * Render some popup html for a station. This contains custom logic for\n   * displaying rental vehicles in the TriMet MOD website that might not be\n   * applicable to other regions.\n   */\n  renderPopupForStation = (station, stationIsHub = false) => {\n    const { configCompanies, getStationName, intl, setLocation } = this.props;\n    const getStationNameFunc =\n      getStationName || makeDefaultGetStationName(intl);\n    const stationName = getStationNameFunc(configCompanies, station);\n    const location = {\n      lat: station.y,\n      lon: station.x,\n      name: stationName\n    };\n    return (\n      <Popup>\n        <BaseMapStyled.MapOverlayPopup>\n          <BaseMapStyled.PopupTitle>{stationName}</BaseMapStyled.PopupTitle>\n\n          {/* render dock info if it is available */}\n          {stationIsHub && (\n            <BaseMapStyled.PopupRow>\n              <div>\n                <FormattedMessage\n                  defaultMessage={\n                    defaultMessages[\"otpUi.VehicleRentalOverlay.availableBikes\"]\n                  }\n                  description=\"Label text for the number of bikes available\"\n                  id=\"otpUi.VehicleRentalOverlay.availableBikes\"\n                  values={{ value: station.bikesAvailable }}\n                />\n              </div>\n              <div>\n                <FormattedMessage\n                  defaultMessage={\n                    defaultMessages[\"otpUi.VehicleRentalOverlay.availableDocks\"]\n                  }\n                  description=\"Label text for the number of docks available\"\n                  id=\"otpUi.VehicleRentalOverlay.availableDocks\"\n                  values={{ value: station.spacesAvailable }}\n                />\n              </div>\n            </BaseMapStyled.PopupRow>\n          )}\n\n          {/* Set as from/to toolbar */}\n          <BaseMapStyled.PopupRow>\n            <FromToLocationPicker\n              label\n              location={location}\n              setLocation={setLocation}\n            />\n          </BaseMapStyled.PopupRow>\n        </BaseMapStyled.MapOverlayPopup>\n      </Popup>\n    );\n  };\n\n  render() {\n    const { companies, leaflet, mapSymbols, stations } = this.props;\n    const { zoom = leaflet.map.getZoom() } = this.state;\n    // Render an empty FeatureGroup if the rental vehicles should not be visible\n    // on the map. Otherwise previous stations may still be shown due to some\n    // react-leaflet internals, maybe? Also, do not return null because that will\n    // prevent the overlay from appearing in the layer controls.\n\n    let filteredStations = stations;\n    if (companies) {\n      filteredStations = stations.filter(\n        station =>\n          station.networks.filter(value => companies.includes(value)).length > 0\n      );\n    }\n\n    if (!filteredStations || filteredStations.length === 0) {\n      return <FeatureGroup />;\n    }\n\n    // Convert map symbols for this overlay to zoomBasedSymbolType.\n    const symbols = this.convertToZoomMarkerSymbols(mapSymbols);\n\n    return (\n      <FeatureGroup>\n        <ZoomBasedMarkers\n          entities={filteredStations}\n          symbols={symbols}\n          symbolTransform={this.renderSymbolWithPopup}\n          zoom={zoom}\n        />\n      </FeatureGroup>\n    );\n  }\n}\n\nVehicleRentalOverlay.props = {\n  /**\n   * The entire companies config array.\n   */\n  // configCompanies: PropTypes.arrayOf(coreUtils.types.companyType.isRequired)\n  //   .isRequired,\n  /**\n   * A list of companies that are applicable to just this instance of the\n   * overlay.\n   */\n  companies: PropTypes.arrayOf(PropTypes.string.isRequired),\n  /**\n   * An optional custom function to create a string name of a particular vehicle\n   * rental station. This function takes two arguments of the configCompanies\n   * prop and a vehicle rental station. The function must return a string.\n   */\n  getStationName: PropTypes.func,\n  /**\n   * A configuration of what map markers or symbols to show at various\n   * zoom levels.\n   */\n  // mapSymbols: coreUtils.types.vehicleRentalMapOverlaySymbolsType,\n  /**\n   * If specified, a function that will be triggered every 30 seconds whenever this layer is\n   * visible.\n   */\n  refreshVehicles: PropTypes.func,\n  /**\n   * A callback for when a user clicks on setting this stop as either the from\n   * or to location of a new search.\n   *\n   * This will be dispatched with the following argument:\n   *\n   * ```js\n   *  {\n   *    location: {\n   *      lat: number,\n   *      lon: number,\n   *      name: string\n   *    },\n   *    locationType: \"from\" or \"to\"\n   *  }\n   * ```\n   */\n  setLocation: PropTypes.func.isRequired,\n  /**\n   * A list of the vehicle rental stations specific to this overlay instance.\n   */\n  // stations: PropTypes.arrayOf(coreUtils.types.stationType),\n  /**\n   * Whether the overlay is currently visible.\n   */\n  visible: PropTypes.bool\n};\n\nVehicleRentalOverlay.defaultProps = {\n  getStationName: null,\n  mapSymbols: [\n    {\n      zoom: 0,\n      symbol: GenericMarker\n    }\n  ],\n  refreshVehicles: null,\n  stations: [],\n  visible: false\n};\n\nexport default withLeaflet(injectIntl(VehicleRentalOverlay));\n"],"file":"index.js"}