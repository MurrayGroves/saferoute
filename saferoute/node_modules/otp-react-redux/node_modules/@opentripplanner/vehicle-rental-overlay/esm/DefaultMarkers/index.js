import { divIcon } from "leaflet";
import memoize from "lodash.memoize";
import PropTypes from "prop-types";
import React from "react";
import ReactDOMServer from "react-dom/server";
import { CircleMarker, Marker } from "react-leaflet";
import { floatingBikeIcon, hubIcons } from "../bike-icons";
import * as Styled from "../styled";
/**
 * This file contains default marker types for rental vehicles,
 * that can be used when defining the VehicleRentalOverlay's symbol prop:
 * - SharedBikeCircle
 * - GenericMarker
 * - HubAndFloatingBike
 */
// Prop types reused across components.

var templatePropTypes = {
  /** The children of the component. */
  children: PropTypes.node,

  /** The rental vehicle or station to render. */
  // entity: coreUtils.types.stationType.isRequired,
  // eslint-disable-next-line react/forbid-prop-types
  entity: PropTypes.object.isRequired,

  /** leaflet attribute to control tabindex value for keyboaryd-only / SR users */
  keyboard: PropTypes.bool
};
var templateDefaultProps = {
  children: null,
  keyboard: false
};
/**
 * Renders a shared bike or shared bike dock as a circle
 * with predefined colors and size.
 */

export var SharedBikeCircle = function SharedBikeCircle(_ref) {
  var dockStrokeColor = _ref.dockStrokeColor,
      _ref$fillColor = _ref.fillColor,
      fillColor = _ref$fillColor === void 0 ? "gray" : _ref$fillColor,
      pixels = _ref.pixels,
      strokeColor = _ref.strokeColor;

  var GeneratedMarker = function GeneratedMarker(_ref2) {
    var children = _ref2.children,
        keyboard = _ref2.keyboard,
        station = _ref2.entity;
    var newStrokeColor = strokeColor || fillColor;

    if (!station.isFloatingBike) {
      newStrokeColor = dockStrokeColor || strokeColor;
    }

    return /*#__PURE__*/React.createElement(CircleMarker, {
      center: [station.y, station.x],
      color: newStrokeColor,
      fillColor: fillColor,
      fillOpacity: 1,
      keyboard: keyboard,
      radius: pixels - (station.isFloatingBike ? 1 : 0),
      weight: 1
    }, children);
  };

  GeneratedMarker.propTypes = templatePropTypes;
  GeneratedMarker.defaultProps = templateDefaultProps;
  return GeneratedMarker;
};
/**
 * A component that renders rental bike entities
 * either as a bike or a bike dock (or hub, showing spaces available).
 */

export var HubAndFloatingBike = function HubAndFloatingBike(_ref3) {
  var children = _ref3.children,
      keyboard = _ref3.keyboard,
      station = _ref3.entity;
  var icon;

  if (station.isFloatingBike) {
    icon = floatingBikeIcon;
  } else {
    var capacity = station.bikesAvailable + station.spacesAvailable;
    if (capacity === 0) return null;
    var pctFull = station.bikesAvailable / capacity;
    var i = Math.round(pctFull * 9);
    icon = hubIcons[i];
  }

  return /*#__PURE__*/React.createElement(Marker, {
    icon: icon,
    keyboard: keyboard,
    position: [station.y, station.x]
  }, children);
};
HubAndFloatingBike.propTypes = templatePropTypes;
HubAndFloatingBike.defaultProps = templateDefaultProps;
/**
 * Creates and caches a leaflet element icon based on color.
 */

var getStationMarkerByColor = memoize(function (color) {
  return divIcon({
    className: "",
    iconSize: [11, 16],
    popupAnchor: [0, -6],
    html: ReactDOMServer.renderToStaticMarkup( /*#__PURE__*/React.createElement(Styled.StationMarker, {
      color: color
    }))
  });
});
/**
 * Helper function to create a leaflet Marker component to render entities
 * using fixed fill color.
 * Usage: GenericMarker({ fillColor: "#F204B5" })
 */

export var GenericMarker = function GenericMarker(_ref4) {
  var _ref4$fillColor = _ref4.fillColor,
      fillColor = _ref4$fillColor === void 0 ? "gray" : _ref4$fillColor;
  var markerIcon = getStationMarkerByColor(fillColor);

  var GeneratedMarker = function GeneratedMarker(_ref5) {
    var children = _ref5.children,
        keyboard = _ref5.keyboard,
        station = _ref5.entity;
    return /*#__PURE__*/React.createElement(Marker, {
      icon: markerIcon,
      keyboard: keyboard,
      position: [station.y, station.x]
    }, children);
  };

  GeneratedMarker.propTypes = templatePropTypes;
  GeneratedMarker.defaultProps = templateDefaultProps;
  return GeneratedMarker;
};
//# sourceMappingURL=index.js.map