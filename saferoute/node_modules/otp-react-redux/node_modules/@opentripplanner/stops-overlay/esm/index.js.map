{"version":3,"sources":["../src/index.js"],"names":["utils","ZoomBasedMarkers","PropTypes","React","FeatureGroup","GeoJSON","MapLayer","withLeaflet","DefaultStopMarker","Styled","StopsOverlay","refreshStops","props","leaflet","symbols","minZoomForUpdate","reduce","lowestZoom","level","Math","min","minZoom","Number","MAX_VALUE","map","getZoom","forceUpdate","bounds","getBounds","equals","lastBounds","setTimeout","minLat","getSouth","maxLat","getNorth","minLon","getWest","maxLon","getEast","on","off","stops","length","zoom","flexGeometries","filter","stop","geometries","geoJson","type","color","id","properties","feature","geometry","propTypes","object","isRequired","func","arrayOf","types","stopLayerStopType","zoomBasedSymbolType"],"mappings":";;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,6BAAlB;AACA,OAAOC,gBAAP,MAA6B,qCAA7B;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,YAAT,EAAuBC,OAAvB,EAAgCC,QAAhC,EAA0CC,WAA1C,QAA6D,eAA7D;AAEA,OAAOC,iBAAP,MAA8B,uBAA9B;AACA,OAAO,KAAKC,MAAZ,MAAwB,UAAxB;AAEA;AACA;AACA;;IACMC,Y;;;;;;;;;;;;;;;;UAqBJC,Y,GAAe,YAAM;AACnB,wBAA2C,MAAKC,KAAhD;AAAA,UAAQC,OAAR,eAAQA,OAAR;AAAA,UAAiBF,YAAjB,eAAiBA,YAAjB;AAAA,UAA+BG,OAA/B,eAA+BA,OAA/B,CADmB,CAGnB;AACA;;AACA,UAAMC,gBAAgB,GAAGD,OAAO,GAC5BA,OAAO,CAACE,MAAR,CACE,UAACC,UAAD,EAAaC,KAAb;AAAA,eAAuBC,IAAI,CAACC,GAAL,CAASF,KAAK,CAACG,OAAf,EAAwBJ,UAAxB,CAAvB;AAAA,OADF,EAEEK,MAAM,CAACC,SAFT,CAD4B,GAK5BD,MAAM,CAACC,SALX;;AAOA,UAAIV,OAAO,CAACW,GAAR,CAAYC,OAAZ,KAAwBV,gBAA5B,EAA8C;AAC5C,cAAKW,WAAL;;AACA;AACD;;AAED,UAAMC,MAAM,GAAGd,OAAO,CAACW,GAAR,CAAYI,SAAZ,EAAf;;AACA,UAAI,CAACD,MAAM,CAACE,MAAP,CAAc,MAAKC,UAAnB,CAAL,EAAqC;AACnCC,QAAAA,UAAU,CAAC,YAAM;AACfpB,UAAAA,YAAY,CAAC;AACXqB,YAAAA,MAAM,EAAEL,MAAM,CAACM,QAAP,EADG;AAEXC,YAAAA,MAAM,EAAEP,MAAM,CAACQ,QAAP,EAFG;AAGXC,YAAAA,MAAM,EAAET,MAAM,CAACU,OAAP,EAHG;AAIXC,YAAAA,MAAM,EAAEX,MAAM,CAACY,OAAP;AAJG,WAAD,CAAZ;AAMA,gBAAKT,UAAL,GAAkBH,MAAlB;AACD,SARS,EAQP,GARO,CAAV;AASD;AACF,K;;;;;;;WAjDD,6BAAoB;AAClB;AACA,WAAKf,KAAL,CAAWC,OAAX,CAAmBW,GAAnB,CAAuBgB,EAAvB,CAA0B,SAA1B,EAAqC,KAAK7B,YAA1C;AACD,K,CAED;;;;WACA,gCAAuB;AACrB;AACA,WAAKC,KAAL,CAAWC,OAAX,CAAmBW,GAAnB,CAAuBiB,GAAvB,CAA2B,SAA3B,EAAsC,KAAK9B,YAA3C;AACD;AAED;AACF;AACA;AACA;AACA;;;;WACE,6BAAoB;AAClB,aAAO,KAAKC,KAAL,CAAWC,OAAlB;AACD;;;WAiCD,gCAAuB,CAAE;;;WAEzB,gCAAuB,CAAE;;;WAEzB,kBAAS;AACP,yBAAoC,KAAKD,KAAzC;AAAA,UAAQC,OAAR,gBAAQA,OAAR;AAAA,UAAiB6B,KAAjB,gBAAiBA,KAAjB;AAAA,UAAwB5B,OAAxB,gBAAwBA,OAAxB,CADO,CAGP;AACA;;AACA,UAAI,CAACD,OAAD,IAAY,CAACA,OAAO,CAACW,GAArB,IAA4B,CAACkB,KAA7B,IAAsCA,KAAK,CAACC,MAAN,KAAiB,CAA3D,EAA8D;AAC5D,4BAAO,oBAAC,YAAD,OAAP;AACD;;AACD,UAAMC,IAAI,GAAG/B,OAAO,CAACW,GAAR,CAAYC,OAAZ,EAAb;AAEA,UAAMoB,cAAc,GAAGH,KAAK,CACzBI,MADoB,CACb,UAAAC,IAAI;AAAA;;AAAA,eAAI,CAAAA,IAAI,SAAJ,IAAAA,IAAI,WAAJ,gCAAAA,IAAI,CAAEC,UAAN,+FAAkBC,OAAlB,gFAA2BC,IAA3B,MAAoC,SAAxC;AAAA,OADS,EAEpB1B,GAFoB,CAEhB,UAAAuB,IAAI,EAAI;AACX;AACA,YAAQI,KAAR,GAAsBJ,IAAtB,CAAQI,KAAR;AAAA,YAAeC,EAAf,GAAsBL,IAAtB,CAAeK,EAAf;AACAL,QAAAA,IAAI,CAACC,UAAL,CAAgBC,OAAhB,CAAwBI,UAAxB,GAAqC;AAAEF,UAAAA,KAAK,EAALA,KAAF;AAASC,UAAAA,EAAE,EAAFA;AAAT,SAArC;AACA,eAAOL,IAAI,CAACC,UAAL,CAAgBC,OAAvB;AACD,OAPoB,CAAvB;AASA,0BACE,oBAAC,YAAD,qBACE,oBAAC,gBAAD;AAAkB,QAAA,QAAQ,EAAEP,KAA5B;AAAmC,QAAA,OAAO,EAAE5B,OAA5C;AAAqD,QAAA,IAAI,EAAE8B;AAA3D,QADF,EAGGC,cAAc,CAACF,MAAf,GAAwB,CAAxB,iBACC,oBAAC,OAAD;AACE,QAAA,IAAI,EAAEE,cADR;AAEE,QAAA,GAAG,EAAEA,cAAc,CAAC,CAAD,CAAd,CAAkBQ,UAAlB,CAA6BD,EAFpC;AAGE,QAAA,KAAK,EAAE,eAAAE,OAAO,EAAI;AAAA;;AAChB,sCAAkBA,OAAlB,aAAkBA,OAAlB,4CAAkBA,OAAO,CAAEC,QAA3B,sDAAkB,kBAAmBF,UAArC;AAAA,cAAQF,KAAR,yBAAQA,KAAR;;AACA,iBAAO;AAAEA,YAAAA,KAAK,EAALA;AAAF,WAAP;AACD;AANH,QAJJ,CADF;AAgBD;;;;EA3FwB7C,Q;;AA8F3BI,YAAY,CAAC8C,SAAb,GAAyB;AACvB;;AACA;AACA3C,EAAAA,OAAO,EAAEX,SAAS,CAACuD,MAAV,CAAiBC,UAHH;;AAIvB;AACF;AACA;AACA;AACE/C,EAAAA,YAAY,EAAET,SAAS,CAACyD,IAAV,CAAeD,UARN;;AASvB;AACF;AACA;AACEhB,EAAAA,KAAK,EAAExC,SAAS,CAAC0D,OAAV,CAAkB5D,KAAK,CAAC6D,KAAN,CAAYC,iBAA9B,EAAiDJ,UAZjC;;AAavB;AACF;AACA;AACE5C,EAAAA,OAAO,EAAEZ,SAAS,CAAC0D,OAAV,CAAkB5D,KAAK,CAAC6D,KAAN,CAAYE,mBAA9B,EAAmDL;AAhBrC,CAAzB;AAmBA,eAAenD,WAAW,CAACG,YAAD,CAA1B;AAEA,SAASF,iBAAT,EAA4BC,MAA5B","sourcesContent":["import utils from \"@opentripplanner/core-utils\";\nimport ZoomBasedMarkers from \"@opentripplanner/zoom-based-markers\";\nimport PropTypes from \"prop-types\";\nimport React from \"react\";\nimport { FeatureGroup, GeoJSON, MapLayer, withLeaflet } from \"react-leaflet\";\n\nimport DefaultStopMarker from \"./default-stop-marker\";\nimport * as Styled from \"./styled\";\n\n/**\n * An overlay to view a collection of stops.\n */\nclass StopsOverlay extends MapLayer {\n  componentDidMount() {\n    // set up pan/zoom listener\n    this.props.leaflet.map.on(\"moveend\", this.refreshStops);\n  }\n\n  // TODO: determine why the default MapLayer componentWillUnmount() method throws an error\n  componentWillUnmount() {\n    // Remove the pan/zoom listener set up above.\n    this.props.leaflet.map.off(\"moveend\", this.refreshStops);\n  }\n\n  /**\n   * this method is used for backporting to React 15\n   * v16:  return this.props.leaflet;\n   * v15:  return this.context;\n   */\n  getLeafletContext() {\n    return this.props.leaflet;\n  }\n\n  refreshStops = () => {\n    const { leaflet, refreshStops, symbols } = this.props;\n\n    // Force the map to render no symbols if the map zoom level\n    // is less than the farthest zoom level at which symbols are defined.\n    const minZoomForUpdate = symbols\n      ? symbols.reduce(\n          (lowestZoom, level) => Math.min(level.minZoom, lowestZoom),\n          Number.MAX_VALUE\n        )\n      : Number.MAX_VALUE;\n\n    if (leaflet.map.getZoom() < minZoomForUpdate) {\n      this.forceUpdate();\n      return;\n    }\n\n    const bounds = leaflet.map.getBounds();\n    if (!bounds.equals(this.lastBounds)) {\n      setTimeout(() => {\n        refreshStops({\n          minLat: bounds.getSouth(),\n          maxLat: bounds.getNorth(),\n          minLon: bounds.getWest(),\n          maxLon: bounds.getEast()\n        });\n        this.lastBounds = bounds;\n      }, 300);\n    }\n  };\n\n  createLeafletElement() {}\n\n  updateLeafletElement() {}\n\n  render() {\n    const { leaflet, stops, symbols } = this.props;\n\n    // Don't render if no map or no stops are defined.\n    // (ZoomBasedMarkers will also not render below the minimum zoom threshold defined in the symbols prop.)\n    if (!leaflet || !leaflet.map || !stops || stops.length === 0) {\n      return <FeatureGroup />;\n    }\n    const zoom = leaflet.map.getZoom();\n\n    const flexGeometries = stops\n      .filter(stop => stop?.geometries?.geoJson?.type === \"Polygon\")\n      .map(stop => {\n        // Add first route color to GeoJSON\n        const { color, id } = stop;\n        stop.geometries.geoJson.properties = { color, id };\n        return stop.geometries.geoJson;\n      });\n\n    return (\n      <FeatureGroup>\n        <ZoomBasedMarkers entities={stops} symbols={symbols} zoom={zoom} />\n        {/* Updating the react key is the only way to force the GeoJSON layer to update */}\n        {flexGeometries.length > 0 && (\n          <GeoJSON\n            data={flexGeometries}\n            key={flexGeometries[0].properties.id}\n            style={feature => {\n              const { color } = feature?.geometry?.properties;\n              return { color };\n            }}\n          />\n        )}\n      </FeatureGroup>\n    );\n  }\n}\n\nStopsOverlay.propTypes = {\n  /** the leaflet reference as obtained from the withLeaflet wrapper */\n  /* eslint-disable-next-line react/forbid-prop-types */\n  leaflet: PropTypes.object.isRequired,\n  /**\n   * A callback for refreshing the stops in the event of a map bounds or zoom\n   * change event.\n   */\n  refreshStops: PropTypes.func.isRequired,\n  /**\n   * The list of stops to create stop markers for.\n   */\n  stops: PropTypes.arrayOf(utils.types.stopLayerStopType).isRequired,\n  /**\n   * A list of symbol definitions for the stops to be rendered at specific zoom levels.\n   */\n  symbols: PropTypes.arrayOf(utils.types.zoomBasedSymbolType).isRequired\n};\n\nexport default withLeaflet(StopsOverlay);\n\nexport { DefaultStopMarker, Styled };\n"],"file":"index.js"}