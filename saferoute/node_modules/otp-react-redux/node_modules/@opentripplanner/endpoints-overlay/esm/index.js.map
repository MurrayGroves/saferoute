{"version":3,"sources":["../src/index.tsx"],"names":["React","Endpoint","S","noop","DefaultMapMarkerIcon","location","type","inner","name","EndpointsOverlay","clearLocation","forgetPlace","fromLocation","intermediatePlaces","locations","MapMarkerIcon","rememberPlace","setLocation","showUserSettings","toLocation","map","place","index","Styled"],"mappings":"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","sourcesContent":["import {\n  ClearLocationArg,\n  Location,\n  MapLocationActionArg,\n  UserLocationAndType\n} from \"@opentripplanner/types\";\nimport React, { ComponentType, ReactElement } from \"react\";\n\nimport Endpoint from \"./endpoint\";\nimport * as S from \"./styled\";\n\ninterface Props {\n  /**\n   * Dispatched when a user clicks on the clear location button in the user\n   * settings. Not needed unless user settings is activated. Dispatched with an\n   * argument in the form of:\n   *\n   * { type: \"from/to\" }\n   */\n  clearLocation?: (arg: ClearLocationArg) => void;\n  /**\n   * Dispatched when a user clicks on the forget location button in the user\n   * settings. Not needed unless user settings is activated. Dispatched with a\n   * string argument representing the type of saved location.\n   */\n  forgetPlace?: (type: string) => void;\n  /**\n   * The from location.\n   */\n  fromLocation?: Location;\n  /**\n   * Intermediate places along a journey.\n   */\n  intermediatePlaces?: Location[];\n  /**\n   * An array of location that the user has saved. Not needed unless user\n   * settings is activated.\n   */\n  locations?: Location[];\n  /**\n   * An optional custom component that can be used to create custom html that\n   * is used in a leaflet divIcon to render the map marker icon for each\n   * endpoint.\n   *\n   * See https://leafletjs.com/reference-1.6.0.html#divicon\n   *\n   * This component is passed 2 props:\n   * - location: either the from or to location depending on the endpoint\n   * - type: either \"from\" or \"to\"\n   */\n  MapMarkerIcon?: ComponentType<UserLocationAndType>;\n  /**\n   * Dispatched when a user clicks on the remember place button in the user\n   * settings. Not needed unless user settings is activated. Dispatched with an\n   * argument in the form of:\n   *\n   * { location: {...location}, type: \"home/work\" }\n   */\n  rememberPlace?: (arg: UserLocationAndType) => void;\n  /**\n   * Dispatched when a location is dragged somewhere else on the map. Dispatched\n   * with an argument in the form of:\n   *\n   * { location: {...location}, reverseGeocode: true, type: \"from/to\" }\n   */\n  setLocation: (arg: MapLocationActionArg) => void;\n  /**\n   * Whether or not to show the user settings popup when an endpoint is clicked.\n   */\n  showUserSettings?: boolean;\n  /**\n   * To to location\n   */\n  toLocation?: Location;\n}\n\nconst noop = () => {};\n\nfunction DefaultMapMarkerIcon({\n  location,\n  type\n}: UserLocationAndType): ReactElement {\n  let inner;\n  switch (type) {\n    case \"to\":\n      inner = (\n        <>\n          <S.StackedToIcon size={24} type={type} />\n          <S.ToIcon size={20} type={type} />\n        </>\n      );\n      break;\n    default:\n      // Default to the location icon on top of a white background.\n      inner = (\n        <>\n          <S.StackedCircle size={24} />\n          <S.StackedLocationIcon size={24} type={type} />\n        </>\n      );\n      break;\n  }\n  return (\n    <S.StackedIconContainer title={location.name}>\n      {inner}\n    </S.StackedIconContainer>\n  );\n}\n\nconst EndpointsOverlay = ({\n  clearLocation = noop,\n  forgetPlace = noop,\n  fromLocation,\n  intermediatePlaces = [],\n  locations = [],\n  MapMarkerIcon = DefaultMapMarkerIcon,\n  rememberPlace = noop,\n  setLocation,\n  showUserSettings,\n  toLocation\n}: Props): ReactElement => (\n  <div>\n    <Endpoint\n      clearLocation={clearLocation}\n      forgetPlace={forgetPlace}\n      location={fromLocation}\n      locations={locations}\n      MapMarkerIcon={MapMarkerIcon}\n      rememberPlace={rememberPlace}\n      setLocation={setLocation}\n      showUserSettings={showUserSettings}\n      type=\"from\"\n    />\n    {intermediatePlaces.map((place, index) => {\n      return (\n        <Endpoint\n          key={index}\n          clearLocation={clearLocation}\n          forgetPlace={forgetPlace}\n          location={place}\n          locations={locations}\n          MapMarkerIcon={MapMarkerIcon}\n          rememberPlace={rememberPlace}\n          setLocation={setLocation}\n          showUserSettings={showUserSettings}\n          type={place.type}\n        />\n      );\n    })}\n    <Endpoint\n      clearLocation={clearLocation}\n      forgetPlace={forgetPlace}\n      location={toLocation}\n      locations={locations}\n      MapMarkerIcon={MapMarkerIcon}\n      rememberPlace={rememberPlace}\n      setLocation={setLocation}\n      showUserSettings={showUserSettings}\n      type=\"to\"\n    />\n  </div>\n);\n\nexport default EndpointsOverlay;\n\n// Rename styled components for export\nexport { S as Styled };\n"],"file":"index.js"}