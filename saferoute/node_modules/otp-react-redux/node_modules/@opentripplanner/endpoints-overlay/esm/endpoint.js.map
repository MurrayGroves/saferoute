{"version":3,"sources":["../src/endpoint.tsx"],"names":["flatten","divIcon","coreUtils","React","Component","FormattedMessage","injectIntl","Marker","Popup","ReactDOMServer","Briefcase","Home","MapMarkerAlt","Sync","Times","S","defaultEnglishMessages","defaultMessages","UserLocationInnerIcon","type","UserLocationIcon","Endpoint","rememberAsHome","props","propsLocation","location","rememberPlace","icon","id","rememberAsWork","forgetHome","forgetPlace","forgetWork","clearLocation","locationType","swapLocation","setLocation","otherType","onDragEnd","e","intl","target","getLatLng","lat","lon","lng","name","formatMessage","defaultMessage","description","reverseGeocode","locations","MapMarkerIcon","showUserSettings","position","match","find","l","map","matchLatLon","isWork","isHome","iconHtml","renderToStaticMarkup","html","className"],"mappings":"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","sourcesContent":["import flatten from \"flat\";\nimport { divIcon } from \"leaflet\";\nimport coreUtils from \"@opentripplanner/core-utils\";\nimport {\n  ClearLocationArg,\n  Location,\n  MapLocationActionArg,\n  UserLocationAndType\n} from \"@opentripplanner/types\";\nimport React, { Component, ComponentType, ReactElement } from \"react\";\nimport { FormattedMessage, injectIntl, IntlShape } from \"react-intl\";\nimport { Marker, Popup } from \"react-leaflet\";\nimport ReactDOMServer from \"react-dom/server\";\nimport { Briefcase } from \"@styled-icons/fa-solid/Briefcase\";\nimport { Home } from \"@styled-icons/fa-solid/Home\";\nimport { MapMarkerAlt } from \"@styled-icons/fa-solid/MapMarkerAlt\";\nimport { Sync } from \"@styled-icons/fa-solid/Sync\";\nimport { Times } from \"@styled-icons/fa-solid/Times\";\n\nimport * as S from \"./styled\";\n\n// Load the default messages.\nimport defaultEnglishMessages from \"../i18n/en-US.yml\";\n\ninterface Props {\n  clearLocation: (arg: ClearLocationArg) => void;\n  forgetPlace: (type: string) => void;\n  intl: IntlShape;\n  location?: Location;\n  locations: Location[];\n  MapMarkerIcon: ComponentType<UserLocationAndType>;\n  rememberPlace: (arg: UserLocationAndType) => void;\n  setLocation: (arg: MapLocationActionArg) => void;\n  showUserSettings: boolean;\n  type: string;\n}\n\ninterface IconProps {\n  type: string;\n}\n\n// FIXME: Use the correct [react-]leaflet type (has side effect on other packages)\ninterface MarkerDragEvent {\n  target: {\n    getLatLng: () => {\n      lat: number;\n      lng: number;\n    };\n  };\n}\n\n// HACK: We should flatten the messages loaded above because\n// the YAML loaders behave differently between webpack and our version of jest:\n// - the yaml loader for webpack returns a nested object,\n// - the yaml loader for jest returns messages with flattened ids.\nconst defaultMessages: Record<string, string> = flatten(defaultEnglishMessages);\n\n/**\n * These icons are used to render common icons for user locations. These will\n * only show up in applications that allow saving user locations.\n */\nfunction UserLocationInnerIcon({ type }: IconProps) {\n  switch (type) {\n    case \"briefcase\":\n      return <Briefcase size={12} />;\n    case \"home\":\n      return <Home size={12} />;\n    case \"map-marker\":\n      return <MapMarkerAlt size={12} />;\n    case \"refresh\":\n      return <Sync size={12} />;\n    case \"times\":\n      return <Times size={12} />;\n    default:\n      return null;\n  }\n}\n\n/**\n * Wrapper for icon that includes spacing.\n */\nfunction UserLocationIcon({ type }: IconProps) {\n  return (\n    <S.IconWrapper>\n      <UserLocationInnerIcon type={type} />\n    </S.IconWrapper>\n  );\n}\n\nclass Endpoint extends Component<Props> {\n  rememberAsHome = (): void => {\n    const { location: propsLocation, rememberPlace } = this.props;\n    const location = {\n      ...propsLocation,\n      icon: \"home\",\n      id: \"home\",\n      type: \"home\"\n    };\n    rememberPlace({ type: \"home\", location });\n  };\n\n  rememberAsWork = (): void => {\n    const { location: propsLocation, rememberPlace } = this.props;\n    const location = {\n      ...propsLocation,\n      icon: \"briefcase\",\n      id: \"work\",\n      type: \"work\"\n    };\n    rememberPlace({ type: \"work\", location });\n  };\n\n  forgetHome = (): void => {\n    const { forgetPlace } = this.props;\n    forgetPlace(\"home\");\n  };\n\n  forgetWork = (): void => {\n    const { forgetPlace } = this.props;\n    forgetPlace(\"work\");\n  };\n\n  clearLocation = (): void => {\n    const { clearLocation, type } = this.props;\n    clearLocation({ locationType: type });\n  };\n\n  swapLocation = (): void => {\n    const { location, setLocation, type } = this.props;\n    this.clearLocation();\n    const otherType = type === \"from\" ? \"to\" : \"from\";\n    setLocation({ locationType: otherType, location });\n  };\n\n  onDragEnd = (e: MarkerDragEvent) => {\n    const { intl, setLocation, type } = this.props;\n    const { lat, lng: lon } = e.target.getLatLng();\n    const location = {\n      lat,\n      lon,\n      name: intl.formatMessage(\n        {\n          defaultMessage: defaultMessages[\"otpUi.EndpointsOverlay.coordinates\"],\n          description:\n            \"Formats rendering coordinates for a locale using the correct number separator\",\n          // FIXME: Combine with the same method at\n          // https://github.com/opentripplanner/otp-react-redux/blob/6d5bc90e57843822809b0dff397bad19d66aeb43/lib/components/form/user-settings.js#L34\n          // and move this potentially shared message to an appropriate package.\n          id: \"otpUi.EndpointsOverlay.coordinates\"\n        },\n        { lat, lon }\n      )\n    };\n    setLocation({ locationType: type, location, reverseGeocode: true });\n  };\n\n  render(): ReactElement {\n    const {\n      location,\n      locations,\n      MapMarkerIcon,\n      showUserSettings,\n      type\n    } = this.props;\n    const position =\n      location && location.lat && location.lon\n        ? [location.lat, location.lon]\n        : null;\n    if (!position) return null;\n    const match = locations.find(l => coreUtils.map.matchLatLon(l, location));\n    const isWork = match && match.type === \"work\";\n    const isHome = match && match.type === \"home\";\n    const iconHtml = ReactDOMServer.renderToStaticMarkup(\n      <MapMarkerIcon location={location} type={type} />\n    );\n    const otherType = type === \"from\" ? \"to\" : \"from\";\n    const icon = isWork ? \"briefcase\" : isHome ? \"home\" : \"map-marker\";\n    return (\n      <Marker\n        draggable\n        icon={divIcon({ html: iconHtml, className: \"\" })}\n        position={position}\n        onDragEnd={this.onDragEnd}\n      >\n        {showUserSettings && (\n          <Popup>\n            <div>\n              <strong>\n                <UserLocationIcon type={icon} />\n                {location.name}\n              </strong>\n              <div>\n                <S.Button\n                  disabled={isWork}\n                  onClick={isHome ? this.forgetHome : this.rememberAsHome}\n                >\n                  {isHome ? (\n                    <>\n                      <UserLocationIcon type=\"times\" />\n                      <FormattedMessage\n                        defaultMessage={\n                          defaultMessages[\"otpUi.EndpointsOverlay.forgetHome\"]\n                        }\n                        description=\"Button text to forget the home location\"\n                        id=\"otpUi.EndpointsOverlay.forgetHome\"\n                      />\n                    </>\n                  ) : (\n                    <>\n                      <UserLocationIcon type=\"home\" />\n                      <FormattedMessage\n                        defaultMessage={\n                          defaultMessages[\"otpUi.EndpointsOverlay.saveAsHome\"]\n                        }\n                        description=\"Button text to save the location as home location\"\n                        id=\"otpUi.EndpointsOverlay.saveAsHome\"\n                      />\n                    </>\n                  )}\n                </S.Button>\n              </div>\n              <div>\n                <S.Button\n                  disabled={isHome}\n                  onClick={isWork ? this.forgetWork : this.rememberAsWork}\n                >\n                  {isWork ? (\n                    <>\n                      <UserLocationIcon type=\"times\" />\n                      <FormattedMessage\n                        defaultMessage={\n                          defaultMessages[\"otpUi.EndpointsOverlay.forgetWork\"]\n                        }\n                        description=\"Button text to forget the work location\"\n                        id=\"otpUi.EndpointsOverlay.forgetWork\"\n                      />\n                    </>\n                  ) : (\n                    <>\n                      <UserLocationIcon type=\"briefcase\" />\n                      <FormattedMessage\n                        defaultMessage={\n                          defaultMessages[\"otpUi.EndpointsOverlay.saveAsWork\"]\n                        }\n                        description=\"Button text to save the location as work location\"\n                        id=\"otpUi.EndpointsOverlay.saveAsWork\"\n                      />\n                    </>\n                  )}\n                </S.Button>\n              </div>\n              <div>\n                <S.Button onClick={this.clearLocation}>\n                  <UserLocationIcon type=\"times\" />\n                  <FormattedMessage\n                    defaultMessage={\n                      defaultMessages[\"otpUi.EndpointsOverlay.clearLocation\"]\n                    }\n                    description=\"Button text to clear the from/to location\"\n                    id=\"otpUi.EndpointsOverlay.clearLocation\"\n                    values={{ locationType: type }}\n                  />\n                </S.Button>\n              </div>\n              <div>\n                <S.Button onClick={this.swapLocation}>\n                  <UserLocationIcon type=\"refresh\" />\n                  <FormattedMessage\n                    defaultMessage={\n                      defaultMessages[\"otpUi.EndpointsOverlay.swapLocation\"]\n                    }\n                    description=\"Button text to swap the from/to location\"\n                    id=\"otpUi.EndpointsOverlay.swapLocation\"\n                    values={{ locationType: otherType }}\n                  />\n                </S.Button>\n              </div>\n            </div>\n          </Popup>\n        )}\n      </Marker>\n    );\n  }\n}\n\nexport default injectIntl(Endpoint);\n"],"file":"endpoint.js"}