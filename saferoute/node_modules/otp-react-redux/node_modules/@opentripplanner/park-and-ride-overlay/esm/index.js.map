{"version":3,"sources":["../src/index.js"],"names":["Styled","BaseMapStyled","FromToLocationPicker","PropTypes","React","FeatureGroup","MapLayer","Marker","Popup","withLeaflet","parkAndRideMarker","ParkAndRideOverlay","props","keyboard","parkAndRideLocations","setLocation","length","map","location","k","name","startsWith","substring","y","x","lat","lon","propTypes","bool","arrayOf","shape","string","isRequired","number","func","defaultProps"],"mappings":";;;;;;;;;;AAAA,SAASA,MAAM,IAAIC,aAAnB,QAAwC,2BAAxC;AACA,OAAOC,oBAAP,MAAiC,0CAAjC;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SACEC,YADF,EAEEC,QAFF,EAGEC,MAHF,EAIEC,KAJF,EAKEC,WALF,QAMO,eANP;AAOA,OAAOC,iBAAP,MAA8B,wBAA9B;;IAEMC,kB;;;;;;;;;;;;;WACJ,6BAAoB,CAAE;;;WAEtB,gCAAuB,CAAE;;;WAEzB,gCAAuB,CAAE;;;WAEzB,gCAAuB,CAAE;;;WAEzB,kBAAS;AACP,wBAAwD,KAAKC,KAA7D;AAAA,UAAQC,QAAR,eAAQA,QAAR;AAAA,UAAkBC,oBAAlB,eAAkBA,oBAAlB;AAAA,UAAwCC,WAAxC,eAAwCA,WAAxC;AACA,UAAI,CAACD,oBAAD,IAAyBA,oBAAoB,CAACE,MAArB,KAAgC,CAA7D,EACE,oBAAO,oBAAC,YAAD,OAAP;AAEF,0BACE,oBAAC,YAAD,QACGF,oBAAoB,CAACG,GAArB,CAAyB,UAACC,QAAD,EAAWC,CAAX,EAAiB;AACzC;AACA,YAAMC,IAAI,GAAGF,QAAQ,CAACE,IAAT,CAAcC,UAAd,CAAyB,MAAzB,IACTH,QAAQ,CAACE,IAAT,CAAcE,SAAd,CAAwB,CAAxB,CADS,GAETJ,QAAQ,CAACE,IAFb;AAGA,4BACE,oBAAC,MAAD;AACE,UAAA,IAAI,EAAEV,iBADR;AAEE,UAAA,GAAG,EAAES,CAFP;AAGE,UAAA,QAAQ,EAAEN,QAHZ;AAIE,UAAA,QAAQ,EAAE,CAACK,QAAQ,CAACK,CAAV,EAAaL,QAAQ,CAACM,CAAtB;AAJZ,wBAME,oBAAC,KAAD,qBACE,oBAAC,aAAD,CAAe,eAAf,qBACE,oBAAC,aAAD,CAAe,UAAf,QAA2BJ,IAA3B,CADF,eAEE,oBAAC,aAAD,CAAe,QAAf,qBACE,oBAAC,oBAAD;AACE,UAAA,KAAK,MADP;AAEE,UAAA,QAAQ,EAAE;AACRK,YAAAA,GAAG,EAAEP,QAAQ,CAACK,CADN;AAERG,YAAAA,GAAG,EAAER,QAAQ,CAACM,CAFN;AAGRJ,YAAAA,IAAI,EAAJA;AAHQ,WAFZ;AAOE,UAAA,WAAW,EAAEL;AAPf,UADF,CAFF,CADF,CANF,CADF;AAyBD,OA9BA,CADH,CADF;AAmCD;;;;EAjD8BT,Q;;AAoDjCK,kBAAkB,CAACgB,SAAnB,GAA+B;AAC7Bd,EAAAA,QAAQ,EAAEV,SAAS,CAACyB,IADS;AAE7Bd,EAAAA,oBAAoB,EAAEX,SAAS,CAAC0B,OAAV,CACpB1B,SAAS,CAAC2B,KAAV,CAAgB;AACdV,IAAAA,IAAI,EAAEjB,SAAS,CAAC4B,MAAV,CAAiBC,UADT;AAEdR,IAAAA,CAAC,EAAErB,SAAS,CAAC8B,MAAV,CAAiBD,UAFN;AAGdT,IAAAA,CAAC,EAAEpB,SAAS,CAAC8B,MAAV,CAAiBD;AAHN,GAAhB,EAIGA,UALiB,CAFO;AAS7BjB,EAAAA,WAAW,EAAEZ,SAAS,CAAC+B,IAAV,CAAeF;AATC,CAA/B;AAYArB,kBAAkB,CAACwB,YAAnB,GAAkC;AAChCtB,EAAAA,QAAQ,EAAE;AADsB,CAAlC;AAIA,eAAeJ,WAAW,CAACE,kBAAD,CAA1B","sourcesContent":["import { Styled as BaseMapStyled } from \"@opentripplanner/base-map\";\nimport FromToLocationPicker from \"@opentripplanner/from-to-location-picker\";\nimport PropTypes from \"prop-types\";\nimport React from \"react\";\nimport {\n  FeatureGroup,\n  MapLayer,\n  Marker,\n  Popup,\n  withLeaflet\n} from \"react-leaflet\";\nimport parkAndRideMarker from \"./park-and-ride-marker\";\n\nclass ParkAndRideOverlay extends MapLayer {\n  componentDidMount() {}\n\n  componentWillUnmount() {}\n\n  createLeafletElement() {}\n\n  updateLeafletElement() {}\n\n  render() {\n    const { keyboard, parkAndRideLocations, setLocation } = this.props;\n    if (!parkAndRideLocations || parkAndRideLocations.length === 0)\n      return <FeatureGroup />;\n\n    return (\n      <FeatureGroup>\n        {parkAndRideLocations.map((location, k) => {\n          // TODO: extract park-and-ride names from international \"Park-And-Ride\" string constructs.\n          const name = location.name.startsWith(\"P+R \")\n            ? location.name.substring(4)\n            : location.name;\n          return (\n            <Marker\n              icon={parkAndRideMarker}\n              key={k}\n              keyboard={keyboard}\n              position={[location.y, location.x]}\n            >\n              <Popup>\n                <BaseMapStyled.MapOverlayPopup>\n                  <BaseMapStyled.PopupTitle>{name}</BaseMapStyled.PopupTitle>\n                  <BaseMapStyled.PopupRow>\n                    <FromToLocationPicker\n                      label\n                      location={{\n                        lat: location.y,\n                        lon: location.x,\n                        name\n                      }}\n                      setLocation={setLocation}\n                    />\n                  </BaseMapStyled.PopupRow>\n                </BaseMapStyled.MapOverlayPopup>\n              </Popup>\n            </Marker>\n          );\n        })}\n      </FeatureGroup>\n    );\n  }\n}\n\nParkAndRideOverlay.propTypes = {\n  keyboard: PropTypes.bool,\n  parkAndRideLocations: PropTypes.arrayOf(\n    PropTypes.shape({\n      name: PropTypes.string.isRequired,\n      x: PropTypes.number.isRequired,\n      y: PropTypes.number.isRequired\n    }).isRequired\n  ),\n  setLocation: PropTypes.func.isRequired\n};\n\nParkAndRideOverlay.defaultProps = {\n  keyboard: false\n};\n\nexport default withLeaflet(ParkAndRideOverlay);\n"],"file":"index.js"}