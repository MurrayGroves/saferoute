{"version":3,"sources":["../src/profile.js"],"names":["filterProfileOptions","response","optStrs","filteredIndices","filteredProfile","otp","profile","filter","option","i","optStr","access","map","a","mode","join","transit","routes","route","id","indexOf","push","filteredJourneys","journeys","journey","locationString","str","split","accessToLeg","origin","destination","duration","time","transitLeg","from","name","to","optionToItinerary","query","itin","legs","walkTime","waitingTime","length","status","walkOnEdges","bikeEdges","walkOffEdges","onStationName","walkOnTime","offStationName","walkOffTime","streetEdges","forEach","edge","bikeRentalOffStation","distance","bikeRentalOnStation","fromName","toName","rideStats","avg","averageWait","waitStats","egress","profileOptionsToItineraries","options"],"mappings":"AAAA,OAAO,SAASA,oBAAT,CAA8BC,QAA9B,EAAwC;AAC7C;AACA,MAAMC,OAAO,GAAG,EAAhB;AACA,MAAMC,eAAe,GAAG,EAAxB;AAEA,MAAMC,eAAe,GAAGH,QAAQ,CAACI,GAAT,CAAaC,OAAb,CAAqBC,MAArB,CAA4B,UAACC,MAAD,EAASC,CAAT,EAAe;AACjE,QAAIC,MAAM,GAAGF,MAAM,CAACG,MAAP,CAAcC,GAAd,CAAkB,UAAAC,CAAC;AAAA,aAAIA,CAAC,CAACC,IAAN;AAAA,KAAnB,EAA+BC,IAA/B,CAAoC,GAApC,CAAb;;AACA,QAAIP,MAAM,CAACQ,OAAX,EAAoB;AAClBN,MAAAA,MAAM,kBAAWF,MAAM,CAACQ,OAAP,CACdJ,GADc,CACV,UAAAI,OAAO,EAAI;AACd,eAAOA,OAAO,CAACC,MAAR,CAAeL,GAAf,CAAmB,UAAAM,KAAK;AAAA,iBAAIA,KAAK,CAACC,EAAV;AAAA,SAAxB,EAAsCJ,IAAtC,CAA2C,GAA3C,CAAP;AACD,OAHc,EAIdA,IAJc,CAIT,GAJS,CAAX,CAAN;AAKD;;AACD,QAAIb,OAAO,CAACkB,OAAR,CAAgBV,MAAhB,MAA4B,CAAC,CAAjC,EAAoC,OAAO,KAAP;AACpCR,IAAAA,OAAO,CAACmB,IAAR,CAAaX,MAAb;AACAP,IAAAA,eAAe,CAACkB,IAAhB,CAAqBZ,CAArB;AACA,WAAO,IAAP;AACD,GAbuB,CAAxB;AAeA,MAAMa,gBAAgB,GAAGrB,QAAQ,CAACI,GAAT,CAAakB,QAAb,CAAsBhB,MAAtB,CACvB,UAACiB,OAAD,EAAUf,CAAV;AAAA,WAAgBN,eAAe,CAACiB,OAAhB,CAAwBX,CAAxB,MAA+B,CAAC,CAAhD;AAAA,GADuB,CAAzB;AAIAR,EAAAA,QAAQ,CAACI,GAAT,CAAaC,OAAb,GAAuBF,eAAvB;AACAH,EAAAA,QAAQ,CAACI,GAAT,CAAakB,QAAb,GAAwBD,gBAAxB;AACA,SAAOrB,QAAP;AACD;;AAED,SAASwB,cAAT,CAAwBC,GAAxB,EAA6B;AAC3B,SAAOA,GAAP,aAAOA,GAAP,uBAAOA,GAAG,CAAEC,KAAL,CAAW,GAAX,EAAgB,CAAhB,CAAP;AACD;;AAED,SAASC,WAAT,CAAqBjB,MAArB,EAA6BkB,MAA7B,EAAqCC,WAArC,EAAkD;AAChD,SAAO;AACLhB,IAAAA,IAAI,EAAEH,MAAM,CAACG,IADR;AAELiB,IAAAA,QAAQ,EAAEpB,MAAM,CAACqB,IAFZ;AAGLC,IAAAA,UAAU,EAAE,KAHP;AAILC,IAAAA,IAAI,EAAE;AACJC,MAAAA,IAAI,EAAEV,cAAc,CAACI,MAAD;AADhB,KAJD;AAOLO,IAAAA,EAAE,EAAE;AACFD,MAAAA,IAAI,EAAEV,cAAc,CAACK,WAAD;AADlB;AAPC,GAAP;AAWD,C,CAED;;;AAEA,SAASO,iBAAT,CAA2B7B,MAA3B,EAAmC8B,KAAnC,EAA0C;AACxC,MAAMC,IAAI,GAAG;AACXR,IAAAA,QAAQ,EAAEvB,MAAM,CAACwB,IADN;AAEXQ,IAAAA,IAAI,EAAE,EAFK;AAGXC,IAAAA,QAAQ,EAAE,CAHC;AAIXC,IAAAA,WAAW,EAAE;AAJF,GAAb,CADwC,CAQxC;;AACA,MAAIlC,MAAM,CAACG,MAAP,IAAiBH,MAAM,CAACG,MAAP,CAAcgC,MAAd,GAAuB,CAA5C,EAA+C;AAC7C,QAAInC,MAAM,CAACG,MAAP,CAAc,CAAd,EAAiBG,IAAjB,KAA0B,cAA9B,EAA8C;AAC5C,UAAI8B,MAAM,GAAG,SAAb;AACA,UAAMC,WAAW,GAAG,EAApB;AACA,UAAMC,SAAS,GAAG,EAAlB;AACA,UAAMC,YAAY,GAAG,EAArB;AACA,UAAIC,aAAJ;AACA,UAAIC,UAAU,GAAG,CAAjB;AACA,UAAIC,cAAJ;AACA,UAAIC,WAAW,GAAG,CAAlB;AACA3C,MAAAA,MAAM,CAACG,MAAP,CAAc,CAAd,EAAiByC,WAAjB,CAA6BC,OAA7B,CAAqC,UAAAC,IAAI,EAAI;AAC3C;AACA,YAAIA,IAAI,CAACC,oBAAT,EAA+B;AAC7BX,UAAAA,MAAM,GAAG,UAAT;AACAM,UAAAA,cAAc,GAAGI,IAAI,CAACC,oBAAL,CAA0BpB,IAA3C;AACD;;AAED,YAAIS,MAAM,KAAK,SAAf,EAA0B;AACxBC,UAAAA,WAAW,CAACxB,IAAZ,CAAiBiC,IAAjB;AACAL,UAAAA,UAAU,IAAIK,IAAI,CAACE,QAAnB;AACD,SAHD,MAGO,IAAIZ,MAAM,KAAK,MAAf,EAAuB;AAC5BE,UAAAA,SAAS,CAACzB,IAAV,CAAeiC,IAAf;AACD,SAFM,MAEA,IAAIV,MAAM,KAAK,UAAf,EAA2B;AAChCG,UAAAA,YAAY,CAAC1B,IAAb,CAAkBiC,IAAlB;AACAH,UAAAA,WAAW,IAAIG,IAAI,CAACE,QAApB;AACD,SAf0C,CAiB3C;;;AACA,YAAIF,IAAI,CAACG,mBAAT,EAA8B;AAC5Bb,UAAAA,MAAM,GAAG,MAAT;AACAI,UAAAA,aAAa,GAAGM,IAAI,CAACG,mBAAL,CAAyBtB,IAAzC;AACD;AACF,OAtBD;AAwBAI,MAAAA,IAAI,CAACE,QAAL,IAAiBQ,UAAU,GAAGE,WAA9B,CAjC4C,CAmC5C;;AACAZ,MAAAA,IAAI,CAACC,IAAL,CAAUnB,IAAV,CAAe;AACbP,QAAAA,IAAI,EAAE,MADO;AAEbiB,QAAAA,QAAQ,EAAEkB,UAFG;AAGbhB,QAAAA,UAAU,EAAE,KAHC;AAIbC,QAAAA,IAAI,EAAE;AACJC,UAAAA,IAAI,EAAEV,cAAc,CAACa,KAAK,IAAIA,KAAK,CAACJ,IAAN,CAAWC,IAArB;AADhB,SAJO;AAObC,QAAAA,EAAE,EAAE;AACFD,UAAAA,IAAI,EAAEa;AADJ;AAPS,OAAf,EApC4C,CAgD5C;;AACAT,MAAAA,IAAI,CAACC,IAAL,CAAUnB,IAAV,CAAe;AACbP,QAAAA,IAAI,EAAE,cADO;AAEbiB,QAAAA,QAAQ,EAAEvB,MAAM,CAACwB,IAAP,GAAciB,UAAd,GAA2BE,WAFxB;AAGblB,QAAAA,UAAU,EAAE,KAHC;AAIbC,QAAAA,IAAI,EAAE;AACJC,UAAAA,IAAI,EAAEa;AADF,SAJO;AAObZ,QAAAA,EAAE,EAAE;AACFD,UAAAA,IAAI,EAAEe;AADJ;AAPS,OAAf,EAjD4C,CA6D5C;;AACAX,MAAAA,IAAI,CAACC,IAAL,CAAUnB,IAAV,CAAe;AACbP,QAAAA,IAAI,EAAE,MADO;AAEbiB,QAAAA,QAAQ,EAAEoB,WAFG;AAGblB,QAAAA,UAAU,EAAE,KAHC;AAIbC,QAAAA,IAAI,EAAE;AACJC,UAAAA,IAAI,EAAEe;AADF,SAJO;AAObd,QAAAA,EAAE,EAAE;AACFD,UAAAA,IAAI,EAAEV,cAAc,CAACa,KAAK,IAAIA,KAAK,CAACF,EAAN,CAASD,IAAnB;AADlB;AAPS,OAAf;AAWD,KAzED,MAyEO;AACLI,MAAAA,IAAI,CAACC,IAAL,CAAUnB,IAAV,CACEO,WAAW,CACTpB,MAAM,CAACG,MAAP,CAAc,CAAd,CADS,EAET2B,KAAK,IAAIA,KAAK,CAACJ,IAAN,CAAWC,IAFX,EAGT3B,MAAM,CAACQ,OAAP,GAAiB,IAAjB,GAAwBsB,KAAK,IAAIA,KAAK,CAACF,EAAN,CAASD,IAHjC,CADb;AAOA,UAAI3B,MAAM,CAACG,MAAP,CAAc,CAAd,EAAiBG,IAAjB,KAA0B,MAA9B,EACEyB,IAAI,CAACE,QAAL,IAAiBjC,MAAM,CAACG,MAAP,CAAc,CAAd,EAAiBqB,IAAlC;AACH;AACF,GA9FuC,CAgGxC;;;AACA,MAAIxB,MAAM,CAACQ,OAAX,EAAoB;AAClBR,IAAAA,MAAM,CAACQ,OAAP,CAAeqC,OAAf,CAAuB,UAAArC,OAAO,EAAI;AAChCuB,MAAAA,IAAI,CAACC,IAAL,CAAUnB,IAAV,CAAe;AACbY,QAAAA,UAAU,EAAE,IADC;AAEbnB,QAAAA,IAAI,EAAEE,OAAO,CAACF,IAFD;AAGboB,QAAAA,IAAI,EAAE;AACJC,UAAAA,IAAI,EAAEnB,OAAO,CAAC0C;AADV,SAHO;AAMbtB,QAAAA,EAAE,EAAE;AACFD,UAAAA,IAAI,EAAEnB,OAAO,CAAC2C;AADZ,SANS;AASb1C,QAAAA,MAAM,EAAED,OAAO,CAACC,MATH;AAUbc,QAAAA,QAAQ,EAAEf,OAAO,CAAC4C,SAAR,CAAkBC,GAVf;AAWbC,QAAAA,WAAW,EAAE9C,OAAO,CAAC+C,SAAR,CAAkBF;AAXlB,OAAf;AAaAtB,MAAAA,IAAI,CAACG,WAAL,IAAoB1B,OAAO,CAAC+C,SAAR,CAAkBF,GAAtC;AACD,KAfD;AAgBD,GAlHuC,CAoHxC;;;AACA,MAAIrD,MAAM,CAACwD,MAAP,IAAiBxD,MAAM,CAACwD,MAAP,CAAcrB,MAAd,GAAuB,CAA5C,EAA+C;AAC7C;AACA,QAAMd,MAAM,GAAGrB,MAAM,CAACQ,OAAP,GACXR,MAAM,CAACQ,OAAP,CAAeR,MAAM,CAACQ,OAAP,CAAe2B,MAAf,GAAwB,CAAvC,EAA0CgB,MAD/B,GAEX,IAFJ;AAIApB,IAAAA,IAAI,CAACC,IAAL,CAAUnB,IAAV,CACEO,WAAW,CAACpB,MAAM,CAACwD,MAAP,CAAc,CAAd,CAAD,EAAmBnC,MAAnB,EAA2BS,KAAK,IAAIA,KAAK,CAACF,EAAN,CAASD,IAA7C,CADb;AAGA,QAAI3B,MAAM,CAACwD,MAAP,CAAc,CAAd,EAAiBlD,IAAjB,KAA0B,MAA9B,EACEyB,IAAI,CAACE,QAAL,IAAiBjC,MAAM,CAACwD,MAAP,CAAc,CAAd,EAAiBhC,IAAlC;AACH;;AAED,SAAOO,IAAP;AACD;AAED;;;AAEA,OAAO,SAAS0B,2BAAT,CAAqCC,OAArC,EAA8C5B,KAA9C,EAAqD;AAC1D,SAAO4B,OAAO,CAACtD,GAAR,CAAY,UAAAJ,MAAM;AAAA,WAAI6B,iBAAiB,CAAC7B,MAAD,EAAS8B,KAAT,CAArB;AAAA,GAAlB,CAAP;AACD","sourcesContent":["export function filterProfileOptions(response) {\n  // Filter out similar options. TODO: handle on server?\n  const optStrs = [];\n  const filteredIndices = [];\n\n  const filteredProfile = response.otp.profile.filter((option, i) => {\n    let optStr = option.access.map(a => a.mode).join(\"/\");\n    if (option.transit) {\n      optStr += ` to ${option.transit\n        .map(transit => {\n          return transit.routes.map(route => route.id).join(\"/\");\n        })\n        .join(\",\")}`;\n    }\n    if (optStrs.indexOf(optStr) !== -1) return false;\n    optStrs.push(optStr);\n    filteredIndices.push(i);\n    return true;\n  });\n\n  const filteredJourneys = response.otp.journeys.filter(\n    (journey, i) => filteredIndices.indexOf(i) !== -1\n  );\n\n  response.otp.profile = filteredProfile;\n  response.otp.journeys = filteredJourneys;\n  return response;\n}\n\nfunction locationString(str) {\n  return str?.split(\",\")[0];\n}\n\nfunction accessToLeg(access, origin, destination) {\n  return {\n    mode: access.mode,\n    duration: access.time,\n    transitLeg: false,\n    from: {\n      name: locationString(origin)\n    },\n    to: {\n      name: locationString(destination)\n    }\n  };\n}\n\n// helper functions for profileOptionsToItineraries:\n\nfunction optionToItinerary(option, query) {\n  const itin = {\n    duration: option.time,\n    legs: [],\n    walkTime: 0,\n    waitingTime: 0\n  };\n\n  // access leg\n  if (option.access && option.access.length > 0) {\n    if (option.access[0].mode === \"BICYCLE_RENT\") {\n      let status = \"WALK_ON\";\n      const walkOnEdges = [];\n      const bikeEdges = [];\n      const walkOffEdges = [];\n      let onStationName;\n      let walkOnTime = 0;\n      let offStationName;\n      let walkOffTime = 0;\n      option.access[0].streetEdges.forEach(edge => {\n        // check if we're returning the bike\n        if (edge.bikeRentalOffStation) {\n          status = \"WALK_OFF\";\n          offStationName = edge.bikeRentalOffStation.name;\n        }\n\n        if (status === \"WALK_ON\") {\n          walkOnEdges.push(edge);\n          walkOnTime += edge.distance;\n        } else if (status === \"BIKE\") {\n          bikeEdges.push(edge);\n        } else if (status === \"WALK_OFF\") {\n          walkOffEdges.push(edge);\n          walkOffTime += edge.distance;\n        }\n\n        // check if we're picking up the bike\n        if (edge.bikeRentalOnStation) {\n          status = \"BIKE\";\n          onStationName = edge.bikeRentalOnStation.name;\n        }\n      });\n\n      itin.walkTime += walkOnTime + walkOffTime;\n\n      // create the 'on' walk leg\n      itin.legs.push({\n        mode: \"WALK\",\n        duration: walkOnTime,\n        transitLeg: false,\n        from: {\n          name: locationString(query && query.from.name)\n        },\n        to: {\n          name: onStationName\n        }\n      });\n\n      // create the bike leg\n      itin.legs.push({\n        mode: \"BICYCLE_RENT\",\n        duration: option.time - walkOnTime - walkOffTime,\n        transitLeg: false,\n        from: {\n          name: onStationName\n        },\n        to: {\n          name: offStationName\n        }\n      });\n\n      // create the 'off' walk leg\n      itin.legs.push({\n        mode: \"WALK\",\n        duration: walkOffTime,\n        transitLeg: false,\n        from: {\n          name: offStationName\n        },\n        to: {\n          name: locationString(query && query.to.name)\n        }\n      });\n    } else {\n      itin.legs.push(\n        accessToLeg(\n          option.access[0],\n          query && query.from.name,\n          option.transit ? null : query && query.to.name\n        )\n      );\n      if (option.access[0].mode === \"WALK\")\n        itin.walkTime += option.access[0].time;\n    }\n  }\n\n  // transit legs\n  if (option.transit) {\n    option.transit.forEach(transit => {\n      itin.legs.push({\n        transitLeg: true,\n        mode: transit.mode,\n        from: {\n          name: transit.fromName\n        },\n        to: {\n          name: transit.toName\n        },\n        routes: transit.routes,\n        duration: transit.rideStats.avg,\n        averageWait: transit.waitStats.avg\n      });\n      itin.waitingTime += transit.waitStats.avg;\n    });\n  }\n\n  // egress leg\n  if (option.egress && option.egress.length > 0) {\n    // find the origin name, for transit trips\n    const origin = option.transit\n      ? option.transit[option.transit.length - 1].toName\n      : null;\n\n    itin.legs.push(\n      accessToLeg(option.egress[0], origin, query && query.to.name)\n    );\n    if (option.egress[0].mode === \"WALK\")\n      itin.walkTime += option.egress[0].time;\n  }\n\n  return itin;\n}\n\n/** profileOptionsToItineraries * */\n\nexport function profileOptionsToItineraries(options, query) {\n  return options.map(option => optionToItinerary(option, query));\n}\n"],"file":"profile.js"}