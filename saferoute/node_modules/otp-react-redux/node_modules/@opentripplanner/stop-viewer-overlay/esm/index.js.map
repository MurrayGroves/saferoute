{"version":3,"sources":["../src/index.js"],"names":["PropTypes","React","FeatureGroup","MapLayer","withLeaflet","StopViewerOverlay","prevProps","nextStop","props","stop","oldStopId","id","hasNewStopId","leaflet","map","setView","lat","lon","StopMarker","elementType","isRequired","defaultProps"],"mappings":";;;;;;;;;;AAAA,OAAOA,SAAP,MAAsB,YAAtB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,YAAT,EAAuBC,QAAvB,EAAiCC,WAAjC,QAAoD,eAApD;AAEA;AACA;AACA;AACA;;IACMC,iB;;;;;;;;;;;;;WACJ,6BAAoB,CAAE,C,CAEtB;;;;WACA,gCAAuB,CAAE;AAEzB;AACF;AACA;AACA;AACA;;;;WACE,4BAAmBC,SAAnB,EAA8B;AAC5B,UAAMC,QAAQ,GAAG,KAAKC,KAAL,CAAWC,IAA5B;AACA,UAAMC,SAAS,GAAGJ,SAAS,CAACG,IAAV,IAAkBH,SAAS,CAACG,IAAV,CAAeE,EAAnD;AACA,UAAMC,YAAY,GAAGL,QAAQ,IAAIA,QAAQ,CAACI,EAAT,KAAgBD,SAAjD;AACA,UAAIE,YAAJ,EACE,KAAKJ,KAAL,CAAWK,OAAX,CAAmBC,GAAnB,CAAuBC,OAAvB,CAA+B,CAACR,QAAQ,CAACS,GAAV,EAAeT,QAAQ,CAACU,GAAxB,CAA/B;AACH;;;WAED,gCAAuB,CAAE;;;WAEzB,gCAAuB,CAAE;;;WAEzB,kBAAS;AACP,wBAA6B,KAAKT,KAAlC;AAAA,UAAQC,IAAR,eAAQA,IAAR;AAAA,UAAcS,UAAd,eAAcA,UAAd;AAEA,UAAI,CAACT,IAAL,EAAW,oBAAO,oBAAC,YAAD,OAAP;AAEX,0BACE,oBAAC,YAAD,qBACE,oBAAC,UAAD;AAAY,QAAA,IAAI,EAAEA;AAAlB,QADF,CADF;AAKD;;;;EAjC6BN,Q;;AAoChCE,iBAAiB,CAACG,KAAlB,GAA0B;AACxB;AACF;AACA;AACE;AACAU,EAAAA,UAAU,EAAElB,SAAS,CAACmB,WAAV,CAAsBC;AALV,CAA1B;AAQAf,iBAAiB,CAACgB,YAAlB,GAAiC;AAC/BZ,EAAAA,IAAI,EAAE;AADyB,CAAjC;AAIA,eAAeL,WAAW,CAACC,iBAAD,CAA1B","sourcesContent":["import PropTypes from \"prop-types\";\nimport React from \"react\";\nimport { FeatureGroup, MapLayer, withLeaflet } from \"react-leaflet\";\n\n/**\n * This overlay is intended to highlight a specific stop on a map typically in\n * conjunction with some kind of stop viewer.\n */\nclass StopViewerOverlay extends MapLayer {\n  componentDidMount() {}\n\n  // TODO: determine why the default MapLayer componentWillUnmount() method throws an error\n  componentWillUnmount() {}\n\n  /**\n   * Only reset map view if a new stop is selected. This prevents resetting the\n   * bounds if, for example, the arrival times have changed for the same stop\n   * in the viewer.\n   */\n  componentDidUpdate(prevProps) {\n    const nextStop = this.props.stop;\n    const oldStopId = prevProps.stop && prevProps.stop.id;\n    const hasNewStopId = nextStop && nextStop.id !== oldStopId;\n    if (hasNewStopId)\n      this.props.leaflet.map.setView([nextStop.lat, nextStop.lon]);\n  }\n\n  createLeafletElement() {}\n\n  updateLeafletElement() {}\n\n  render() {\n    const { stop, StopMarker } = this.props;\n\n    if (!stop) return <FeatureGroup />;\n\n    return (\n      <FeatureGroup>\n        <StopMarker stop={stop} />\n      </FeatureGroup>\n    );\n  }\n}\n\nStopViewerOverlay.props = {\n  /**\n   * An object representing a transit stop\n   */\n  // stop: coreUtils.types.stopLayerStopType,\n  StopMarker: PropTypes.elementType.isRequired\n};\n\nStopViewerOverlay.defaultProps = {\n  stop: null\n};\n\nexport default withLeaflet(StopViewerOverlay);\n"],"file":"index.js"}