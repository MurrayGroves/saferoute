import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _inherits from "@babel/runtime/helpers/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

import PropTypes from "prop-types";
import React from "react";
import { FeatureGroup, MapLayer, withLeaflet } from "react-leaflet";
/**
 * This overlay is intended to highlight a specific stop on a map typically in
 * conjunction with some kind of stop viewer.
 */

var StopViewerOverlay = /*#__PURE__*/function (_MapLayer) {
  _inherits(StopViewerOverlay, _MapLayer);

  var _super = _createSuper(StopViewerOverlay);

  function StopViewerOverlay() {
    _classCallCheck(this, StopViewerOverlay);

    return _super.apply(this, arguments);
  }

  _createClass(StopViewerOverlay, [{
    key: "componentDidMount",
    value: function componentDidMount() {} // TODO: determine why the default MapLayer componentWillUnmount() method throws an error

  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {}
    /**
     * Only reset map view if a new stop is selected. This prevents resetting the
     * bounds if, for example, the arrival times have changed for the same stop
     * in the viewer.
     */

  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps) {
      var nextStop = this.props.stop;
      var oldStopId = prevProps.stop && prevProps.stop.id;
      var hasNewStopId = nextStop && nextStop.id !== oldStopId;
      if (hasNewStopId) this.props.leaflet.map.setView([nextStop.lat, nextStop.lon]);
    }
  }, {
    key: "createLeafletElement",
    value: function createLeafletElement() {}
  }, {
    key: "updateLeafletElement",
    value: function updateLeafletElement() {}
  }, {
    key: "render",
    value: function render() {
      var _this$props = this.props,
          stop = _this$props.stop,
          StopMarker = _this$props.StopMarker;
      if (!stop) return /*#__PURE__*/React.createElement(FeatureGroup, null);
      return /*#__PURE__*/React.createElement(FeatureGroup, null, /*#__PURE__*/React.createElement(StopMarker, {
        stop: stop
      }));
    }
  }]);

  return StopViewerOverlay;
}(MapLayer);

StopViewerOverlay.props = {
  /**
   * An object representing a transit stop
   */
  // stop: coreUtils.types.stopLayerStopType,
  StopMarker: PropTypes.elementType.isRequired
};
StopViewerOverlay.defaultProps = {
  stop: null
};
export default withLeaflet(StopViewerOverlay);
//# sourceMappingURL=index.js.map