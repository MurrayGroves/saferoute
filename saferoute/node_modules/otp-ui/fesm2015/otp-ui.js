import * as i0 from '@angular/core';
import { Injectable, Directive, HostListener, EventEmitter, Component, Input, Output, NgModule } from '@angular/core';
import * as i1 from '@angular/forms';
import { FormGroup, FormControl, Validators, FormsModule, ReactiveFormsModule } from '@angular/forms';
import * as i2 from '@angular/common';
import { CommonModule } from '@angular/common';

class OtpUiService {
    constructor() { }
}
OtpUiService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.13", ngImport: i0, type: OtpUiService, deps: [], target: i0.ɵɵFactoryTarget.Injectable });
OtpUiService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.13", ngImport: i0, type: OtpUiService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.13", ngImport: i0, type: OtpUiService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return []; } });

class NextfocusDirective {
    constructor() { }
    onKeyDown(keyboardEvent) {
        const target = keyboardEvent.target;
        const prvtarget = keyboardEvent.target;
        const { type } = target;
        let { nextElementSibling } = target;
        let { previousElementSibling } = prvtarget;
        if (keyboardEvent.key === 'ArrowLeft') {
            try {
                previousElementSibling.focus();
                return;
            }
            catch (_a) {
                return;
            }
        }
        if (keyboardEvent.key === 'Tab') {
            try {
                nextElementSibling.focus();
                return;
            }
            catch (_b) {
                return;
            }
        }
        if (!target || target.maxLength !== target.value.length) {
            if (keyboardEvent.key === 'Backspace') {
                try {
                    previousElementSibling.focus();
                    return;
                }
                catch (_c) {
                    return;
                }
            }
            else if (keyboardEvent.key === 'ArrowLeft') {
                try {
                    previousElementSibling.focus();
                    return;
                }
                catch (_d) {
                    return;
                }
            }
            else if (keyboardEvent.key === 'ArrowRight') {
                try {
                    nextElementSibling.focus();
                    return;
                }
                catch (_e) {
                    return;
                }
            }
            else if (keyboardEvent.key === 'Delete') {
                try {
                    previousElementSibling.focus();
                    return;
                }
                catch (_f) {
                    return;
                }
            }
            return;
        }
        keyboardEvent.preventDefault();
        while (nextElementSibling) {
            if (keyboardEvent.key === 'ArrowRight' || keyboardEvent.key === 'Tab') {
                try {
                    nextElementSibling.focus();
                    return;
                }
                catch (_g) {
                    return;
                }
            }
            else if (keyboardEvent.key === 'ArrowLeft' || keyboardEvent.key === 'Backspace') {
                try {
                    previousElementSibling.focus();
                    return;
                }
                catch (_h) {
                    console.log("catch");
                    return;
                }
            }
            if (nextElementSibling.type === type) {
                try {
                    nextElementSibling.focus();
                    return;
                }
                catch (_j) {
                    return;
                }
            }
            nextElementSibling = nextElementSibling === null || nextElementSibling === void 0 ? void 0 : nextElementSibling.nextElementSibling;
        }
    }
}
NextfocusDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.13", ngImport: i0, type: NextfocusDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive });
NextfocusDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.13", type: NextfocusDirective, selector: "[libNextfocus]", host: { listeners: { "keyup": "onKeyDown($event)" } }, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.13", ngImport: i0, type: NextfocusDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[libNextfocus]'
                }]
        }], ctorParameters: function () { return []; }, propDecorators: { onKeyDown: [{
                type: HostListener,
                args: ['keyup', ['$event']]
            }] } });

class NumbersOnlyDirective {
    constructor() { }
    onKeyDown(e) {
        if (e.which != 8 && e.which != 0 && e.which < 48 || e.which > 57) {
            e.preventDefault();
        }
    }
}
NumbersOnlyDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.13", ngImport: i0, type: NumbersOnlyDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive });
NumbersOnlyDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.13", type: NumbersOnlyDirective, selector: "[libNumbersOnly]", host: { listeners: { "keydown": "onKeyDown($event)" } }, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.13", ngImport: i0, type: NumbersOnlyDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[libNumbersOnly]'
                }]
        }], ctorParameters: function () { return []; }, propDecorators: { onKeyDown: [{
                type: HostListener,
                args: ['keydown', ['$event']]
            }] } });

class OtpUiComponent {
    constructor() {
        this.otpSent = new EventEmitter;
        this.arr = [];
    }
    ngOnInit() {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q;
        //mandatory initialisation
        this.otp_title = (this.otp.otp_title) ? this.otp.otp_title : "Enter the OTP";
        this.otp_subtitle = (this.otp.otp_subtitle) ? this.otp.otp_subtitle : "OTP will be sent to your registered mobile number, Please verify";
        this.buttonText = (this.otp.buttonText) ? this.otp.buttonText : "Validate OTP";
        this.length = (((_a = this.otp) === null || _a === void 0 ? void 0 : _a.length) > 3) ? this.otp.length : 4;
        this.backgroundColor = (_c = (_b = this.otp) === null || _b === void 0 ? void 0 : _b.styles) === null || _c === void 0 ? void 0 : _c.backgroundColor;
        this.buttonColor = (_e = (_d = this.otp) === null || _d === void 0 ? void 0 : _d.styles) === null || _e === void 0 ? void 0 : _e.buttonColor;
        this.cardWidth = (((_g = (_f = this.otp) === null || _f === void 0 ? void 0 : _f.styles) === null || _g === void 0 ? void 0 : _g.cardWidth) > '40%') ? (_j = (_h = this.otp) === null || _h === void 0 ? void 0 : _h.styles) === null || _j === void 0 ? void 0 : _j.cardWidth : '50%';
        this.buttonTextColor = (_l = (_k = this.otp) === null || _k === void 0 ? void 0 : _k.styles) === null || _l === void 0 ? void 0 : _l.buttonTextColor;
        this.head_color = (_o = (_m = this.otp) === null || _m === void 0 ? void 0 : _m.styles) === null || _o === void 0 ? void 0 : _o.head_color;
        this.sub_head_color = (_q = (_p = this.otp) === null || _p === void 0 ? void 0 : _p.styles) === null || _q === void 0 ? void 0 : _q.sub_head_color;
        this.loginForm = new FormGroup({});
        for (let i = 0; i < this.length; i++) {
            this.arr.push(this.getFormConntrol(i));
            this.loginForm.addControl(this.getFormConntrol(i), new FormControl('', Validators.required));
        }
    }
    getFormConntrol(index) {
        return `crtl${index}`;
    }
    sublogin() {
        this.otpSent.emit(this.loginForm.value);
    }
}
OtpUiComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.13", ngImport: i0, type: OtpUiComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
OtpUiComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.13", type: OtpUiComponent, selector: "lib-otp-ui", inputs: { otp: "otp" }, outputs: { otpSent: "otpSent" }, ngImport: i0, template: "<link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css\"\r\n  integrity=\"sha384-Gn5384xqQ1aoWXA+058RXPxPg6fy4IWvTNh0E263XmFcJlSAwiGgFAW/dAiS6JXm\" crossorigin=\"anonymous\">\r\n<div class=\"d-flex justify-content-center\">\r\n  <div class=\"card\" [style.width]=\"cardWidth\">\r\n    <div class=\"card-body\" [style.backgroundColor]=\"backgroundColor\">\r\n      <h4 class=\"card-title d-flex justify-content-center\" [style.color]=\"head_color\">{{otp_title}}</h4>\r\n      <h6 class=\"d-flex justify-content-center\" [style.color]=\"sub_head_color\">{{otp_subtitle}}</h6>\r\n      <form [formGroup]=\"loginForm\" (ngSubmit)=\"sublogin()\">\r\n        <div class=\"inputDiv d-flex justify-content-center\">\r\n          <ng-container *ngFor=\"let item of arr;\" class=\"inloop\">\r\n            <input class=\"inputClass\" maxlength=\"1\" autofocus [formControlName]=item libNextfocus libNumbersOnly>\r\n          </ng-container>\r\n\r\n        </div>\r\n        <div class=\"btncls d-flex justify-content-center\">\r\n          <button type=\"submit\" class=\"btn\" [style.background-color]=\"buttonColor\" [style.color]=\"buttonTextColor\" [disabled]=loginForm.invalid>{{buttonText}}</button>\r\n      </div> \r\n      </form>\r\n      \r\n    </div>\r\n  </div>\r\n</div>", styles: [".inputClass{max-width:5%;text-align:center}.inputDiv{padding-bottom:3%;padding-top:2%}.inputClass{justify-items:center;margin-left:5px;margin-right:5px}.inloop{padding:2%}.card-body{background-color:#d3d3d3}.btn{width:60%;background-color:#673ab7;color:#fff;font-size:larger;font-weight:500}.btncls{max-width:100%}\n"], directives: [{ type: i1.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i1.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i1.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i2.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i1.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { type: i1.MaxLengthValidator, selector: "[maxlength][formControlName],[maxlength][formControl],[maxlength][ngModel]", inputs: ["maxlength"] }, { type: NextfocusDirective, selector: "[libNextfocus]" }, { type: NumbersOnlyDirective, selector: "[libNumbersOnly]" }, { type: i1.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i1.FormControlName, selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.13", ngImport: i0, type: OtpUiComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'lib-otp-ui',
                    templateUrl: './otp-ui.component.html',
                    styleUrls: ['./otp-ui.component.scss']
                }]
        }], ctorParameters: function () { return []; }, propDecorators: { otp: [{
                type: Input
            }], otpSent: [{
                type: Output
            }] } });

class OtpUiModule {
}
OtpUiModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.13", ngImport: i0, type: OtpUiModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
OtpUiModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.13", ngImport: i0, type: OtpUiModule, declarations: [OtpUiComponent,
        NextfocusDirective,
        NumbersOnlyDirective], imports: [CommonModule,
        FormsModule,
        ReactiveFormsModule], exports: [OtpUiComponent] });
OtpUiModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.13", ngImport: i0, type: OtpUiModule, imports: [[
            CommonModule,
            FormsModule,
            ReactiveFormsModule
        ]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.13", ngImport: i0, type: OtpUiModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [
                        OtpUiComponent,
                        NextfocusDirective,
                        NumbersOnlyDirective
                    ],
                    imports: [
                        CommonModule,
                        FormsModule,
                        ReactiveFormsModule
                    ],
                    exports: [
                        OtpUiComponent
                    ]
                }]
        }] });

/*
 * Public API Surface of otp-ui
 */

/**
 * Generated bundle index. Do not edit.
 */

export { OtpUiComponent, OtpUiModule, OtpUiService };
//# sourceMappingURL=otp-ui.js.map
