(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/forms'), require('@angular/common')) :
    typeof define === 'function' && define.amd ? define('otp-ui', ['exports', '@angular/core', '@angular/forms', '@angular/common'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global["otp-ui"] = {}, global.ng.core, global.ng.forms, global.ng.common));
})(this, (function (exports, i0, i1, i2) { 'use strict';

    function _interopNamespace(e) {
        if (e && e.__esModule) return e;
        var n = Object.create(null);
        if (e) {
            Object.keys(e).forEach(function (k) {
                if (k !== 'default') {
                    var d = Object.getOwnPropertyDescriptor(e, k);
                    Object.defineProperty(n, k, d.get ? d : {
                        enumerable: true,
                        get: function () { return e[k]; }
                    });
                }
            });
        }
        n["default"] = e;
        return Object.freeze(n);
    }

    var i0__namespace = /*#__PURE__*/_interopNamespace(i0);
    var i1__namespace = /*#__PURE__*/_interopNamespace(i1);
    var i2__namespace = /*#__PURE__*/_interopNamespace(i2);

    var OtpUiService = /** @class */ (function () {
        function OtpUiService() {
        }
        return OtpUiService;
    }());
    OtpUiService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.13", ngImport: i0__namespace, type: OtpUiService, deps: [], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    OtpUiService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.13", ngImport: i0__namespace, type: OtpUiService, providedIn: 'root' });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.13", ngImport: i0__namespace, type: OtpUiService, decorators: [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root'
                    }]
            }], ctorParameters: function () { return []; } });

    var NextfocusDirective = /** @class */ (function () {
        function NextfocusDirective() {
        }
        NextfocusDirective.prototype.onKeyDown = function (keyboardEvent) {
            var target = keyboardEvent.target;
            var prvtarget = keyboardEvent.target;
            var type = target.type;
            var nextElementSibling = target.nextElementSibling;
            var previousElementSibling = prvtarget.previousElementSibling;
            if (keyboardEvent.key === 'ArrowLeft') {
                try {
                    previousElementSibling.focus();
                    return;
                }
                catch (_a) {
                    return;
                }
            }
            if (keyboardEvent.key === 'Tab') {
                try {
                    nextElementSibling.focus();
                    return;
                }
                catch (_b) {
                    return;
                }
            }
            if (!target || target.maxLength !== target.value.length) {
                if (keyboardEvent.key === 'Backspace') {
                    try {
                        previousElementSibling.focus();
                        return;
                    }
                    catch (_c) {
                        return;
                    }
                }
                else if (keyboardEvent.key === 'ArrowLeft') {
                    try {
                        previousElementSibling.focus();
                        return;
                    }
                    catch (_d) {
                        return;
                    }
                }
                else if (keyboardEvent.key === 'ArrowRight') {
                    try {
                        nextElementSibling.focus();
                        return;
                    }
                    catch (_e) {
                        return;
                    }
                }
                else if (keyboardEvent.key === 'Delete') {
                    try {
                        previousElementSibling.focus();
                        return;
                    }
                    catch (_f) {
                        return;
                    }
                }
                return;
            }
            keyboardEvent.preventDefault();
            while (nextElementSibling) {
                if (keyboardEvent.key === 'ArrowRight' || keyboardEvent.key === 'Tab') {
                    try {
                        nextElementSibling.focus();
                        return;
                    }
                    catch (_g) {
                        return;
                    }
                }
                else if (keyboardEvent.key === 'ArrowLeft' || keyboardEvent.key === 'Backspace') {
                    try {
                        previousElementSibling.focus();
                        return;
                    }
                    catch (_h) {
                        console.log("catch");
                        return;
                    }
                }
                if (nextElementSibling.type === type) {
                    try {
                        nextElementSibling.focus();
                        return;
                    }
                    catch (_j) {
                        return;
                    }
                }
                nextElementSibling = nextElementSibling === null || nextElementSibling === void 0 ? void 0 : nextElementSibling.nextElementSibling;
            }
        };
        return NextfocusDirective;
    }());
    NextfocusDirective.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.13", ngImport: i0__namespace, type: NextfocusDirective, deps: [], target: i0__namespace.ɵɵFactoryTarget.Directive });
    NextfocusDirective.ɵdir = i0__namespace.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.13", type: NextfocusDirective, selector: "[libNextfocus]", host: { listeners: { "keyup": "onKeyDown($event)" } }, ngImport: i0__namespace });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.13", ngImport: i0__namespace, type: NextfocusDirective, decorators: [{
                type: i0.Directive,
                args: [{
                        selector: '[libNextfocus]'
                    }]
            }], ctorParameters: function () { return []; }, propDecorators: { onKeyDown: [{
                    type: i0.HostListener,
                    args: ['keyup', ['$event']]
                }] } });

    var NumbersOnlyDirective = /** @class */ (function () {
        function NumbersOnlyDirective() {
        }
        NumbersOnlyDirective.prototype.onKeyDown = function (e) {
            if (e.which != 8 && e.which != 0 && e.which < 48 || e.which > 57) {
                e.preventDefault();
            }
        };
        return NumbersOnlyDirective;
    }());
    NumbersOnlyDirective.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.13", ngImport: i0__namespace, type: NumbersOnlyDirective, deps: [], target: i0__namespace.ɵɵFactoryTarget.Directive });
    NumbersOnlyDirective.ɵdir = i0__namespace.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.13", type: NumbersOnlyDirective, selector: "[libNumbersOnly]", host: { listeners: { "keydown": "onKeyDown($event)" } }, ngImport: i0__namespace });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.13", ngImport: i0__namespace, type: NumbersOnlyDirective, decorators: [{
                type: i0.Directive,
                args: [{
                        selector: '[libNumbersOnly]'
                    }]
            }], ctorParameters: function () { return []; }, propDecorators: { onKeyDown: [{
                    type: i0.HostListener,
                    args: ['keydown', ['$event']]
                }] } });

    var OtpUiComponent = /** @class */ (function () {
        function OtpUiComponent() {
            this.otpSent = new i0.EventEmitter;
            this.arr = [];
        }
        OtpUiComponent.prototype.ngOnInit = function () {
            var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q;
            //mandatory initialisation
            this.otp_title = (this.otp.otp_title) ? this.otp.otp_title : "Enter the OTP";
            this.otp_subtitle = (this.otp.otp_subtitle) ? this.otp.otp_subtitle : "OTP will be sent to your registered mobile number, Please verify";
            this.buttonText = (this.otp.buttonText) ? this.otp.buttonText : "Validate OTP";
            this.length = (((_a = this.otp) === null || _a === void 0 ? void 0 : _a.length) > 3) ? this.otp.length : 4;
            this.backgroundColor = (_c = (_b = this.otp) === null || _b === void 0 ? void 0 : _b.styles) === null || _c === void 0 ? void 0 : _c.backgroundColor;
            this.buttonColor = (_e = (_d = this.otp) === null || _d === void 0 ? void 0 : _d.styles) === null || _e === void 0 ? void 0 : _e.buttonColor;
            this.cardWidth = (((_g = (_f = this.otp) === null || _f === void 0 ? void 0 : _f.styles) === null || _g === void 0 ? void 0 : _g.cardWidth) > '40%') ? (_j = (_h = this.otp) === null || _h === void 0 ? void 0 : _h.styles) === null || _j === void 0 ? void 0 : _j.cardWidth : '50%';
            this.buttonTextColor = (_l = (_k = this.otp) === null || _k === void 0 ? void 0 : _k.styles) === null || _l === void 0 ? void 0 : _l.buttonTextColor;
            this.head_color = (_o = (_m = this.otp) === null || _m === void 0 ? void 0 : _m.styles) === null || _o === void 0 ? void 0 : _o.head_color;
            this.sub_head_color = (_q = (_p = this.otp) === null || _p === void 0 ? void 0 : _p.styles) === null || _q === void 0 ? void 0 : _q.sub_head_color;
            this.loginForm = new i1.FormGroup({});
            for (var i = 0; i < this.length; i++) {
                this.arr.push(this.getFormConntrol(i));
                this.loginForm.addControl(this.getFormConntrol(i), new i1.FormControl('', i1.Validators.required));
            }
        };
        OtpUiComponent.prototype.getFormConntrol = function (index) {
            return "crtl" + index;
        };
        OtpUiComponent.prototype.sublogin = function () {
            this.otpSent.emit(this.loginForm.value);
        };
        return OtpUiComponent;
    }());
    OtpUiComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.13", ngImport: i0__namespace, type: OtpUiComponent, deps: [], target: i0__namespace.ɵɵFactoryTarget.Component });
    OtpUiComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.13", type: OtpUiComponent, selector: "lib-otp-ui", inputs: { otp: "otp" }, outputs: { otpSent: "otpSent" }, ngImport: i0__namespace, template: "<link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css\"\r\n  integrity=\"sha384-Gn5384xqQ1aoWXA+058RXPxPg6fy4IWvTNh0E263XmFcJlSAwiGgFAW/dAiS6JXm\" crossorigin=\"anonymous\">\r\n<div class=\"d-flex justify-content-center\">\r\n  <div class=\"card\" [style.width]=\"cardWidth\">\r\n    <div class=\"card-body\" [style.backgroundColor]=\"backgroundColor\">\r\n      <h4 class=\"card-title d-flex justify-content-center\" [style.color]=\"head_color\">{{otp_title}}</h4>\r\n      <h6 class=\"d-flex justify-content-center\" [style.color]=\"sub_head_color\">{{otp_subtitle}}</h6>\r\n      <form [formGroup]=\"loginForm\" (ngSubmit)=\"sublogin()\">\r\n        <div class=\"inputDiv d-flex justify-content-center\">\r\n          <ng-container *ngFor=\"let item of arr;\" class=\"inloop\">\r\n            <input class=\"inputClass\" maxlength=\"1\" autofocus [formControlName]=item libNextfocus libNumbersOnly>\r\n          </ng-container>\r\n\r\n        </div>\r\n        <div class=\"btncls d-flex justify-content-center\">\r\n          <button type=\"submit\" class=\"btn\" [style.background-color]=\"buttonColor\" [style.color]=\"buttonTextColor\" [disabled]=loginForm.invalid>{{buttonText}}</button>\r\n      </div> \r\n      </form>\r\n      \r\n    </div>\r\n  </div>\r\n</div>", styles: [".inputClass{max-width:5%;text-align:center}.inputDiv{padding-bottom:3%;padding-top:2%}.inputClass{justify-items:center;margin-left:5px;margin-right:5px}.inloop{padding:2%}.card-body{background-color:#d3d3d3}.btn{width:60%;background-color:#673ab7;color:#fff;font-size:larger;font-weight:500}.btncls{max-width:100%}\n"], directives: [{ type: i1__namespace.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i1__namespace.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i1__namespace.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i2__namespace.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i1__namespace.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { type: i1__namespace.MaxLengthValidator, selector: "[maxlength][formControlName],[maxlength][formControl],[maxlength][ngModel]", inputs: ["maxlength"] }, { type: NextfocusDirective, selector: "[libNextfocus]" }, { type: NumbersOnlyDirective, selector: "[libNumbersOnly]" }, { type: i1__namespace.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i1__namespace.FormControlName, selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.13", ngImport: i0__namespace, type: OtpUiComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'lib-otp-ui',
                        templateUrl: './otp-ui.component.html',
                        styleUrls: ['./otp-ui.component.scss']
                    }]
            }], ctorParameters: function () { return []; }, propDecorators: { otp: [{
                    type: i0.Input
                }], otpSent: [{
                    type: i0.Output
                }] } });

    var OtpUiModule = /** @class */ (function () {
        function OtpUiModule() {
        }
        return OtpUiModule;
    }());
    OtpUiModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.13", ngImport: i0__namespace, type: OtpUiModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    OtpUiModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.13", ngImport: i0__namespace, type: OtpUiModule, declarations: [OtpUiComponent,
            NextfocusDirective,
            NumbersOnlyDirective], imports: [i2.CommonModule,
            i1.FormsModule,
            i1.ReactiveFormsModule], exports: [OtpUiComponent] });
    OtpUiModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.13", ngImport: i0__namespace, type: OtpUiModule, imports: [[
                i2.CommonModule,
                i1.FormsModule,
                i1.ReactiveFormsModule
            ]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.13", ngImport: i0__namespace, type: OtpUiModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        declarations: [
                            OtpUiComponent,
                            NextfocusDirective,
                            NumbersOnlyDirective
                        ],
                        imports: [
                            i2.CommonModule,
                            i1.FormsModule,
                            i1.ReactiveFormsModule
                        ],
                        exports: [
                            OtpUiComponent
                        ]
                    }]
            }] });

    /*
     * Public API Surface of otp-ui
     */

    /**
     * Generated bundle index. Do not edit.
     */

    exports.OtpUiComponent = OtpUiComponent;
    exports.OtpUiModule = OtpUiModule;
    exports.OtpUiService = OtpUiService;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=otp-ui.umd.js.map
