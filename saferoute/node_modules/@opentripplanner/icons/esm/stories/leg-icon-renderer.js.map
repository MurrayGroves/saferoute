{"version":3,"sources":["../../src/stories/leg-icon-renderer.js"],"names":["React","IconRenderer","bikeOnlyItinerary","require","bikeRentalItinerary","eScooterRentalItinerary","parkAndRideItinerary","tncTransitTncItinerary","walkOnlyItinerary","walkTransitWalkItinerary","walkTransitWalkTransitWalkItinerary","exampleLegs","leg","legs","type","LegIconRenderer","Component","component","example"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,OAAOC,YAAP,MAAyB,kBAAzB,C,CAEA;;AACA,IAAMC,iBAAiB,GAAGC,OAAO,CAAC,0EAAD,CAAjC;;AACA,IAAMC,mBAAmB,GAAGD,OAAO,CAAC,4EAAD,CAAnC;;AACA,IAAME,uBAAuB,GAAGF,OAAO,CAAC,iFAAD,CAAvC;;AACA,IAAMG,oBAAoB,GAAGH,OAAO,CAAC,8EAAD,CAApC;;AACA,IAAMI,sBAAsB,GAAGJ,OAAO,CAAC,gFAAD,CAAtC;;AACA,IAAMK,iBAAiB,GAAGL,OAAO,CAAC,0EAAD,CAAjC;;AACA,IAAMM,wBAAwB,GAAGN,OAAO,CAAC,kFAAD,CAAxC;;AACA,IAAMO,mCAAmC,GAAGP,OAAO,CAAC,+FAAD,CAAnD;;AAEA,IAAMQ,WAAW,GAAG,CAClB;AAAEC,EAAAA,GAAG,EAAEV,iBAAiB,CAACW,IAAlB,CAAuB,CAAvB,CAAP;AAAkCC,EAAAA,IAAI,EAAE;AAAxC,CADkB,EAElB;AAAEF,EAAAA,GAAG,EAAER,mBAAmB,CAACS,IAApB,CAAyB,CAAzB,CAAP;AAAoCC,EAAAA,IAAI,EAAE;AAA1C,CAFkB,EAGlB;AAAEF,EAAAA,GAAG,EAAEF,mCAAmC,CAACG,IAApC,CAAyC,CAAzC,CAAP;AAAoDC,EAAAA,IAAI,EAAE;AAA1D,CAHkB,EAIlB;AACEF,EAAAA,GAAG,EAAEP,uBAAuB,CAACQ,IAAxB,CAA6B,CAA7B,CADP;AAEEC,EAAAA,IAAI,EAAE;AAFR,CAJkB,EAQlB;AAAEF,EAAAA,GAAG,EAAEN,oBAAoB,CAACO,IAArB,CAA0B,CAA1B,CAAP;AAAqCC,EAAAA,IAAI,EAAE;AAA3C,CARkB,EASlB;AAAEF,EAAAA,GAAG,EAAEL,sBAAsB,CAACM,IAAvB,CAA4B,CAA5B,CAAP;AAAuCC,EAAAA,IAAI,EAAE;AAA7C,CATkB,EAUlB;AAAEF,EAAAA,GAAG,EAAEH,wBAAwB,CAACI,IAAzB,CAA8B,CAA9B,CAAP;AAAyCC,EAAAA,IAAI,EAAE;AAA/C,CAVkB,EAWlB;AAAEF,EAAAA,GAAG,EAAEJ,iBAAiB,CAACK,IAAlB,CAAuB,CAAvB,CAAP;AAAkCC,EAAAA,IAAI,EAAE;AAAxC,CAXkB,CAApB;AAcA,eAAe,SAASC,eAAT,OAAmD;AAAA,MAAbC,SAAa,QAAxBC,SAAwB;AAChE,sBACE,oBAAC,YAAD;AACE,IAAA,QAAQ,EAAEN,WADZ;AAEE,IAAA,iBAAiB,EAAE,2BAAAO,OAAO;AAAA,0BAAI,oBAAC,SAAD;AAAW,QAAA,GAAG,EAAEA,OAAO,CAACN;AAAxB,QAAJ;AAAA,KAF5B;AAGE,IAAA,SAAS,EAAC;AAHZ,IADF;AAOD","sourcesContent":["import React from \"react\";\n\nimport IconRenderer from \"../icon-renderer\";\n\n// import mock itinaries. These are all trip plan outputs from OTP.\nconst bikeOnlyItinerary = require(\"@opentripplanner/itinerary-body/src/__mocks__/itineraries/bike-only.json\");\nconst bikeRentalItinerary = require(\"@opentripplanner/itinerary-body/src/__mocks__/itineraries/bike-rental.json\");\nconst eScooterRentalItinerary = require(\"@opentripplanner/itinerary-body/src/__mocks__/itineraries/e-scooter-rental.json\");\nconst parkAndRideItinerary = require(\"@opentripplanner/itinerary-body/src/__mocks__/itineraries/park-and-ride.json\");\nconst tncTransitTncItinerary = require(\"@opentripplanner/itinerary-body/src/__mocks__/itineraries/tnc-transit-tnc.json\");\nconst walkOnlyItinerary = require(\"@opentripplanner/itinerary-body/src/__mocks__/itineraries/walk-only.json\");\nconst walkTransitWalkItinerary = require(\"@opentripplanner/itinerary-body/src/__mocks__/itineraries/walk-transit-walk.json\");\nconst walkTransitWalkTransitWalkItinerary = require(\"@opentripplanner/itinerary-body/src/__mocks__/itineraries/walk-transit-walk-transit-walk.json\");\n\nconst exampleLegs = [\n  { leg: bikeOnlyItinerary.legs[0], type: \"Personal bike\" },\n  { leg: bikeRentalItinerary.legs[1], type: \"Bike rental\" },\n  { leg: walkTransitWalkTransitWalkItinerary.legs[1], type: \"Bus\" },\n  {\n    leg: eScooterRentalItinerary.legs[1],\n    type: \"Micromobility (from Razor company)\"\n  },\n  { leg: parkAndRideItinerary.legs[0], type: \"Park & Ride\" },\n  { leg: tncTransitTncItinerary.legs[0], type: \"TNC (Uber)\" },\n  { leg: walkTransitWalkItinerary.legs[1], type: \"Tram\" },\n  { leg: walkOnlyItinerary.legs[0], type: \"Walk\" }\n];\n\nexport default function LegIconRenderer({ component: Component }) {\n  return (\n    <IconRenderer\n      examples={exampleLegs}\n      renderComponentFn={example => <Component leg={example.leg} />}\n      typeTitle=\"Leg Type\"\n    />\n  );\n}\n"],"file":"leg-icon-renderer.js"}