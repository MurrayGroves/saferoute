{"version":3,"sources":["../src/index.js"],"names":["coreUtils","LocationIcon","PropTypes","React","Component","S","iconSize","FromToLocationPicker","onFromClick","props","location","setLocation","locationType","reverseGeocode","onToClick","fromText","showIcons","toText","propTypes","string","types","func","bool","defaultProps","Styled"],"mappings":"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","sourcesContent":["import coreUtils from \"@opentripplanner/core-utils\";\nimport LocationIcon from \"@opentripplanner/location-icon\";\nimport PropTypes from \"prop-types\";\nimport React, { Component } from \"react\";\n\nimport * as S from \"./styled\";\n\nconst iconSize = \"0.9em\";\n\nclass FromToLocationPicker extends Component {\n  onFromClick = () => {\n    const { location, onFromClick, setLocation } = this.props;\n    if (onFromClick) {\n      onFromClick();\n      return;\n    }\n    setLocation({\n      location,\n      locationType: \"from\",\n      reverseGeocode: false\n    });\n  };\n\n  onToClick = () => {\n    const { location, onToClick, setLocation } = this.props;\n    if (onToClick) {\n      onToClick();\n      return;\n    }\n    setLocation({\n      location,\n      locationType: \"to\",\n      reverseGeocode: false\n    });\n  };\n\n  render() {\n    const { fromText, showIcons, toText } = this.props;\n    return (\n      <S.FromToPickerSpan>\n        <S.LocationPickerSpan>\n          {showIcons && <LocationIcon type=\"from\" size={iconSize} />}\n          <S.Button onClick={this.onFromClick}>{fromText}</S.Button>\n        </S.LocationPickerSpan>\n        <S.LocationPickerSpan>\n          {showIcons && <LocationIcon type=\"to\" size={iconSize} />}\n          <S.Button onClick={this.onToClick}>{toText}</S.Button>\n        </S.LocationPickerSpan>\n      </S.FromToPickerSpan>\n    );\n  }\n}\n\nFromToLocationPicker.propTypes = {\n  /**\n   * The text to display on the \"from\" button for setting the origin of a trip.\n   */\n  fromText: PropTypes.string,\n  /**\n   * A specific location to associate with this. This is only used when combined\n   * with the setLocation prop.\n   */\n  location: coreUtils.types.locationType,\n  /**\n   * Triggered when the user clicks on the \"from\" button.\n   */\n  onFromClick: PropTypes.func,\n  /**\n   * Triggered when the user clicks on the \"to\" button.\n   */\n  onToClick: PropTypes.func,\n  /**\n   * The text to display on the \"to\" button for setting the destination of a trip.\n   */\n  toText: PropTypes.string,\n  /**\n   * Triggered when the user clicks either the \"from\" or \"to\" button and there\n   * are no from/to specific handler functions defined as props.\n   *\n   * Passes an argument as follows:\n   * { locationType: \"from/to\", location, reverseGeocode: false }\n   */\n  setLocation: PropTypes.func,\n  /**\n   * Determines whether icons are shown on the \"from\" and \"to\" buttons.\n   */\n  showIcons: PropTypes.bool\n};\n\nFromToLocationPicker.defaultProps = {\n  fromText: \"From here\",\n  location: null,\n  onFromClick: null,\n  onToClick: null,\n  setLocation: null,\n  showIcons: true,\n  toText: \"To here\"\n};\n\nexport default FromToLocationPicker;\n\n// Rename styled components for export\nexport { S as Styled };\n"],"file":"index.js"}