import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _inherits from "@babel/runtime/helpers/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

import coreUtils from "@opentripplanner/core-utils";
import LocationIcon from "@opentripplanner/location-icon";
import PropTypes from "prop-types";
import React, { Component } from "react";
import * as S from "./styled";
var iconSize = "0.9em";

var FromToLocationPicker = /*#__PURE__*/function (_Component) {
  _inherits(FromToLocationPicker, _Component);

  var _super = _createSuper(FromToLocationPicker);

  function FromToLocationPicker() {
    var _this;

    _classCallCheck(this, FromToLocationPicker);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _this.onFromClick = function () {
      var _this$props = _this.props,
          location = _this$props.location,
          onFromClick = _this$props.onFromClick,
          setLocation = _this$props.setLocation;

      if (onFromClick) {
        onFromClick();
        return;
      }

      setLocation({
        location: location,
        locationType: "from",
        reverseGeocode: false
      });
    };

    _this.onToClick = function () {
      var _this$props2 = _this.props,
          location = _this$props2.location,
          onToClick = _this$props2.onToClick,
          setLocation = _this$props2.setLocation;

      if (onToClick) {
        onToClick();
        return;
      }

      setLocation({
        location: location,
        locationType: "to",
        reverseGeocode: false
      });
    };

    return _this;
  }

  _createClass(FromToLocationPicker, [{
    key: "render",
    value: function render() {
      var _this$props3 = this.props,
          fromText = _this$props3.fromText,
          showIcons = _this$props3.showIcons,
          toText = _this$props3.toText;
      return /*#__PURE__*/React.createElement(S.FromToPickerSpan, null, /*#__PURE__*/React.createElement(S.LocationPickerSpan, null, showIcons && /*#__PURE__*/React.createElement(LocationIcon, {
        type: "from",
        size: iconSize
      }), /*#__PURE__*/React.createElement(S.Button, {
        onClick: this.onFromClick
      }, fromText)), /*#__PURE__*/React.createElement(S.LocationPickerSpan, null, showIcons && /*#__PURE__*/React.createElement(LocationIcon, {
        type: "to",
        size: iconSize
      }), /*#__PURE__*/React.createElement(S.Button, {
        onClick: this.onToClick
      }, toText)));
    }
  }]);

  return FromToLocationPicker;
}(Component);

FromToLocationPicker.propTypes = {
  /**
   * The text to display on the "from" button for setting the origin of a trip.
   */
  fromText: PropTypes.string,

  /**
   * A specific location to associate with this. This is only used when combined
   * with the setLocation prop.
   */
  location: coreUtils.types.locationType,

  /**
   * Triggered when the user clicks on the "from" button.
   */
  onFromClick: PropTypes.func,

  /**
   * Triggered when the user clicks on the "to" button.
   */
  onToClick: PropTypes.func,

  /**
   * The text to display on the "to" button for setting the destination of a trip.
   */
  toText: PropTypes.string,

  /**
   * Triggered when the user clicks either the "from" or "to" button and there
   * are no from/to specific handler functions defined as props.
   *
   * Passes an argument as follows:
   * { locationType: "from/to", location, reverseGeocode: false }
   */
  setLocation: PropTypes.func,

  /**
   * Determines whether icons are shown on the "from" and "to" buttons.
   */
  showIcons: PropTypes.bool
};
FromToLocationPicker.defaultProps = {
  fromText: "From here",
  location: null,
  onFromClick: null,
  onToClick: null,
  setLocation: null,
  showIcons: true,
  toText: "To here"
};
export default FromToLocationPicker; // Rename styled components for export

export { S as Styled };
//# sourceMappingURL=index.js.map