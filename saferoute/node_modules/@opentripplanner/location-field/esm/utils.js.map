{"version":3,"sources":["../src/utils.ts"],"names":["layerDisplayMap","address","properties","housenumber","locality","name","neighbourhood","state","region_a","region","street","main","secondary","filter","item","join","venue","county","generateLabel","labelGenerator","layer","label","getCombinedLabel"],"mappings":"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","sourcesContent":["// Prettier doesn't understand type imports\n// eslint-disable-next-line prettier/prettier\nimport type { Properties, Label } from \"./types\";\n\n\n// A mapping of Pelias layers to display modes. The label generator will run the generator\n// based on the layer of the feature. Adding a new method to this mapping will support\n// more layer types with custom rendering.\nconst layerDisplayMap = {\n  address: (properties: Properties): Label => {\n    const {\n      housenumber,\n      locality,\n      name,\n      neighbourhood,\n      region_a: state,\n      region,\n      street,\n    } = properties;\n    return {\n      // if the housenumber is available, combining that with the street can\n      // avoid duplicates which might be present in the name\n      main: housenumber ? `${housenumber} ${street}` : name,\n      secondary: [locality, neighbourhood, state || region].filter(item => !!item).join(\", \")\n    };\n  },\n  venue: (properties: Properties): Label => {\n    const { region_a: state, neighbourhood, locality, name, street } = properties;\n    return {\n      main: name,\n      secondary: [street, neighbourhood, locality, state]\n        .filter(item => !!item)\n        .join(\", \")\n    };\n  },\n  neighbourhood: (properties: Properties): Label => {\n    const { name, county, locality, region_a: state } = properties;\n    return {\n      main: name,\n      secondary: [county, locality, state].filter(item => !!item).join(\", \")\n    };\n  }\n};\n\n/**\n * Given a GeoJSON property with a layer, this method will use the layerDisplayMap\n * to generate an appropriate title subtitle pair, or return the label if the layer is\n * unknown.\n */\nexport const generateLabel = (properties: Properties): Label => {\n  const labelGenerator = layerDisplayMap[properties.layer];\n  if (!labelGenerator) return { main: properties.label };\n\n  return labelGenerator(properties);\n};\n\n/**\n * Generates a combined label from main and secondary for display in the main input field\n */\nexport const getCombinedLabel = (properties: Properties): string => {\n  const { main, secondary } = generateLabel(properties);\n  if (main && secondary) {\n    return `${main}, ${secondary}`;\n  }\n  return properties?.label || \"\";\n};\n"],"file":"utils.js"}