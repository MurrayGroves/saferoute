import coreUtils from "@opentripplanner/core-utils";
import { humanizeDistanceStringImperial } from "@opentripplanner/humanize-distance";
import React from "react";
import { FormattedMessage } from "react-intl";
import { Bus } from "@styled-icons/fa-solid/Bus";
import { Briefcase } from "@styled-icons/fa-solid/Briefcase";
import { Home } from "@styled-icons/fa-solid/Home";
import { MapMarker } from "@styled-icons/fa-solid/MapMarker";
import { MapPin } from "@styled-icons/fa-solid/MapPin";
import * as S from "./styled";
export var ICON_SIZE = 13;
export function GeocodedOptionIcon(_ref) {
  var _ref$feature = _ref.feature,
      feature = _ref$feature === void 0 ? {} : _ref$feature;
  var properties = feature.properties;

  if (feature && properties) {
    var source = properties.source;

    if (source === "transit") {
      return /*#__PURE__*/React.createElement(Bus, {
        size: ICON_SIZE
      });
    }
  }

  return /*#__PURE__*/React.createElement(MapPin, {
    size: ICON_SIZE
  });
}
export function Option(_ref2) {
  var _ref2$classes = _ref2.classes,
      classes = _ref2$classes === void 0 ? "" : _ref2$classes,
      _ref2$color = _ref2.color,
      color = _ref2$color === void 0 ? null : _ref2$color,
      _ref2$disabled = _ref2.disabled,
      disabled = _ref2$disabled === void 0 ? false : _ref2$disabled,
      _ref2$icon = _ref2.icon,
      icon = _ref2$icon === void 0 ? null : _ref2$icon,
      id = _ref2.id,
      _ref2$isActive = _ref2.isActive,
      isActive = _ref2$isActive === void 0 ? false : _ref2$isActive,
      onClick = _ref2.onClick,
      _ref2$subTitle = _ref2.subTitle,
      subTitle = _ref2$subTitle === void 0 ? null : _ref2$subTitle,
      _ref2$title = _ref2.title,
      title = _ref2$title === void 0 ? null : _ref2$title;
  return /*#__PURE__*/React.createElement(S.MenuItem, {
    active: isActive,
    disabled: disabled,
    id: id,
    onClick: onClick
  }, coreUtils.ui.isIE() ? // In internet explorer 11, some really weird stuff is happening where it
  // is not possible to click the text of the title, but if you click just
  // above it, then it works. So, if using IE 11, just return the title text
  // and avoid all the extra fancy stuff.
  // See https://github.com/ibi-group/trimet-mod-otp/issues/237
  title : /*#__PURE__*/React.createElement(S.OptionContainer, {
    className: classes
  }, /*#__PURE__*/React.createElement(S.OptionIconContainer, {
    style: {
      color: color
    }
  }, icon), /*#__PURE__*/React.createElement(S.OptionContent, null, title, subTitle && /*#__PURE__*/React.createElement(S.OptionSubTitle, null, /*#__PURE__*/React.createElement(S.HiddenContent, null, ", "), subTitle))));
}
export function TransitStopOption(_ref3) {
  var id = _ref3.id,
      _ref3$isActive = _ref3.isActive,
      isActive = _ref3$isActive === void 0 ? false : _ref3$isActive,
      onClick = _ref3.onClick,
      stop = _ref3.stop,
      stopOptionIcon = _ref3.stopOptionIcon;
  return /*#__PURE__*/React.createElement(S.MenuItem, {
    id: id,
    onClick: onClick,
    active: isActive
  }, /*#__PURE__*/React.createElement(S.StopIconAndDistanceContainer, null, stopOptionIcon, /*#__PURE__*/React.createElement(S.StopDistance, null, humanizeDistanceStringImperial(stop.dist, true))), /*#__PURE__*/React.createElement(S.StopContentContainer, null, /*#__PURE__*/React.createElement(S.StopName, null, stop.name, " (", stop.code, ")"), /*#__PURE__*/React.createElement(S.StopRoutes, null, (stop.routes || []).map(function (route) {
    var name = route.shortName || route.longName;
    return /*#__PURE__*/React.createElement(S.RouteName, {
      key: "route-".concat(name)
    }, name);
  }))), /*#__PURE__*/React.createElement(S.ClearBoth, null));
}
export function UserLocationIcon(_ref4) {
  var userLocation = _ref4.userLocation;
  if (userLocation.icon === "work") return /*#__PURE__*/React.createElement(Briefcase, {
    size: ICON_SIZE
  });
  if (userLocation.icon === "home") return /*#__PURE__*/React.createElement(Home, {
    size: ICON_SIZE
  });
  return /*#__PURE__*/React.createElement(MapMarker, {
    size: ICON_SIZE
  });
}

function LocationName(_ref5) {
  var location = _ref5.location;

  switch (location.type) {
    case "home":
      return /*#__PURE__*/React.createElement(FormattedMessage, {
        defaultMessage: "Home",
        description: "The home location",
        id: "otpUi.LocationField.homeLocation"
      });

    case "work":
      return /*#__PURE__*/React.createElement(FormattedMessage, {
        defaultMessage: "Work",
        description: "The work location",
        id: "otpUi.LocationField.workLocation"
      });

    default:
      return /*#__PURE__*/React.createElement(React.Fragment, null, location.name);
  }
}

export function StoredPlaceName(_ref6) {
  var location = _ref6.location,
      _ref6$withDetails = _ref6.withDetails,
      withDetails = _ref6$withDetails === void 0 ? true : _ref6$withDetails;
  var detailText;

  if (withDetails) {
    if (location.type === "home" || location.type === "work") {
      detailText = location.name;
    } else if (location.type === "stop") {
      detailText = location.id;
    } // The case below for recent searches is not currently being used.
    // } else if (location.type === "recent" && location.timestamp) {
    //   detailText = moment(location.timestamp).fromNow();

  }

  return detailText && detailText !== "" ? /*#__PURE__*/React.createElement(FormattedMessage, {
    defaultMessage: "{placeName} ({details})",
    description: "Renders a place and some brief detail text.",
    id: "otpUi.LocationField.placeNameWithDetails",
    values: {
      details: detailText,
      placeName: /*#__PURE__*/React.createElement(LocationName, {
        location: location
      })
    }
  }) : /*#__PURE__*/React.createElement(LocationName, {
    location: location
  });
}
//# sourceMappingURL=options.js.map