{"version":3,"sources":["../src/index.tsx"],"names":["coreUtils","getGeocoder","LocationIcon","React","useEffect","useMemo","useState","useRef","Ban","Bus","ExclamationCircle","LocationArrow","Search","Times","debounce","useIntl","FormattedMessage","GeocodedOptionIcon","ICON_SIZE","Option","StoredPlaceName","TransitStopOption","UserLocationIcon","S","generateLabel","getCombinedLabel","optionIdPrefix","getOptionId","index","optionKey","DefaultLocationIcon","locationType","filter","list","layers","include","limit","feature","includes","properties","layer","slice","getFeaturesByCategoryWithLimit","geocodedFeatures","suggestionCount","sortByDistance","preferredLayers","reduce","prev","cur","push","special","normal","sortedGeocodedFeatures","sort","a","b","distance","Infinity","stopFeatures","stationFeatures","otherFeatures","count","length","LocationField","addLocationSearch","autoFocus","className","clearButtonIcon","clearLocation","currentPosition","currentPositionIcon","currentPositionUnavailableIcon","findNearbyStops","GeocodedOptionIconComponent","geocoderConfig","getCurrentPosition","hideExistingValue","initialSearchResults","inputPlaceholder","isRequired","isStatic","isValid","layerColorMap","location","LocationIconComponent","nearbyStops","onLocationSelected","onTextInputClick","operatorIconMap","sessionOptionIcon","sessionSearches","showClearButton","showUserSettings","stopOptionIcon","stopsIndex","suppressNearby","UserLocationIconComponent","userLocationsAndRecentPlaces","getValueFromLocation","label","name","listBoxId","intl","activeIndex","setActiveIndex","stateGeocodedFeatures","setGeocodedFeatures","menuVisible","setMenuVisible","isFetching","setFetching","stateMessage","setMessage","stateValue","setValue","inputRef","geocodeAutocomplete","text","console","warn","formatMessage","defaultMessage","description","id","autocomplete","then","result","message","features","errorMessage","results","error","input","err","toString","getFormControlClassname","setLocation","newLocation","resultType","useCurrentLocation","map","currentPositionToLocation","onClearButtonClick","current","focus","handleTextInputClick","onDropdownToggle","onBlurFormGroup","e","target","relatedTarget","document","activeElement","getAttribute","onTextInputChange","evt","value","coords","lat","latitude","lon","longitude","max","maxNearbyStops","onKeyDown","key","preventDefault","menuItemCount","locationSelected","locationSelectedLookup","geocodeSearch","search","renderFeature","itemIndex","main","secondary","getLocationFromGeocodedFeature","geocodedLocation","source","classNames","operatorIcon","featureIdComponents","split","operatorName","replace","toLowerCase","join","statusMessages","menuItems","transitFeaturesPresent","concat","stations","stops","stopId","stop","stopLocation","option","sessionLocation","userLocation","optionIcon","optionTitle","positionUnavailable","undefined","icon","unshift","defaultPlaceholder","placeholder","fetching","textControl","clearButton","Styled"],"mappings":"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","sourcesContent":["/* eslint-disable @typescript-eslint/ban-ts-comment */\n/* eslint-disable @typescript-eslint/no-use-before-define */\nimport coreUtils from \"@opentripplanner/core-utils\";\nimport getGeocoder from \"@opentripplanner/geocoder\";\n// @ts-ignore Not Typescripted Yet\nimport LocationIcon from \"@opentripplanner/location-icon\";\nimport React, { useEffect, useMemo, useState, useRef } from \"react\";\nimport { Ban } from \"@styled-icons/fa-solid/Ban\";\nimport { Bus } from \"@styled-icons/fa-solid/Bus\";\nimport { ExclamationCircle } from \"@styled-icons/fa-solid/ExclamationCircle\";\nimport { LocationArrow } from \"@styled-icons/fa-solid/LocationArrow\";\nimport { Search } from \"@styled-icons/fa-solid/Search\";\nimport { Times } from \"@styled-icons/fa-solid/Times\";\nimport { debounce } from \"throttle-debounce\";\nimport { useIntl, FormattedMessage } from \"react-intl\";\n// eslint-disable-next-line prettier/prettier\nimport type { Location } from \"@opentripplanner/types\";\nimport type { LocationFieldProps, ResultType } from \"./types\";\n\nimport {\n  GeocodedOptionIcon,\n  ICON_SIZE,\n  Option,\n  StoredPlaceName,\n  TransitStopOption,\n  UserLocationIcon\n} from \"./options\";\nimport * as S from \"./styled\";\nimport { generateLabel, getCombinedLabel } from \"./utils\";\n\nconst optionIdPrefix = \"otpui-locf-option\";\n\n/**\n * Formats the option id based on its given index position.\n * This assumes only one location dropdown is shown at a time.\n */\nfunction getOptionId(index: number): string {\n  return `${optionIdPrefix}-${index}`\n}\n\n// FIXME have a better key generator for options\nlet optionKey = 0;\n\nfunction DefaultLocationIcon({\n  locationType\n}: {\n  locationType: string;\n}): React.ReactElement {\n  return <LocationIcon size={ICON_SIZE} type={locationType} />;\n}\n\n/**\n * Helper function that includes or excludes features based om layers.\n */\nfunction filter(list: any[], layers: string[], include: boolean, limit: number): any[] {\n  return list\n    .filter(feature => layers.includes(feature.properties.layer) === include)\n    .slice(0, limit);\n}\n\n/**\n * Puts the given geocoded features into several categories with upper bounds.\n */\nfunction getFeaturesByCategoryWithLimit(\n  geocodedFeatures: any[],\n  suggestionCount: number,\n  sortByDistance: boolean,\n  preferredLayers: string[]\n) {\n  // Split features into those we want to always show above others\n  const { special, normal } = geocodedFeatures.reduce(\n    (prev, cur) => {\n      prev[\n        preferredLayers.includes(cur?.properties?.layer)\n          ? \"special\"\n          : \"normal\"\n      ].push(cur);\n      return prev;\n    },\n    { special: [], normal: [] }\n  );\n\n  const sortedGeocodedFeatures = [\n    ...special,\n    ...normal.sort((a, b) => {\n      if (!sortByDistance) return 0;\n      return (\n        (b.properties?.distance || Infinity) -\n        (a.properties?.distance || Infinity)\n      );\n    })\n  ];\n\n  // Split out different types of transit results\n  // To keep the list tidy, only include a subset of the responses for each category\n  const stopFeatures = filter(sortedGeocodedFeatures, [\"stops\"], true, suggestionCount);\n  const stationFeatures = filter(sortedGeocodedFeatures, [\"stations\"], true, suggestionCount);\n  const otherFeatures = filter(sortedGeocodedFeatures, [\"stops\", \"stations\"], false, suggestionCount);\n\n  return {\n    count: otherFeatures.length + stationFeatures.length + stopFeatures.length,\n    otherFeatures,\n    stationFeatures,\n    stopFeatures\n  }\n}\n\nconst LocationField = ({\n  addLocationSearch = () => {},\n  autoFocus = false,\n  className = null,\n  clearButtonIcon = <Times size={ICON_SIZE} />,\n  clearLocation = () => {},\n  currentPosition = null,\n  currentPositionIcon = <LocationArrow size={ICON_SIZE} />,\n  currentPositionUnavailableIcon = <Ban size={ICON_SIZE} />,\n  findNearbyStops = () => {},\n  GeocodedOptionIconComponent = GeocodedOptionIcon,\n  geocoderConfig,\n  getCurrentPosition,\n  hideExistingValue = false,\n  initialSearchResults = null,\n  inputPlaceholder = null,\n  isRequired = false,\n  isStatic = false,\n  isValid = true,\n  layerColorMap = {},\n  location = null,\n  LocationIconComponent = DefaultLocationIcon,\n  locationType,\n  nearbyStops = [],\n  onLocationSelected,\n  onTextInputClick = null,\n  operatorIconMap = {},\n  preferredLayers = [],\n  sessionOptionIcon = <Search size={ICON_SIZE} />,\n  sessionSearches = [],\n  showClearButton = true,\n  showUserSettings = false,\n  sortByDistance = false,\n  stopOptionIcon = <Bus size={ICON_SIZE} />,\n  stopsIndex = null,\n  suggestionCount = 3,\n  suppressNearby = false,\n  UserLocationIconComponent = UserLocationIcon,\n  userLocationsAndRecentPlaces = [],\n}: LocationFieldProps): React.ReactElement => {\n  /**\n   * Gets the initial value to place in the input field.\n   */\n  const getValueFromLocation = () => {\n    const label = location?.name || \"\";\n    return location && !hideExistingValue ? label : \"\";\n  };\n\n  const listBoxId = `listbox-${optionKey}`;\n\n  const intl = useIntl();\n\n  const [activeIndex, setActiveIndex] = useState(null);\n  const [stateGeocodedFeatures, setGeocodedFeatures] = useState([]);\n  const [menuVisible, setMenuVisible] = useState(false);\n  const [isFetching, setFetching] = useState(false);\n  const [stateMessage, setMessage] = useState(null);\n  const [stateValue, setValue] = useState(getValueFromLocation());\n\n  const inputRef = useRef(null);\n\n  useEffect(() => {\n    // location could be null if none is set\n    setValue(location?.name || \"\");\n    setGeocodedFeatures([]);\n  }, [location]);\n\n  useEffect(() => {\n    if (initialSearchResults) {\n      setGeocodedFeatures(initialSearchResults);\n      setMenuVisible(true);\n    }\n  }, [initialSearchResults]);\n\n  const geocodeAutocomplete = useMemo(() => debounce(300, (text: string) => {\n    if (!text) {\n      console.warn(\"No text entry provided for geocode autocomplete search.\");\n      setMessage(null)\n      return;\n    }\n    setFetching(true)\n    setMessage(intl.formatMessage({\n      defaultMessage: \"Fetching suggestions…\",\n      description: \"Hint shown while geocoder suggestions are being fetched\",\n      id: \"otpUi.LocationField.fetchingSuggestions\"\n    }))\n\n    getGeocoder(geocoderConfig)\n      .autocomplete({ text })\n      // TODO: Better type?\n      .then(\n        (result: {\n          features: Location[]\n          results: { error: { message: string } };\n        }) => {\n          let message: string;\n          // If no features found in response, default to empty array.\n          let geocodedFeatures = result?.features;\n          if (!geocodedFeatures) {\n            // Get the Pelias error message if exists.\n            // TODO: determine how other geocoders return error messages.\n            const errorMessage = result?.results?.error?.message;\n            // If the result did not contain a list of features, add special note.\n            message = intl.formatMessage(\n              { id: \"otpUi.LocationField.geocoderUnreachable\" },\n              { error: errorMessage }\n            );\n            geocodedFeatures = [];\n          } else {\n            const { count } = getFeaturesByCategoryWithLimit(geocodedFeatures, suggestionCount, sortByDistance, preferredLayers);\n            message = intl.formatMessage(\n              { id: \"otpUi.LocationField.resultsFound\" },\n              {\n                count,\n                input: text\n              }\n            );\n          }\n          setGeocodedFeatures(geocodedFeatures);\n          setMessage(message);\n          setFetching(false)\n        }\n      )\n      .catch((err: unknown) => {\n        console.error(err);\n        const message = intl.formatMessage(\n          { id: \"otpUi.LocationField.geocoderUnreachable\" },\n          { error: err.toString() }\n        );\n        setMessage(message);\n        setFetching(false)\n      });\n  }), []);\n\n  const getFormControlClassname = () => {\n    return `${locationType}-form-control`;\n  };\n\n  const setLocation = (newLocation: Location, resultType: ResultType) => {\n    onLocationSelected(intl, { location: newLocation, locationType, resultType });\n    setMenuVisible(false);\n  };\n\n  const useCurrentLocation = () => {\n    const newLocation = coreUtils.map.currentPositionToLocation(\n      currentPosition\n    );\n    if (newLocation) {\n      // If geolocation is successful (i.e., user has granted app geolocation\n      // permission and coords exist), set location.\n      onLocationSelected(intl, {\n        location: newLocation,\n        locationType,\n        resultType: \"CURRENT_LOCATION\"\n      });\n    } else {\n      // Call geolocation.getCurrentPosition and set as from/to locationType\n      getCurrentPosition(intl, locationType);\n    }\n    setMenuVisible(false);\n  };\n\n\n  const onClearButtonClick = () => {\n    clearLocation({ locationType });\n    setValue(\"\");\n    setGeocodedFeatures([]);\n    inputRef.current.focus();\n    handleTextInputClick();\n  };\n\n  const onDropdownToggle = () => {\n    setMenuVisible(!menuVisible);\n  };\n\n  /**\n   * Only hide menu if the target clicked is not a menu item in the dropdown.\n   * Otherwise, the click will not \"finish\" and the menu will hide without the\n   * user having made a selection.\n   */\n  const onBlurFormGroup = e => {\n    // IE does not use relatedTarget, so this check handles cross-browser support.\n    // see https://stackoverflow.com/a/49325196/915811\n    const target =\n      e.relatedTarget !== null ? e.relatedTarget : document.activeElement;\n    if (!target || target.getAttribute(\"role\") !== \"option\") {\n      setGeocodedFeatures([]);\n      setMenuVisible(false);\n      setMessage(null);\n      setValue(getValueFromLocation());\n    }\n  };\n\n  const onTextInputChange = evt => {\n    const { value } = evt.target;\n    setValue(value);\n    setMenuVisible(true);\n    geocodeAutocomplete(value);\n  };\n\n  const handleTextInputClick = () => {\n    if (typeof onTextInputClick === \"function\") onTextInputClick();\n    setMenuVisible(true);\n    if (nearbyStops.length === 0 && currentPosition && currentPosition.coords) {\n      findNearbyStops({\n        lat: currentPosition.coords.latitude,\n        lon: currentPosition.coords.longitude,\n        max: geocoderConfig.maxNearbyStops || 4\n      });\n    }\n  };\n\n  const onKeyDown = evt => {\n    switch (evt.key) {\n      // 'Down' arrow key pressed: move selected menu item down by one position\n      case \"ArrowDown\":\n        // Suppress default 'ArrowDown' behavior which moves cursor to end\n        evt.preventDefault();\n        if (!menuVisible) {\n          // If the menu is not visible, simulate a text input click to show it.\n          handleTextInputClick();\n        } else if (activeIndex === menuItemCount - 1) {\n          setActiveIndex(null);\n        } else {\n          setActiveIndex(activeIndex === null ? 0 : activeIndex + 1);\n        }\n        break;\n      // 'Up' arrow key pressed: move selection up by one position\n      case \"ArrowUp\":\n        // Suppress default 'ArrowUp' behavior which moves cursor to beginning\n        evt.preventDefault();\n        if (activeIndex === 0) {\n          setActiveIndex(null);\n        } else {\n          setActiveIndex(\n            activeIndex === null ? menuItemCount - 1 : activeIndex - 1\n          );\n        }\n        break;\n      // 'Enter' keypress serves two purposes:\n      //  - If pressed when typing in search string, switch from 'autocomplete'\n      //    to 'search' geocoding\n      //  - If pressed when dropdown results menu is active, apply the location\n      //    associated with current selected menu item\n      case \"Enter\":\n        if (typeof activeIndex === \"number\") {\n          // Menu is active\n          // Retrieve location selection handler from lookup object and invoke\n          const locationSelected = locationSelectedLookup[activeIndex];\n          if (locationSelected) locationSelected();\n\n          // Clear selection & hide the menu\n          setMenuVisible(false);\n          setActiveIndex(null);\n        } else {\n          // Menu not active; get geocode 'search' results\n          geocodeSearch(evt.target.value);\n          // Ensure menu is visible.\n          setMenuVisible(true);\n        }\n\n        // Suppress default 'Enter' behavior which causes page to reload\n        evt.preventDefault();\n        break;\n      case \"Escape\":\n      case \"Tab\":\n        // Clear selection & hide the menu\n        setMenuVisible(false);\n        setActiveIndex(null);\n        break;\n      // Any other key pressed: clear active selection\n      default:\n        setActiveIndex(null);\n        break;\n    }\n  };\n\n  const geocodeSearch = text => {\n    if (!text) {\n      console.warn(\"No text entry provided for geocode search.\");\n      return;\n    }\n    getGeocoder(geocoderConfig)\n      .search({ text })\n      .then(result => {\n        if (result?.features?.length > 0) {\n          // Only replace geocode items if results were found\n          setGeocodedFeatures(result.features);\n          setMessage(null);\n        } else {\n          console.warn(\n            \"No results found for geocode search. Not replacing results.\"\n          );\n        }\n      })\n      .catch(err => {\n        console.error(err);\n      });\n  };\n\n  const renderFeature = (itemIndex, feature) => {\n    // generate the friendly labels for this feature\n    const { main, secondary } = generateLabel(feature.properties);\n\n    // Create the selection handler\n    const locationSelected = () => {\n      getGeocoder(geocoderConfig)\n        .getLocationFromGeocodedFeature(feature)\n        .then(geocodedLocation => {\n          // add the friendly location labels for use later on\n          geocodedLocation.main = main;\n          geocodedLocation.secondary = secondary;\n          geocodedLocation.name = getCombinedLabel(feature.properties);\n          // Set the current location\n          setLocation(geocodedLocation, \"GEOCODE\");\n          // Add to the location search history. This is intended to\n          // populate the sessionSearches array.\n          addLocationSearch({ location: geocodedLocation });\n        });\n    };\n\n    // Add to the selection handler lookup (for use in onKeyDown)\n    locationSelectedLookup[itemIndex] = locationSelected;\n\n    // Extract GTFS/POI info and assign to class\n    const { id, source, layer } = feature.properties;\n    const classNames = [];\n    let operatorIcon;\n    // Operator only exists on transit features\n    const featureIdComponents = source === \"transit\" && id.split(\"::\");\n    if (featureIdComponents.length > 1 && featureIdComponents?.[1].length > 0) {\n      const operatorName = featureIdComponents[1]\n        .replace(/ /g, \"-\")\n        .toLowerCase();\n      classNames.push(`operator-${operatorName}`);\n      operatorIcon = operatorIconMap[operatorName];\n    }\n\n    classNames.push(`source-${source}`);\n    classNames.push(`layer-${layer}`);\n\n    // Create and return the option menu item\n    return (\n      <Option\n        classes={classNames.join(\" \")}\n        color={layerColorMap[layer]}\n        icon={operatorIcon || <GeocodedOptionIconComponent feature={feature} />}\n        id={getOptionId(itemIndex)}\n        isActive={itemIndex === activeIndex}\n        key={optionKey++}\n        onClick={locationSelected}\n        title={main}\n        subTitle={secondary}\n      />\n    );\n  };\n\n  const message = stateMessage;\n  const geocodedFeatures = stateGeocodedFeatures;\n\n  if (sessionSearches.length > 5) sessionSearches = sessionSearches.slice(0, 5);\n\n  // Assemble menu contents, to be displayed either as dropdown or static panel.\n  // Menu items are created in four phases: (1) the current location, (2) any\n  // geocoder search results; (3) nearby transit stops; and (4) saved searches\n\n  const statusMessages = [];\n  let menuItems = []; // array of menu items for display (may include non-selectable items e.g. dividers/headings)\n  let itemIndex = 0; // the index of the current location-associated menu item (excluding non-selectable items)\n  const locationSelectedLookup = {}; // maps itemIndex to a location selection handler (for use by the onKeyDown method)\n\n  /* 1) Process geocode search result option(s) */\n  if (geocodedFeatures.length > 0) {\n    const { otherFeatures, stationFeatures, stopFeatures } = getFeaturesByCategoryWithLimit(geocodedFeatures, suggestionCount, sortByDistance, preferredLayers)\n\n    // If no categories of features are returned, this variable is used to\n    // avoid displaying headers\n    const transitFeaturesPresent =\n      stopFeatures.length > 0 || stationFeatures.length > 0;\n\n    // Iterate through the geocoder results\n    menuItems = menuItems.concat(\n      stationFeatures.length > 0 && (\n        <S.MenuItem\n          bgColor={layerColorMap.stations}\n          centeredText\n          header\n          key=\"gtfs-stations-header\"\n          role=\"heading\"\n        >\n          <FormattedMessage\n            description=\"Text for header above Stations\"\n            id=\"otpUi.LocationField.stations\"\n          />\n        </S.MenuItem>\n      ),\n      stationFeatures.map(feature => renderFeature(itemIndex++, feature)),\n\n      stopFeatures.length > 0 && (\n        <S.MenuItem\n          bgColor={layerColorMap.stops}\n          centeredText\n          header\n          key=\"gtfs-stops-header\"\n          role=\"heading\"\n        >\n          <FormattedMessage\n            description=\"Text for header above Stops\"\n            id=\"otpUi.LocationField.stops\"\n          />\n        </S.MenuItem>\n      ),\n      stopFeatures.map(feature => renderFeature(itemIndex++, feature)),\n\n      transitFeaturesPresent && otherFeatures.length > 0 && (\n        <S.MenuItem\n          bgColor=\"#333\"\n          centeredText\n          header\n          key=\"other-header\"\n          role=\"heading\"\n        >\n          <FormattedMessage\n            description=\"Text for header above the 'other'\"\n            id=\"otpUi.LocationField.other\"\n          />\n        </S.MenuItem>\n      ),\n      otherFeatures.map(feature => renderFeature(itemIndex++, feature))\n    );\n  }\n\n  /* 2) Process nearby transit stop options */\n  if (nearbyStops.length > 0 && !suppressNearby) {\n    // Add the menu sub-heading (not a selectable item)\n    menuItems.push(\n      <S.MenuItem\n        centeredText\n        header\n        key=\"ns-header\"\n        role=\"heading\"\n      >\n        <FormattedMessage\n          description=\"Text for header above nearby stops\"\n          id=\"otpUi.LocationField.nearby\"\n        />\n      </S.MenuItem>\n    );\n\n    // Iterate through the found nearby stops\n    menuItems = menuItems.concat(\n      nearbyStops.map(stopId => {\n        // Construct the location\n        const stop = stopsIndex[stopId];\n        const stopLocation = {\n          id: stopId,\n          lat: stop.lat,\n          lon: stop.lon,\n          name: stop.name\n        };\n\n        // Create the location selected handler\n        const locationSelected = () => {\n          setLocation(stopLocation, \"STOP\");\n        };\n\n        // Add to the selection handler lookup (for use in onKeyDown)\n        locationSelectedLookup[itemIndex] = locationSelected;\n\n        // Create and return the option menu item\n        const option = (\n          <TransitStopOption\n            id={getOptionId(itemIndex)}\n            isActive={itemIndex === activeIndex}\n            key={optionKey++}\n            onClick={locationSelected}\n            stop={stop}\n            stopOptionIcon={stopOptionIcon}\n          />\n        );\n        itemIndex++;\n        return option;\n      })\n    );\n  }\n\n  /* 3) Process recent search history options */\n  if (sessionSearches.length > 0) {\n    // Add the menu sub-heading (not a selectable item)\n    menuItems.push(\n      <S.MenuItem\n        centeredText\n        header\n        key=\"ss-header\"\n        role=\"heading\"\n      >\n        <FormattedMessage\n          description=\"Text for header above recently searched items\"\n          id=\"otpUi.LocationField.recentlySearched\"\n        />\n      </S.MenuItem>\n    );\n\n    // Iterate through any saved locations\n    menuItems = menuItems.concat(\n      sessionSearches.map(sessionLocation => {\n        // Create the location-selected handler\n        const locationSelected = () => {\n          setLocation(sessionLocation, \"SESSION\");\n        };\n\n        // Add to the selection handler lookup (for use in onKeyDown)\n        locationSelectedLookup[itemIndex] = locationSelected;\n        // Create and return the option menu item\n        const option = (\n          <Option\n            icon={sessionOptionIcon}\n            id={getOptionId(itemIndex)}\n            isActive={itemIndex === activeIndex}\n            key={optionKey++}\n            onClick={locationSelected}\n            subTitle={sessionLocation.secondary || \"\"}\n            // just use the name if there is no main/secondary field\n            title={sessionLocation.main || sessionLocation.name}\n          />\n        );\n        itemIndex++;\n        return option;\n      })\n    );\n  }\n\n  /* 3b) Process stored user locations */\n  if (userLocationsAndRecentPlaces.length > 0 && showUserSettings) {\n    // Add the menu sub-heading (not a selectable item)\n    menuItems.push(\n      <S.MenuItem\n        centeredText\n        header\n        key=\"mp-header\"\n        role=\"heading\"\n      >\n        <FormattedMessage\n          description=\"Text for header above user-saved places\"\n          id=\"otpUi.LocationField.myPlaces\"\n        />\n      </S.MenuItem>\n    );\n\n    // Iterate through any saved locations\n    menuItems = menuItems.concat(\n      userLocationsAndRecentPlaces.map(userLocation => {\n        // Create the location-selected handler\n        const locationSelected = () => {\n          setLocation(userLocation, \"SAVED\");\n        };\n\n        // Add to the selection handler lookup (for use in onKeyDown)\n        locationSelectedLookup[itemIndex] = locationSelected;\n\n        // Create and return the option menu item\n        const option = (\n          <Option\n            icon={<UserLocationIconComponent userLocation={userLocation} />}\n            id={getOptionId(itemIndex)}\n            isActive={itemIndex === activeIndex}\n            key={optionKey++}\n            onClick={locationSelected}\n            title={<StoredPlaceName location={userLocation} />}\n          />\n        );\n        itemIndex++;\n        return option;\n      })\n    );\n  }\n\n  /* 4) Process the current location */\n  let locationSelected;\n  let optionIcon;\n  let optionTitle;\n  let positionUnavailable;\n\n  if (currentPosition && !currentPosition.error) {\n    // current position detected successfully\n    locationSelected = useCurrentLocation;\n    optionIcon = currentPositionIcon;\n    optionTitle = intl.formatMessage({\n      id: \"otpUi.LocationField.useCurrentLocation\"\n    });\n    positionUnavailable = false;\n  } else {\n    // error detecting current position\n    optionIcon = currentPositionUnavailableIcon;\n    optionTitle = intl.formatMessage(\n      {\n        id: \"otpUi.LocationField.currentLocationUnavailable\"\n      },\n      {\n        error: !currentPosition\n          ? undefined\n          : typeof currentPosition.error === \"string\" ? currentPosition.error : currentPosition.error.message\n      }\n    );\n    positionUnavailable = true;\n    statusMessages.push(optionTitle)\n  }\n\n  // Add to the selection handler lookup (for use in onKeyDown)\n  locationSelectedLookup[itemIndex] = locationSelected;\n\n  if (!suppressNearby) {\n    // Create and add the option item to the menu items array\n    menuItems.push(\n      <Option\n        disabled={positionUnavailable}\n        icon={optionIcon}\n        id={getOptionId(itemIndex)}\n        isActive={itemIndex === activeIndex}\n        key={optionKey++}\n        onClick={locationSelected}\n        title={optionTitle}\n      />\n    );\n    if (!positionUnavailable) itemIndex++;\n  }\n  if (message) {\n    if (geocodedFeatures.length === 0) {\n      const icon = isFetching\n        ? <S.Spinner size={ICON_SIZE} />\n        : <ExclamationCircle size={ICON_SIZE} />;\n      menuItems.unshift(\n        <Option\n          disabled\n          icon={icon}\n          key={optionKey++}\n          title={message}\n        />\n      );\n    }\n    statusMessages.push(message)\n  }\n\n  // Store the number of location-associated items for reference in the onKeyDown method\n  let menuItemCount = itemIndex;\n\n  /** the text input element * */\n  // Use this text for aria-label below.\n  const defaultPlaceholder = inputPlaceholder || locationType;\n  const placeholder =\n    currentPosition && currentPosition.fetching\n      ? intl.formatMessage({ id: \"otpUi.LocationField.fetchingLocation\" })\n      : defaultPlaceholder;\n  const textControl = (\n    <S.Input\n      aria-activedescendant={activeIndex !== null ? getOptionId(activeIndex) : null}\n      aria-autocomplete=\"list\"\n      aria-controls={listBoxId}\n      aria-expanded={menuVisible}\n      aria-haspopup=\"listbox\"\n      aria-invalid={!isValid}\n      aria-label={defaultPlaceholder}\n      aria-required={isRequired}\n      autoFocus={autoFocus}\n      className={getFormControlClassname()}\n      onChange={onTextInputChange}\n      onClick={handleTextInputClick}\n      onKeyDown={onKeyDown}\n      placeholder={placeholder}\n      ref={inputRef}\n      role=\"combobox\"\n      value={stateValue}\n    />\n  );\n\n  // Only include the clear ('X') button add-on if a location is selected\n  // or if the input field has text.\n  const clearButton =\n    showClearButton && location ? (\n      <S.InputGroupAddon>\n        <S.Button\n          aria-label={intl.formatMessage({\n            id: \"otpUi.LocationField.clearLocation\"\n          })}\n          onClick={onClearButtonClick}\n        >\n          {clearButtonIcon}\n        </S.Button>\n      </S.InputGroupAddon>\n    ) : null;\n  if (isStatic) {\n    // 'static' mode (menu is displayed alongside input, e.g., for mobile view)\n    return (\n      <div className={className}>\n        <S.FormGroup>\n          <S.InputGroup role=\"group\">\n            <S.InputGroupAddon>\n              <LocationIconComponent locationType={locationType} />\n            </S.InputGroupAddon>\n            {textControl}\n            {clearButton}\n          </S.InputGroup>\n        </S.FormGroup>\n        <S.HiddenContent role=\"status\">{statusMessages?.join(\", \")}</S.HiddenContent>\n        <S.StaticMenuItemList\n          // Hide the listbox from assistive technology if no valid items are shown.\n          aria-hidden={menuItemCount === 0 || undefined}\n          aria-label={intl.formatMessage({\n            defaultMessage: \"Suggested locations\",\n            description: \"Text to show as a label for the dropdown list of locations\",\n            id: \"otpUi.LocationField.suggestedLocations\"\n          })}\n          id={listBoxId}\n        >\n          {menuItems.length > 0 ? ( // Show typing prompt to avoid empty screen\n            menuItems\n          ) : (\n            <S.MenuItem header centeredText>\n              <FormattedMessage\n                description=\"Text to show as initial placeholder in location search field\"\n                id=\"otpUi.LocationField.beingTypingPrompt\"\n              />\n            </S.MenuItem>\n          )}\n        </S.StaticMenuItemList>\n      </div>\n    );\n  }\n\n  // default display mode with dropdown menu\n  return (\n    <S.FormGroup onBlur={onBlurFormGroup} className={className}>\n      <S.InputGroup role=\"group\">\n        {/* location field icon -- also serves as dropdown anchor */}\n        <S.Dropdown\n          input={<>{textControl}{clearButton}</>}\n          listBoxIdentifier={listBoxId}\n          onToggle={onDropdownToggle}\n          open={menuVisible}\n          status={statusMessages.join(\", \")}\n          title={<LocationIconComponent locationType={locationType} />}\n        >\n          {menuItems}\n        </S.Dropdown>\n      </S.InputGroup>\n    </S.FormGroup>\n  );\n};\n\nexport default LocationField;\n\n// Rename styled components for export.\nexport { S as Styled };\n"],"file":"index.js"}