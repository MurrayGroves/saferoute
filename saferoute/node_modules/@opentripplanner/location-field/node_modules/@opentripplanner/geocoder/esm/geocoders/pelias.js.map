{"version":3,"sources":["../../src/geocoders/pelias.ts"],"names":["Geocoder","DEFAULT_LAYERS","PeliasGeocoder","query","geocoderConfig","apiKey","baseUrl","boundary","focusPoint","layers","options","sources","url","undefined","format","response","reverseUseFeatureCollection","isomorphicMapzenSearchQuery","point","lat","lon","firstFeature","name","label","rawGeocodedFeature"],"mappings":";;;;;;;;;;;;;;;AAAA,OAAOA,QAAP,MAAqB,qBAArB,C,CACA;AACA;;AAIA,IAAMC,cAAc,GAAG,mCAAvB;AAEA;AACA;AACA;AACA;AACA;AACA;;IACqBC,c;;;;;;;;;;;;;;AACnB;AACF;AACA;AACA;AACA;AACA;AACE,kCAAqBC,KAArB,EAAkE;AAChE,iCAQI,KAAKC,cART;AAAA,UACEC,MADF,wBACEA,MADF;AAAA,UAEEC,OAFF,wBAEEA,OAFF;AAAA,UAGEC,QAHF,wBAGEA,QAHF;AAAA,UAIEC,UAJF,wBAIEA,UAJF;AAAA,uDAKEC,MALF;AAAA,UAKEA,MALF,sCAKWR,cALX;AAAA,UAMES,OANF,wBAMEA,OANF;AAAA,UAOEC,OAPF,wBAOEA,OAPF;AASA;AACEN,QAAAA,MAAM,EAANA,MADF;AAEEE,QAAAA,QAAQ,EAARA,QAFF;AAGEC,QAAAA,UAAU,EAAVA,UAHF;AAIEC,QAAAA,MAAM,EAANA,MAJF;AAKEC,QAAAA,OAAO,EAAPA,OALF;AAME;AACA;AACA;AACAC,QAAAA,OAAO,EAAEA,OAAO,IAAI,IATtB;AAUEC,QAAAA,GAAG,EAAEN,OAAO,aAAMA,OAAN,qBAA+BO;AAV7C,SAWKV,KAXL;AAaD;AAED;AACF;AACA;AACA;AACA;AACA;;;;WACE,wBAAeA,KAAf,EAAgD;AAC9C,kCAQI,KAAKC,cART;AAAA,UACEC,MADF,yBACEA,MADF;AAAA,UAEEC,OAFF,yBAEEA,OAFF;AAAA,UAGEC,QAHF,yBAGEA,QAHF;AAAA,wDAIEE,MAJF;AAAA,UAIEA,MAJF,sCAIWR,cAJX;AAAA,UAKEO,UALF,yBAKEA,UALF;AAAA,UAMEE,OANF,yBAMEA,OANF;AAAA,UAOEC,OAPF,yBAOEA,OAPF;AASA;AACEN,QAAAA,MAAM,EAANA,MADF;AAEEE,QAAAA,QAAQ,EAARA,QAFF;AAGEE,QAAAA,MAAM,EAANA,MAHF;AAIED,QAAAA,UAAU,EAAVA,UAJF;AAKEE,QAAAA,OAAO,EAAPA,OALF;AAME;AACA;AACA;AACAC,QAAAA,OAAO,EAAEA,OAAO,IAAI,IATtB;AAUEC,QAAAA,GAAG,EAAEN,OAAO,aAAMA,OAAN,eAAyBO,SAVvC;AAWEC,QAAAA,MAAM,EAAE;AAXV,SAYKX,KAZL;AAcD;AAED;AACF;AACA;AACA;;;;WACE,gCAAuBY,QAAvB,EAAgE;AAAA;;AAC9D,mCAAI,KAAKX,cAAT,kDAAI,sBAAqBY,2BAAzB,EAAsD,OAAOD,QAAP;AACtD,kCAAqBA,QAAQ,CAACE,2BAAT,CAAqCC,KAA1D;AAAA,UAAQC,GAAR,yBAAQA,GAAR;AAAA,UAAaC,GAAb,yBAAaA,GAAb;AAEA,UAAMC,YAAY,GAAGN,QAAQ,CAAC,CAAD,CAA7B;AACA,aAAO;AACLI,QAAAA,GAAG,EAAHA,GADK;AAELC,QAAAA,GAAG,EAAHA,GAFK;AAGLE,QAAAA,IAAI,EAAED,YAAY,CAACE,KAHd;AAILC,QAAAA,kBAAkB,EAAEH;AAJf,OAAP;AAMD;;;;EA/EyCrB,Q;;SAAvBE,c","sourcesContent":["import Geocoder from \"./abstract-geocoder\";\n// Prettier does not support typescript annotation\n// eslint-disable-next-line prettier/prettier\nimport type { AutocompleteQuery, SearchQuery } from \"..\";\nimport type { SingleOrMultiGeocoderResponse } from \"./types\";\n\nconst DEFAULT_LAYERS = \"address,venue,street,intersection\"\n\n/**\n * Geocoder implementation for the Pelias geocoder.\n * See https://pelias.io\n *\n * @extends Geocoder\n */\nexport default class PeliasGeocoder extends Geocoder {\n  /**\n   * Generate an autocomplete query specifically for the Pelias API. The\n   * `sources` parameter is a Pelias-specific option.\n   * This function fills in some more fields of the query\n   * from the existing values in the GeocoderConfig. \n   */\n  getAutocompleteQuery(query: AutocompleteQuery): AutocompleteQuery {\n    const {\n      apiKey,\n      baseUrl,\n      boundary,\n      focusPoint,\n      layers = DEFAULT_LAYERS,\n      options,\n      sources\n    } = this.geocoderConfig;\n    return {\n      apiKey,\n      boundary,\n      focusPoint,\n      layers,\n      options,\n      // explicitly send over null for sources if provided sources is not truthy\n      // in order to avoid default isomorphic-mapzen-search sources form being\n      // applied\n      sources: sources || null,\n      url: baseUrl ? `${baseUrl}/autocomplete` : undefined,\n      ...query\n    };\n  }\n\n  /**\n   * Generate a search query specifically for the Pelias API. The\n   * `sources` parameter is a Pelias-specific option.\n   * This function fills in some more fields of the query\n   * from the existing values in the GeocoderConfig. \n   */\n  getSearchQuery(query: SearchQuery): SearchQuery {\n    const {\n      apiKey,\n      baseUrl,\n      boundary,\n      layers = DEFAULT_LAYERS,\n      focusPoint,\n      options,\n      sources\n    } = this.geocoderConfig;\n    return {\n      apiKey,\n      boundary,\n      layers,\n      focusPoint,\n      options,\n      // explicitly send over null for sources if provided sources is not truthy\n      // in order to avoid default isomorphic-mapzen-search sources form being\n      // applied\n      sources: sources || null,\n      url: baseUrl ? `${baseUrl}/search` : undefined,\n      format: false, // keep as returned GeoJSON,\n      ...query\n    };\n  }\n\n  /**\n   * Rewrite the response into an application-specific data format using the\n   * first feature returned from the geocoder.\n   */\n  rewriteReverseResponse(response): SingleOrMultiGeocoderResponse {\n    if (this.geocoderConfig?.reverseUseFeatureCollection) return response\n    const { lat, lon } = response.isomorphicMapzenSearchQuery.point;\n\n    const firstFeature = response[0];\n    return {\n      lat,\n      lon,\n      name: firstFeature.label,\n      rawGeocodedFeature: firstFeature\n    };\n  }\n}\n"],"file":"pelias.js"}