{"version":3,"sources":["../../../src/apis/here/index.ts"],"names":["normalize","stringify","AUTOCOMPLETE_URL","GEOCODE_URL","REVERSE_URL","GeocoderException","message","name","run","options","query","url","fetch","then","res","json","checkItemInBoundary","rect","position","maxLat","maxLon","minLat","minLon","lat","lng","autocomplete","apiKey","boundary","focusPoint","size","text","limit","q","show","lon","at","items","filter","country","join","search","Promise","resolve","reverse","point"],"mappings":"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","sourcesContent":["import { normalize } from \"@conveyal/lonlat\";\nimport { stringify } from \"querystring\";\n\n// Prettier does not support typescript annotation\n// eslint-disable-next-line prettier/prettier\nimport type { LonLatOutput } from \"@conveyal/lonlat\"\nimport type { AutocompleteQuery, ReverseQuery, SearchQuery } from \"../../geocoders/types\"\nimport type { Boundary, HereResponse, Item } from \"./types\";\n\nconst AUTOCOMPLETE_URL =\n  \"https://autosuggest.search.hereapi.com/v1/autosuggest\";\nconst GEOCODE_URL = \"https://geocode.search.hereapi.com/v1/geocode\";\nconst REVERSE_URL = \"https://revgeocode.search.hereapi.com/v1/revgeocode\";\n\ntype HereQuery = {\n  apiKey: string;\n  at?: string;\n  in?: string;\n  lang?: string;\n  limit?: number | string;\n  politicalView?: string;\n  q?: string;\n  qq?: string;\n  show?: string;\n};\n\n// These types are standardized for the other geocoders in this library.\n// Perhaps we could extract them out somewhere and reuse them in the other libraries?\ntype HereFetchArgs = {\n  options: RequestInit; // Built-in Typing\n  query: HereQuery;\n  url: string;\n};\n\nfunction GeocoderException(message: string) {\n  this.message = message;\n  this.name = \"GeocoderException\";\n}\n\nfunction run({ options, query, url }: HereFetchArgs): Promise<HereResponse> {\n  return fetch(`${url}?${stringify(query)}`, options).then(res => res.json());\n}\n\nconst checkItemInBoundary = ({ rect }: Boundary) => ({ position }: Item) => {\n  if (!position) return true // Chain queries might not have position, ignore them\n  const { maxLat, maxLon, minLat, minLon } = rect\n  const { lat, lng } = position\n  return lng <= maxLon && lng >= minLon && lat <= maxLat && lat >= minLat\n}\n\n/**\n * Search for an address using\n * Here's {@link https://developer.here.com/documentation/geocoding-search-api/api-reference-swagger.html|Autocomplete}\n * service.\n *\n * @param  {Object} $0\n * @param  {string} $0.apiKey                     The Here API Key\n * @param  {Object} $0.boundary\n * @param  {Object} $0.focusPoint\n * @param  {Object} $0.options                    options to pass to fetch (e.g., custom headers)\n * @param  {number} [$0.size=20]\n * @param  {string} $0.text                       query text\n * @return {Promise}                              A Promise that'll get resolved with the autocomplete result\n */\nasync function autocomplete({\n  apiKey,\n  boundary,\n  focusPoint,\n  options,\n  size = 20,\n  text\n}: AutocompleteQuery): Promise<HereResponse> {\n  // build query\n  const query: HereQuery = { apiKey,  limit: size, q: text, show: \"details\" };\n\n  if (focusPoint) {\n    const { lat, lon }: LonLatOutput = normalize(focusPoint);\n    query.at = `${lat},${lon}`;\n    const res = await run({\n      options,\n      query,\n      url: AUTOCOMPLETE_URL\n    });\n    if (boundary?.rect) {\n      // HERE does not support a boundary when you use a focus point\n      // This workaround filters the results internally to the boundary\n      res.items = res.items.filter(checkItemInBoundary(boundary))\n    }\n    return res\n  }\n  if (boundary) {\n    const { country, rect } = boundary;\n    if (country) query.in = `countryCode:${country}`;\n    if (rect) {\n      query.in = `bbox:${[\n        rect.minLon,\n        rect.minLat,\n        rect.maxLon,\n        rect.maxLat\n      ].join(\",\")}`;\n    }\n  }\n\n  return run({\n    options,\n    query,\n    url: AUTOCOMPLETE_URL\n  });\n}\n\n/**\n * Search for an address using\n * HERE's {@link https://developer.here.com/documentation/geocoding-search-api/api-reference-swagger.html|Search}\n * service. NOTE: Here does not support a boundary for Search queries, unlike Pelias.\n *\n * @param  {Object} $0\n * @param  {string} $0.apiKey                    The Here API key\n * @param  {Object} $0.focusPoint\n * @param  {Object} $0.options                  options to pass to fetch (e.g., custom headers)\n * @param  {number} [$0.size=10]\n * @param  {string} $0.text                      The address text to query for\n * @return {Promise}                            A Promise that'll get resolved with search result\n */\nfunction search({\n  apiKey,\n  focusPoint,\n  options,\n  size = 10,\n  text\n}: SearchQuery): Promise<HereResponse> {\n  if (!text) return Promise.resolve({ items: [] });\n\n  const query: HereQuery = {\n    apiKey,\n    limit: size,\n    q: text\n  };\n\n  if (focusPoint) {\n    const { lat, lon }: LonLatOutput = normalize(focusPoint);\n    query.at = `${lat},${lon}`;\n  }\n\n  return run({ options, query, url: GEOCODE_URL });\n}\n\n/**\n * Search for an address using\n * HERE's {@link https://developer.here.com/documentation/geocoding-search-api/api-reference-swagger.html|Search}\n * service.\n *\n * @param  {Object} $0\n * @param  {string} $0.apiKey                   The Here API key\n * @param  {Object} $0.point\n * @param  {Object} $0.options                  options to pass to fetch (e.g., custom headers)\n * @return {Promise}                            A Promise that'll get resolved with search result\n */\nfunction reverse({ apiKey, options, point }: ReverseQuery): Promise<HereResponse> {\n  const query: HereQuery = {\n    apiKey\n  };\n\n  if (point) {\n    const { lat, lon }: LonLatOutput = normalize(point);\n    query.at = `${lat},${lon}`;\n  } else {\n    throw new GeocoderException(\"No point provided for reverse geocoder.\");\n  }\n\n  return run({ options, query, url: REVERSE_URL }).then(res => ({\n    ...res,\n    point\n  }));\n}\n\nexport { autocomplete, reverse, search };\n"],"file":"index.js"}