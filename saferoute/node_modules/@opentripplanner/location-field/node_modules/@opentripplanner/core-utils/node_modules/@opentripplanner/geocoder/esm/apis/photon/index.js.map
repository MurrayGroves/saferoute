{"version":3,"sources":["../../../src/apis/photon/index.ts"],"names":["normalize","stringify","AUTOCOMPLETE_URL","GEOCODE_URL","REVERSE_URL","GeocoderException","message","name","run","options","query","url","fetch","then","res","json","autocomplete","boundary","focusPoint","size","text","limit","q","lat","lon","toString","country","rect","minLon","minLat","maxLon","maxLat","join","search","Promise","resolve","items","reverse","point"],"mappings":"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","sourcesContent":["import { normalize } from \"@conveyal/lonlat\";\nimport { stringify } from \"querystring\";\n\n// Prettier does not support typescript annotation\n// eslint-disable-next-line prettier/prettier\nimport type { LonLatOutput } from \"@conveyal/lonlat\"\nimport type { AutocompleteQuery, ReverseQuery, SearchQuery } from \"../../geocoders/types\"\nimport type { PhotonResponse } from \"./types\";\n\nconst AUTOCOMPLETE_URL =\n    \"https://photon.komoot.io/api\";\nconst GEOCODE_URL = \"https://photon.komoot.io/api\";\nconst REVERSE_URL = \"https://photon.komoot.io/reverse\";\n\ntype PhotonQuery = {\n  lon?: string;\n  lat?: string;\n  in?: string;\n  lang?: string;\n  limit?: number | string;\n  politicalView?: string;\n  q?: string;\n  qq?: string;\n  show?: string;\n};\n\n// These types are standardized for the other geocoders in this library.\n// Perhaps we could extract them out somewhere and reuse them in the other libraries?\ntype PhotonFetchArgs = {\n  options: RequestInit; // Built-in Typing\n  query: PhotonQuery;\n  url: string;\n};\n\nfunction GeocoderException(message: string) {\n  this.message = message;\n  this.name = \"GeocoderException\";\n}\n\nfunction run({ options, query, url }: PhotonFetchArgs): Promise<PhotonResponse> {\n  return fetch(`${url}?${stringify(query)}`, options).then(res => res.json());\n}\n\n/**\n * Search for an address using\n * Komoot's Photon {@link https://github.com/komoot/photon}\n * service.\n *\n * @param  {Object} $0\n * @param  {Object} $0.boundary\n * @param  {Object} $0.focusPoint\n * @param  {Object} $0.options                    options to pass to fetch (e.g., custom headers)\n * @param  {number} [$0.size=20]\n * @param  {string} $0.text                       query text\n * @return {Promise}                              A Promise that'll get resolved with the autocomplete result\n */\nasync function autocomplete({\n  boundary,\n  focusPoint,\n  options,\n  size = 20,\n  text\n}: AutocompleteQuery): Promise<PhotonResponse> {\n  // build query\n  const query: PhotonQuery = { limit: size, q: text };\n\n  if (focusPoint) {\n    const { lat, lon }: LonLatOutput = normalize(focusPoint);\n    query.lat = lat.toString();\n    query.lon = lon.toString();\n    const res = await run({\n      options,\n      query,\n      url: AUTOCOMPLETE_URL\n    });\n    return res\n  }\n  if (boundary) {\n    const { country, rect } = boundary;\n    if (country) query.in = `countryCode:${country}`;\n    if (rect) {\n      query.in = `bbox:${[\n        rect.minLon,\n        rect.minLat,\n        rect.maxLon,\n        rect.maxLat\n      ].join(\",\")}`;\n    }\n  }\n\n  return run({\n    options,\n    query,\n    url: AUTOCOMPLETE_URL\n  });\n}\n\n/**\n * Search for an address using\n * Komoot's Photon {@link https://github.com/komoot/photon}\n * service.\n *\n * @param  {Object} $0\n * @param  {Object} $0.focusPoint\n * @param  {Object} $0.options                  options to pass to fetch (e.g., custom headers)\n * @param  {number} [$0.size=10]\n * @param  {string} $0.text                      The address text to query for\n * @return {Promise}                            A Promise that'll get resolved with search result\n */\nfunction search({\n  focusPoint,\n  options,\n  size = 10,\n  text\n}: SearchQuery): Promise<PhotonResponse> {\n  if (!text) return Promise.resolve({ items: [] });\n\n  const query: PhotonQuery = {\n    limit: size,\n    q: text\n  };\n\n  if (focusPoint) {\n    const { lat, lon }: LonLatOutput = normalize(focusPoint);\n    query.lat = lat.toString();\n    query.lon = lon.toString();\n  }\n\n  return run({ options, query, url: GEOCODE_URL });\n}\n\n/**\n * Search for an address using\n * Komoot's Photon {@link https://github.com/komoot/photon} reverse\n * service.\n *\n * @param  {Object} $0\n * @param  {Object} $0.point\n * @param  {Object} $0.options                  options to pass to fetch (e.g., custom headers)\n * @return {Promise}                            A Promise that'll get resolved with search result\n */\nfunction reverse({ options, point }: ReverseQuery): Promise<PhotonResponse> {\n  const query: PhotonQuery = {\n  };\n\n  if (point) {\n    const { lat, lon }: LonLatOutput = normalize(point);\n    query.lat = lat.toString();\n    query.lon = lon.toString();\n  } else {\n    throw new GeocoderException(\"No point provided for reverse geocoder.\");\n  }\n\n  return run({ options, query, url: REVERSE_URL }).then(res => ({\n    ...res,\n    point\n  }));\n}\n\nexport { autocomplete, reverse, search };\n"],"file":"index.js"}