{"version":3,"sources":["../../src/geocoders/photon.ts"],"names":["Geocoder","generateLabel","properties","propertyList","forEach","propertyName","value","length","push","join","PhotonGeocoder","query","geocoderConfig","baseUrl","boundary","focusPoint","options","size","url","undefined","response","features","label","reverseUseFeatureCollection","point","lat","lon","firstFeature","name","rawGeocodedFeature","rewriteAutocompleteResponse"],"mappings":"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","sourcesContent":["import { GeoJsonProperties } from \"geojson\";\nimport Geocoder from \"./abstract-geocoder\";\n// Prettier does not support typescript annotation\n// eslint-disable-next-line prettier/prettier\nimport type { AutocompleteQuery, SearchQuery } from \"..\";\nimport type { SingleOrMultiGeocoderResponse } from \"./types\";\nimport { MultiGeocoderResponse } from \"./types\";\n\nconst generateLabel = (properties: GeoJsonProperties): string => {\n  const propertyList = [];\n  [\"name\", \"street\", \"district\", \"state\", \"postcode\", \"city\", \"country\"].forEach((propertyName) => {\n    if (typeof properties[propertyName] === \"undefined\") {\n      return;\n    }\n    const value = `${properties[propertyName]}`;\n    if (value.length > 0) {\n      propertyList.push(value);\n    }\n  })\n  return propertyList.join(\", \");\n}\n\n/**\n * Geocoder implementation for the Photon geocoder.\n * See https://photon.io\n *\n * @extends Geocoder\n */\nexport default class PhotonGeocoder extends Geocoder {\n  getAutocompleteQuery(query: AutocompleteQuery): AutocompleteQuery {\n    const {\n      baseUrl,\n      boundary,\n      focusPoint,\n      options,\n      size,\n    } = this.geocoderConfig;\n    return {\n      boundary,\n      focusPoint,\n      options,\n      size,\n      url: baseUrl ? `${baseUrl}/autocomplete` : undefined,\n      ...query\n    };\n  }\n\n  getSearchQuery(query: SearchQuery): SearchQuery {\n    const {\n      baseUrl,\n      boundary,\n      focusPoint,\n      options,\n      size,\n    } = this.geocoderConfig;\n    return {\n      boundary,\n      focusPoint,\n      options,\n      size,\n      url: baseUrl ? `${baseUrl}/search` : undefined,\n      ...query\n    };\n  }\n\n  rewriteAutocompleteResponse(response: MultiGeocoderResponse): MultiGeocoderResponse {\n    response.features.forEach((value) => {\n      value.properties.label = generateLabel(value.properties);\n    })\n    return response;\n  }\n\n  /**\n   * Rewrite the response into an application-specific data format using the\n   * first feature returned from the geocoder.\n   */\n  rewriteReverseResponse(response): SingleOrMultiGeocoderResponse {\n    if (this.geocoderConfig?.reverseUseFeatureCollection) {\n      response.features.forEach((value) => {\n        value.properties.label = generateLabel(value.properties);\n      })\n      return response as MultiGeocoderResponse;\n    }\n\n    const { lat, lon } = response.point;\n\n    const firstFeature = response.features[0];\n    return {\n      lat,\n      lon,\n      name: generateLabel(firstFeature.properties),\n      rawGeocodedFeature: firstFeature\n    };\n  }\n\n  rewriteSearchResponse(response: MultiGeocoderResponse): MultiGeocoderResponse {\n    return this.rewriteAutocompleteResponse(response) as MultiGeocoderResponse;\n  }\n}\n"],"file":"photon.js"}