{"version":3,"sources":["../src/route.js"],"names":["getTransitOperatorFromFeedIdAndAgencyId","feedId","agencyId","transitOperators","find","transitOperator","getTransitOperatorFromLeg","leg","routeId","split","getTransitOperatorFromOtpRoute","route","id","agency","END_OF_LIST_COMPARATOR_VALUE","getTransitOperatorComparatorValue","length","name","agencyName","order","makeTransitOperatorComparator","a","b","aVal","bVal","getSortValues","getterFn","modeComparatorValue","SUBWAY","TRAM","RAIL","GONDOLA","FERRY","CABLE_CAR","FUNICULAR","BUS","routeTypeComparatorValue","getRouteTypeComparatorValue","Error","mode","type","console","warn","routeTypeComparator","startsWithAlphabeticCharacter","val","firstCharCode","charCodeAt","alphabeticShortNameComparator","aStartsWithAlphabeticCharacter","shortName","bStartsWithAlphabeticCharacter","makeNumericValueComparator","objGetterFn","isNaN","makeStringValueComparator","getRouteSortOrderValue","undefined","makeMultiCriteriaSort","criteria","i","curCriteriaComparatorValue","makeRouteComparator","obj","sortOrder","parseInt","longName"],"mappings":"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","sourcesContent":["/**\n * Returns the transit operator (if an exact match is found) from the transit\n * operators config value. It is critical to use both the feedId and agencyId in\n * this method because it is possible in OTP for there to be a duplicate\n * agencyId in separate feeds.\n *\n * @param  {string} feedId The feedId that this transit agency belongs to\n * @param  {string} agencyId The agencyId of the transit agency\n * @param  {array} transitOperators The transitOperators list from the config\n * @return {object} The transitOperator if a match was found or null if no match\n *    was found\n */\nexport function getTransitOperatorFromFeedIdAndAgencyId(\n  feedId,\n  agencyId,\n  transitOperators\n) {\n  return (\n    transitOperators.find(\n      transitOperator =>\n        transitOperator.feedId === feedId &&\n        transitOperator.agencyId === agencyId\n    ) || null\n  );\n}\n\n/**\n * Looks up an operator from the provided leg.\n *\n * @param  {object} leg The Itinerary Leg from which to find the transit\n *    operator\n * @param  {object} transitOperators transitOperators from config.\n * @return {object} the operator if one was found or null if no match was found\n */\nexport function getTransitOperatorFromLeg(leg, transitOperators) {\n  if (!leg.routeId || !leg.agencyId) return null;\n  const feedId = leg.routeId.split(\":\")[0];\n  return getTransitOperatorFromFeedIdAndAgencyId(\n    feedId,\n    leg.agencyId,\n    transitOperators\n  );\n}\n\n/**\n * Looks up an operator from the provided configuration given an OTP route.\n * NOTE: this assumes the use of the OTP Route model or a modified OTP\n * RouteShort model (such as the one found in the IBI fork of OTP) that also\n * returns the agencyId.\n *\n * @param  {object} route Either an OTP Route or RouteShort model\n * @param  {array} transitOperators transitOperators from config\n * @return {object} the operator if one was found or null if no match was found\n */\nexport function getTransitOperatorFromOtpRoute(route, transitOperators) {\n  if (!route.id) return null;\n  const feedId = route.id.split(\":\")[0];\n  let agencyId;\n  if (route.agency) {\n    // This is returned in the OTP Route model\n    agencyId = route.agency.id;\n  } else if (route.agencyId) {\n    // This is returned in the OTP RouteShort model (such as in the IBI fork)\n    agencyId = route.agencyId;\n  } else {\n    return null;\n  }\n  return getTransitOperatorFromFeedIdAndAgencyId(\n    feedId,\n    agencyId,\n    transitOperators\n  );\n}\n\n// The functions below are for enhanced route sorting functions for the route\n// viewer on OTP-react-redux.\n// They address route ordering issues discussed in\n// https://github.com/opentripplanner/otp-react-redux/pull/123 and\n// https://github.com/opentripplanner/otp-react-redux/pull/124.\n\n/**\n * A large comparator value that can safely be used in mathematical sort\n * comparisons to place things at the end of lists\n */\nconst END_OF_LIST_COMPARATOR_VALUE = 999999999999;\n\n/**\n * Returns a transit operator comparator value given a route and an optional\n * transitOperators config value. This function will do its best to handle all\n * kinds of input data as certain deployments of an implementing webapp may have\n * incomplete data and certain versions of OTP might not have a modified\n * implementation of the RouteShort model.\n *\n * @param  {object} route Either an OTP Route or RouteShort model\n * @param  {array} transitOperators transitOperators from config\n * @return {mixed} this could return a string value (the route's agency name) if\n *   the transitOperators value is not defined. Otherwise an integer will be\n *   returned.\n */\nfunction getTransitOperatorComparatorValue(route, transitOperators) {\n  // if the transitOperators is undefined or has zero length, use the route's\n  // agency name as the comparator value\n  if (!transitOperators || transitOperators.length === 0) {\n    // OTP Route\n    if (route.agency) return route.agency.name;\n    // OTP RouteShort (base OTP repo or IBI fork)\n    if (route.agencyName) return route.agencyName;\n    // shouldn't happen as agency names will be defined\n    return \"zzz\";\n  }\n\n  // find operator associated with route\n  const transitOperator = getTransitOperatorFromOtpRoute(\n    route,\n    transitOperators\n  );\n\n  // if transit operator not found, return infinity\n  if (!transitOperator) return END_OF_LIST_COMPARATOR_VALUE;\n\n  // return the transit operator's sort value or END_OF_LIST_COMPARATOR_VALUE if\n  // the sort value is not a number\n  return typeof transitOperator.order === \"number\"\n    ? transitOperator.order\n    : END_OF_LIST_COMPARATOR_VALUE;\n}\n\n/**\n * Calculates the sort comparator value given two routes based off of the\n * route's agency and provided transitOperators config data.\n */\nfunction makeTransitOperatorComparator(transitOperators) {\n  return (a, b) => {\n    const aVal = getTransitOperatorComparatorValue(a, transitOperators);\n    const bVal = getTransitOperatorComparatorValue(b, transitOperators);\n    if (typeof aVal === \"string\") {\n      // happens when transitOperators is undefined. Both aVal are guaranteed to\n      // be strings. Make a string comparison.\n      if (aVal < bVal) return -1;\n      if (aVal > bVal) return 1;\n      return 0;\n    }\n\n    // transitOperators are defined and therefore a numeric value is guaranteed\n    // to be returned\n    return aVal - bVal;\n  };\n}\n\n/**\n * Gets the desired sort values according to an optional getter function. If the\n * getter function is not defined, the original sort values are returned.\n */\nfunction getSortValues(getterFn, a, b) {\n  let aVal;\n  let bVal;\n  if (typeof getterFn === \"function\") {\n    aVal = getterFn(a);\n    bVal = getterFn(b);\n  } else {\n    aVal = a;\n    bVal = b;\n  }\n  return { aVal, bVal };\n}\n\n// Lookup for the sort values associated with various OTP modes.\n// Note: JSDoc format not used to avoid bug in documentationjs.\n// https://github.com/documentationjs/documentation/issues/372\nconst modeComparatorValue = {\n  SUBWAY: 1,\n  TRAM: 2,\n  RAIL: 3,\n  GONDOLA: 4,\n  FERRY: 5,\n  CABLE_CAR: 6,\n  FUNICULAR: 7,\n  BUS: 8\n};\n\n// Lookup that maps route types to the OTP mode sort values.\n// Note: JSDoc format not used to avoid bug in documentationjs.\n// https://github.com/documentationjs/documentation/issues/372\nconst routeTypeComparatorValue = {\n  0: modeComparatorValue.TRAM, // - Tram, Streetcar, Light rail.\n  1: modeComparatorValue.SUBWAY, // - Subway, Metro.\n  2: modeComparatorValue.RAIL, // - Rail. Used for intercity or long-distance travel.\n  3: modeComparatorValue.BUS, // - Bus.\n  4: modeComparatorValue.FERRY, // - Ferry.\n  5: modeComparatorValue.CABLE_CAR, // - Cable tram.\n  6: modeComparatorValue.GONDOLA, // - Gondola, etc.\n  7: modeComparatorValue.FUNICULAR, // - Funicular.\n  // TODO: 11 and 12 are not a part of OTP as of 2019-02-14, but for now just\n  // associate them with bus/rail.\n  11: modeComparatorValue.BUS, // - Trolleybus.\n  12: modeComparatorValue.RAIL // - Monorail.\n};\n\n// Gets a comparator value for a given route's type (OTP mode).\n// Note: JSDoc format not used to avoid bug in documentationjs.\n// ttps://github.com/documentationjs/documentation/issues/372\nfunction getRouteTypeComparatorValue(route) {\n  // For some strange reason, the short route response in OTP returns the\n  // string-based modes, but the long route response returns the\n  // integer route type. This attempts to account for both of those cases.\n  if (!route) throw new Error(\"Route is undefined.\", route);\n  if (typeof modeComparatorValue[route.mode] !== \"undefined\") {\n    return modeComparatorValue[route.mode];\n  }\n  if (typeof routeTypeComparatorValue[route.type] !== \"undefined\") {\n    return routeTypeComparatorValue[route.type];\n  }\n  // Default the comparator value to a large number (placing the route at the\n  // end of the list).\n  console.warn(\"no mode/route type found for route\", route);\n  return END_OF_LIST_COMPARATOR_VALUE;\n}\n\n/**\n * Calculates the sort comparator value given two routes based off of route type\n * (OTP mode).\n */\nfunction routeTypeComparator(a, b) {\n  return getRouteTypeComparatorValue(a) - getRouteTypeComparatorValue(b);\n}\n\n/**\n * Determines whether a value is a string that starts with an alphabetic\n * ascii character.\n */\nfunction startsWithAlphabeticCharacter(val) {\n  if (typeof val === \"string\" && val.length > 0) {\n    const firstCharCode = val.charCodeAt(0);\n    return (\n      (firstCharCode >= 65 && firstCharCode <= 90) ||\n      (firstCharCode >= 97 && firstCharCode <= 122)\n    );\n  }\n  return false;\n}\n\n/**\n * Sorts routes based off of whether the shortName begins with an alphabetic\n * character. Routes with shortn that do start with an alphabetic character will\n * be prioritized over those that don't.\n */\nfunction alphabeticShortNameComparator(a, b) {\n  const aStartsWithAlphabeticCharacter = startsWithAlphabeticCharacter(\n    a.shortName\n  );\n  const bStartsWithAlphabeticCharacter = startsWithAlphabeticCharacter(\n    b.shortName\n  );\n\n  if (aStartsWithAlphabeticCharacter && bStartsWithAlphabeticCharacter) {\n    // both start with an alphabetic character, return equivalence\n    return 0;\n  }\n  // a does start with an alphabetic character, but b does not. Prioritize a\n  if (aStartsWithAlphabeticCharacter) return -1;\n  // b does start with an alphabetic character, but a does not. Prioritize b\n  if (bStartsWithAlphabeticCharacter) return 1;\n  // neither route has a shortName that starts with an alphabetic character.\n  // Return equivalence\n  return 0;\n}\n\n/**\n * Checks whether an appropriate comparison of numeric values can be made for\n * sorting purposes. If both values are not valid numbers according to the\n * isNaN check, then this function returns undefined which indicates that a\n * secondary sorting criteria should be used instead. If one value is valid and\n * the other is not, then the valid value will be given sorting priority. If\n * both values are valid numbers, the difference is obtained as the sort value.\n *\n * An optional argument can be provided which will be used to obtain the\n * comparison value from the comparison function arguments.\n *\n * IMPORTANT: the comparison values must be numeric values or at least be\n * attempted to be converted to numeric values! If one of the arguments is\n * something crazy like an empty string, unexpected behavior will occur because\n * JavaScript.\n *\n * @param  {function} [objGetterFn] An optional function to obtain the\n *  comparison value from the comparator function arguments\n */\nexport function makeNumericValueComparator(objGetterFn) {\n  /* Note: Using the global version of isNaN (the Number version behaves differently. */\n  /* eslint-disable no-restricted-globals */\n  return (a, b) => {\n    const { aVal, bVal } = getSortValues(objGetterFn, a, b);\n    // if both values aren't valid numbers, use the next sort criteria\n    if (isNaN(aVal) && isNaN(bVal)) return 0;\n    // b is a valid number, b gets priority\n    if (isNaN(aVal)) return 1;\n    // a is a valid number, a gets priority\n    if (isNaN(bVal)) return -1;\n    // a and b are valid numbers, return the sort value\n    return aVal - bVal;\n  };\n}\n\n/**\n * Create a comparator function that compares string values. The comparison\n * values feed to the sort comparator function are assumed to be objects that\n * will have either undefined, null or string values at the given key. If one\n * object has undefined, null or an empty string, but the other does have a\n * string with length > 0, then that string will get priority.\n *\n * @param  {function} [objGetterFn] An optional function to obtain the\n *  comparison value from the comparator function arguments\n */\nexport function makeStringValueComparator(objGetterFn) {\n  return (a, b) => {\n    const { aVal, bVal } = getSortValues(objGetterFn, a, b);\n    // both a and b are uncomparable strings, return equivalent value\n    if (!aVal && !bVal) return 0;\n    // a is not a comparable string, b gets priority\n    if (!aVal) return 1;\n    // b is not a comparable string, a gets priority\n    if (!bVal) return -1;\n    // a and b are comparable strings, return the sort value\n    if (aVal < bVal) return -1;\n    if (aVal > bVal) return 1;\n    return 0;\n  };\n}\n\n/**\n * OpenTripPlanner sets the routeSortOrder to -999 by default. So, if that value\n * is encountered, assume that it actually means that the routeSortOrder is not\n * set in the GTFS.\n *\n * See https://github.com/opentripplanner/OpenTripPlanner/issues/2938\n * Also see https://github.com/opentripplanner/otp-react-redux/issues/122\n */\nfunction getRouteSortOrderValue(val) {\n  return val === -999 ? undefined : val;\n}\n\n/**\n * Create a multi-criteria sort comparator function composed of other sort\n * comparator functions. Each comparator function will be ran in the order given\n * until a non-zero comparison value is obtained which is then immediately\n * returned. If all comparison functions return equivalence, then the values\n * are assumed to be equivalent.\n */\nfunction makeMultiCriteriaSort(...criteria) {\n  return (a, b) => {\n    for (let i = 0; i < criteria.length; i++) {\n      const curCriteriaComparatorValue = criteria[i](a, b);\n      // if the comparison objects are not equivalent, return the value obtained\n      // in this current criteria comparison\n      if (curCriteriaComparatorValue !== 0) {\n        return curCriteriaComparatorValue;\n      }\n    }\n    return 0;\n  };\n}\n\n/**\n * Creates a sort comparator function to compares routes for the purposes of\n * sorting and displaying in a user interface. This takes in a single optional\n * argument which should be a list of transitOperators as defined in the config\n * file. Due to GTFS feeds having varying levels of data quality, a multi-\n * criteria sort is needed to account for various differences. The criteria\n * included here are each applied to the routes in the order listed. If a given\n * sort criterion yields equivalence (e.g., two routes have the short name\n * \"20\"), the comparator falls back onto the next sort criterion (e.g., long\n * name). The sort operates on the following values (in order):\n *\n *  1. Transit Operator. The transit operator will be attempted to be obtained\n *    for each route. If no argument is provided when creating this comparator\n *    function, then routes will be sorted by their agency's name. If an\n *    argument is provided and a match is found based off of the route's feed_id\n *    and agency_id and a transitOperator's feed_id and agency_id, then the\n *    field transitOperator.order will be used as the comparator value as long\n *    as it is numeric. If it is not numeric, a value is returned indicating\n *    that this transit operator should be placed at the end of the list.\n *  2. sortOrder. Routes that do not have a valid sortOrder will be placed\n *    beneath those that do.\n *  3. route type (OTP mode). See routeTypeComparator code for prioritization of\n *    route types.\n *  4. shortNames that begin with alphabetic characters. shortNames that do not\n *    start with alphabetic characters will be place beneath those that do.\n *  5. shortName as integer. shortNames that cannot be parsed as integers will\n *    be placed beneath those that are valid.\n *  6. shortName as string. Routes without shortNames will be placed beneath\n *    those with shortNames.\n *  7. longName as string.\n */\nexport function makeRouteComparator(transitOperators) {\n  return makeMultiCriteriaSort(\n    makeTransitOperatorComparator(transitOperators),\n    makeNumericValueComparator(obj => getRouteSortOrderValue(obj.sortOrder)),\n    routeTypeComparator,\n    alphabeticShortNameComparator,\n    makeNumericValueComparator(obj => parseInt(obj.shortName, 10)),\n    makeStringValueComparator(obj => obj.shortName),\n    makeStringValueComparator(obj => obj.longName)\n  );\n}\n"],"file":"route.js"}