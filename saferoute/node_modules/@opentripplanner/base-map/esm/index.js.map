{"version":3,"sources":["../src/index.tsx"],"names":["React","useCallback","useEffect","useState","Map","maplibregl","Styled","util","MarkerWithPopup","BaseMap","baseLayer","baseLayerNames","center","children","id","mapLibreProps","maxZoom","onClick","onContextMenu","showEverything","onViewportChanged","style","zoom","initZoom","latitude","longitude","viewState","setViewState","fakeMobileHover","setFakeHover","longPressTimer","setLongPressTimer","toggleableLayers","Array","isArray","flat","filter","child","props","undefined","alwaysShow","map","layerId","name","visible","layer","hiddenLayers","setHiddenLayers","computedHiddenLayers","length","activeBaseLayer","setActiveBaseLayer","clearLongPressTimer","clearTimeout","evt","e","touchPointCount","points","setTimeout","index","includes","updatedLayers","splice","indexOf","push","LayerWrapper","Popup"],"mappings":"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","sourcesContent":["import React, { useCallback, useEffect, useState } from \"react\";\nimport { Map, MapProps } from \"react-map-gl\";\nimport maplibregl, { Event } from \"maplibre-gl\";\n\nimport * as Styled from \"./styled\";\nimport * as util from \"./util\";\nimport MarkerWithPopup from \"./MarkerWithPopup\";\n\n/**\n * The BaseMap component renders a MapLibre map\n * as well as markers that are declared as child elements of the BaseMap element.\n *\n * As BaseMap wraps a react-map-gl Map component, any control which can be added as a child of a react-map-gl map is supported.\n * See https://visgl.github.io/react-map-gl/docs/api-reference/map to see which react-map-gl\n * children are shipped by default. Others are also supported.\n *\n * Overlays are groups of similar MapLibre markers, e.g. vehicle location\n * markers, bus stop markers, etc.\n *\n * Overlays are automatically added to the overlay control displayed by the\n * BaseMap. The user uses that control to turn overlays on or off. Only overlays\n * with an id are added to the control.\n */\ntype Props = React.ComponentPropsWithoutRef<React.ElementType> & {\n  /** A URL, or list of URLs pointing to the vector tile specification which should be used as the main map.  */\n  baseLayer?: string | string[];\n  /** A list of names to match onto the base layers. Used only if there are multiple entries defined for `BaseLayer` */\n  baseLayerNames?: string[];\n  /** A [lat, lon] position to center the map at. */\n  center?: [number, number];\n  /** A unique identifier for the map (useful when using MapProvider) */\n  id?: string;\n  /** An object of props which should be passed down to MapLibre */\n  mapLibreProps?: MapProps;\n  /** The maximum zoom level the map should allow */\n  maxZoom?: number;\n  /** A callback method which is fired when the map is clicked with the left mouse button/tapped */\n  onClick?: (evt: Event) => void;\n  /** A callback method which is fired when the map is clicked with the right mouse button/long tapped */\n  // Unknown is used here because of a maplibre/mapbox issue with the true type, MapLayerMouseEvent\n  onContextMenu?: (e: unknown) => void;\n  /** A callback method which is fired when the map zoom or map bounds change */\n  onViewportChanged?: (e: State) => void;\n  /** When set to true, all hidden layers will be removed. No layers will be uncheckable until\n   * it is set to false\n   */\n  showEverything?: boolean;\n  /** An initial zoom value for the map */\n  zoom?: number;\n};\ntype State = {\n  latitude: number;\n  longitude: number;\n  zoom: number;\n};\n\nconst BaseMap = ({\n  // These tiles are free to use, but not in production\n  baseLayer = \"https://basemaps.cartocdn.com/gl/positron-gl-style/style.json\",\n  baseLayerNames,\n  center,\n  children,\n  id,\n  mapLibreProps,\n  maxZoom,\n  onClick,\n  onContextMenu,\n  showEverything,\n  onViewportChanged,\n  style,\n  zoom: initZoom = 12\n}: Props): JSX.Element => {\n  const [viewState, setViewState] = React.useState<State>({\n    latitude: center?.[0],\n    longitude: center?.[1],\n    zoom: initZoom\n  });\n\n  // Firefox and Safari on iOS: hover is not triggered when the user touches the layer selector\n  // (unlike Firefox or Chromium on Android), so we have to detect touch and trigger hover ourselves.\n  const [fakeMobileHover, setFakeHover] = useState(false);\n  const [longPressTimer, setLongPressTimer] = useState(null);\n\n  useEffect(() => {\n    if (typeof onViewportChanged === \"function\") {\n      onViewportChanged(viewState);\n    }\n  }, [viewState]);\n  useEffect(() => {\n    if (center?.[0] === null || center?.[1] === null) return;\n\n    setViewState({\n      ...viewState,\n      latitude: center?.[0],\n      longitude: center?.[1]\n    });\n  }, [center]);\n\n  const toggleableLayers = Array.isArray(children)\n    ? children\n        .flat(10)\n        .filter(\n          child =>\n            child?.props?.id !== undefined &&\n            // Some sources will not have layers as children, and should be ignored\n            // from the list.\n            child?.props?.alwaysShow !== true\n        )\n        .map(child => {\n          const { id: layerId, name, visible } = child.props;\n          return { id: layerId, name, visible };\n        })\n    : [];\n\n  const [hiddenLayers, setHiddenLayers] = useState(\n    toggleableLayers.filter(layer => !layer?.visible).map(layer => layer.id)\n  );\n  const computedHiddenLayers =\n    showEverything && hiddenLayers.length > 0 ? [] : hiddenLayers;\n\n  const [activeBaseLayer, setActiveBaseLayer] = useState(\n    typeof baseLayer === \"object\" ? baseLayer?.[0] : baseLayer\n  );\n\n  const clearLongPressTimer = useCallback(() => clearTimeout(longPressTimer), [\n    longPressTimer\n  ]);\n\n  return (\n    <Map\n      // eslint-disable-next-line react/jsx-props-no-spreading\n      {...mapLibreProps}\n      id={id}\n      latitude={viewState.latitude}\n      longitude={viewState.longitude}\n      mapLib={maplibregl}\n      mapStyle={activeBaseLayer}\n      maxZoom={maxZoom}\n      onClick={onClick}\n      onContextMenu={onContextMenu}\n      onMove={evt => {\n        setViewState(evt.viewState);\n        clearLongPressTimer();\n      }}\n      onTouchStart={e => {\n        setFakeHover(false);\n        // Start detecting long presses on screens when there is only one touch point.\n        // If the user is pinching the map or does other multi-touch actions, cancel long-press detection.\n        const touchPointCount = e.points.length;\n        if (touchPointCount === 1) {\n          setLongPressTimer(setTimeout(() => onContextMenu(e), 600));\n        } else {\n          clearLongPressTimer();\n        }\n      }}\n      onTouchCancel={clearLongPressTimer}\n      onTouchEnd={clearLongPressTimer}\n      style={style}\n      zoom={viewState.zoom}\n    >\n      {(toggleableLayers.length > 0 ||\n        (!!baseLayer &&\n          typeof baseLayer === \"object\" &&\n          baseLayer.length > 1)) && (\n        <Styled.LayerSelector\n          className=\"filter-group\"\n          id=\"filter-group\"\n          onBlur={() => setFakeHover(false)}\n          onFocus={() => setFakeHover(true)}\n          onTouchEnd={() => setFakeHover(true)}\n        >\n          <ul\n            className={`maplibregl-ctrl-group layers-list ${\n              fakeMobileHover ? \"fake-mobile-hover\" : \"\"\n            }`}\n          >\n            {!!baseLayer &&\n              typeof baseLayer === \"object\" &&\n              baseLayer.map((layer: string, index: number) => {\n                return (\n                  <li key={index}>\n                    {/* eslint-disable-next-line jsx-a11y/label-has-associated-control */}\n                    <label>\n                      <input\n                        checked={activeBaseLayer === layer}\n                        id={layer}\n                        name=\"base-layer\"\n                        onChange={() => setActiveBaseLayer(layer)}\n                        type=\"radio\"\n                      />\n                      {baseLayerNames?.[index] || layer}\n                    </label>\n                  </li>\n                );\n              })}\n\n            {toggleableLayers.map((layer: LayerProps, index: number) => {\n              return (\n                <li key={index}>\n                  {/* eslint-disable-next-line jsx-a11y/label-has-associated-control */}\n                  <label>\n                    <input\n                      checked={!computedHiddenLayers.includes(layer.id)}\n                      disabled={showEverything}\n                      id={layer.id}\n                      onChange={() => {\n                        const updatedLayers = [...hiddenLayers];\n                        // Delete the layer id if present, add it otherwise\n                        updatedLayers.includes(layer.id)\n                          ? updatedLayers.splice(\n                              updatedLayers.indexOf(layer.id),\n                              1\n                            )\n                          : updatedLayers.push(layer.id);\n\n                        setHiddenLayers(updatedLayers);\n                      }}\n                      type=\"checkbox\"\n                    />\n                    {layer.name || layer.id}\n                  </label>\n                </li>\n              );\n            })}\n          </ul>\n        </Styled.LayerSelector>\n      )}\n      {Array.isArray(children)\n        ? children\n            .flat(10)\n            .filter(child => !computedHiddenLayers.includes(child?.props?.id))\n        : children}\n    </Map>\n  );\n};\n\nexport default BaseMap;\n\ntype LayerProps = React.ComponentPropsWithoutRef<React.ElementType> & {\n  id: string;\n  name?: string;\n  visible?: boolean;\n};\nconst LayerWrapper = (props: LayerProps): JSX.Element => {\n  const { children, visible } = props;\n  return <>{visible && children}</>;\n};\n\nexport const Popup = Styled.Popup;\n\nexport { LayerWrapper, MarkerWithPopup, Styled, util };\n"],"file":"index.js"}