{"version":3,"sources":["../src/index.js"],"names":["coreUtils","PropTypes","React","AccessLeg","S","TNCLeg","TransitLeg","PrintableItinerary","className","config","itinerary","LegIcon","timeOptions","legs","length","from","name","map","leg","k","transitLeg","interlineWithPreviousLeg","hailedCar","propTypes","string","types","configType","isRequired","itineraryType","elementType","timeOptionsType","defaultProps","Styled"],"mappings":"AAAA,OAAOA,SAAP,MAAsB,6BAAtB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,OAAOC,SAAP,MAAsB,cAAtB;AACA,OAAO,KAAKC,CAAZ,MAAmB,UAAnB;AACA,OAAOC,MAAP,MAAmB,WAAnB;AACA,OAAOC,UAAP,MAAuB,eAAvB;;AAEA,SAASC,kBAAT,OAMG;AAAA,MALDC,SAKC,QALDA,SAKC;AAAA,MAJDC,MAIC,QAJDA,MAIC;AAAA,MAHDC,SAGC,QAHDA,SAGC;AAAA,MAFDC,OAEC,QAFDA,OAEC;AAAA,MADDC,WACC,QADDA,WACC;AACD,sBACE,oBAAC,CAAD,CAAG,kBAAH;AAAsB,IAAA,SAAS,EAAEJ;AAAjC,KACGE,SAAS,CAACG,IAAV,CAAeC,MAAf,GAAwB,CAAxB,iBACC,oBAAC,CAAD,CAAG,YAAH,qBACE,oBAAC,CAAD,CAAG,OAAH,qBACE,oBAAC,CAAD,CAAG,SAAH,qBACE,wCADF,yBACqB,+BAAIJ,SAAS,CAACG,IAAV,CAAe,CAAf,EAAkBE,IAAlB,CAAuBC,IAA3B,CADrB,CADF,CADF,CAFJ,EAUGN,SAAS,CAACG,IAAV,CAAeI,GAAf,CAAmB,UAACC,GAAD,EAAMC,CAAN;AAAA,WAClBD,GAAG,CAACE,UAAJ,gBACE,oBAAC,UAAD;AACE,MAAA,gBAAgB,EACdD,CAAC,GAAGT,SAAS,CAACG,IAAV,CAAeC,MAAf,GAAwB,CAA5B,IACAJ,SAAS,CAACG,IAAV,CAAeM,CAAC,GAAG,CAAnB,EAAsBE,wBAH1B;AAKE,MAAA,GAAG,EAAEF,CALP;AAME,MAAA,GAAG,EAAED,GANP;AAOE,MAAA,OAAO,EAAEP,OAPX;AAQE,MAAA,WAAW,EAAEC;AARf,MADF,GAWIM,GAAG,CAACI,SAAJ,gBACF,oBAAC,MAAD;AACE,MAAA,GAAG,EAAEJ,GADP;AAEE,MAAA,OAAO,EAAEP,OAFX;AAGE,MAAA,GAAG,EAAEQ,CAHP;AAIE,MAAA,WAAW,EAAEP;AAJf,MADE,gBAQF,oBAAC,SAAD;AACE,MAAA,MAAM,EAAEH,MADV;AAEE,MAAA,GAAG,EAAEU,CAFP;AAGE,MAAA,GAAG,EAAED,GAHP;AAIE,MAAA,OAAO,EAAEP,OAJX;AAKE,MAAA,WAAW,EAAEC;AALf,MApBgB;AAAA,GAAnB,CAVH,CADF;AA0CD;;AAEDL,kBAAkB,CAACgB,SAAnB,GAA+B;AAC7B;AACAf,EAAAA,SAAS,EAAEP,SAAS,CAACuB,MAFQ;;AAG7B;AACAf,EAAAA,MAAM,EAAET,SAAS,CAACyB,KAAV,CAAgBC,UAAhB,CAA2BC,UAJN;;AAK7B;AACAjB,EAAAA,SAAS,EAAEV,SAAS,CAACyB,KAAV,CAAgBG,aAAhB,CAA8BD,UANZ;;AAO7B;AACAhB,EAAAA,OAAO,EAAEV,SAAS,CAAC4B,WAAV,CAAsBF,UARF;;AAS7B;AACAf,EAAAA,WAAW,EAAEZ,SAAS,CAACyB,KAAV,CAAgBK;AAVA,CAA/B;AAaAvB,kBAAkB,CAACwB,YAAnB,GAAkC;AAChCvB,EAAAA,SAAS,EAAE,IADqB;AAEhCI,EAAAA,WAAW,EAAE;AAFmB,CAAlC;AAKA,eAAeL,kBAAf,C,CAEA;;AACA,SAASH,CAAC,IAAI4B,MAAd","sourcesContent":["import coreUtils from \"@opentripplanner/core-utils\";\nimport PropTypes from \"prop-types\";\nimport React from \"react\";\n\nimport AccessLeg from \"./access-leg\";\nimport * as S from \"./styled\";\nimport TNCLeg from \"./tnc-leg\";\nimport TransitLeg from \"./transit-leg\";\n\nfunction PrintableItinerary({\n  className,\n  config,\n  itinerary,\n  LegIcon,\n  timeOptions\n}) {\n  return (\n    <S.PrintableItinerary className={className}>\n      {itinerary.legs.length > 0 && (\n        <S.CollapsedTop>\n          <S.LegBody>\n            <S.LegHeader>\n              <b>Depart</b> from <b>{itinerary.legs[0].from.name}</b>\n            </S.LegHeader>\n          </S.LegBody>\n        </S.CollapsedTop>\n      )}\n      {itinerary.legs.map((leg, k) =>\n        leg.transitLeg ? (\n          <TransitLeg\n            interlineFollows={\n              k < itinerary.legs.length - 1 &&\n              itinerary.legs[k + 1].interlineWithPreviousLeg\n            }\n            key={k}\n            leg={leg}\n            LegIcon={LegIcon}\n            timeOptions={timeOptions}\n          />\n        ) : leg.hailedCar ? (\n          <TNCLeg\n            leg={leg}\n            LegIcon={LegIcon}\n            key={k}\n            timeOptions={timeOptions}\n          />\n        ) : (\n          <AccessLeg\n            config={config}\n            key={k}\n            leg={leg}\n            LegIcon={LegIcon}\n            timeOptions={timeOptions}\n          />\n        )\n      )}\n    </S.PrintableItinerary>\n  );\n}\n\nPrintableItinerary.propTypes = {\n  /** Used for additional styling with styled components for example. */\n  className: PropTypes.string,\n  /** Contains OTP configuration details. */\n  config: coreUtils.types.configType.isRequired,\n  /** Itinerary that the user has selected to view, contains multiple legs */\n  itinerary: coreUtils.types.itineraryType.isRequired,\n  /** A component class that is used to render icons for legs of an itinerary */\n  LegIcon: PropTypes.elementType.isRequired,\n  /** Contains the preferred format string for time display and a timezone offset */\n  timeOptions: coreUtils.types.timeOptionsType\n};\n\nPrintableItinerary.defaultProps = {\n  className: null,\n  timeOptions: null\n};\n\nexport default PrintableItinerary;\n\n// Rename styled components for export\nexport { S as Styled };\n"],"file":"index.js"}