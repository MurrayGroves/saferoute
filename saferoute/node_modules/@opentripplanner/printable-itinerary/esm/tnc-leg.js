import coreUtils from "@opentripplanner/core-utils";
import PropTypes from "prop-types";
import React from "react";
import AccessibilityAnnotation from "./accessibility-annotation";
import * as S from "./styled";
export default function TNCLeg(_ref) {
  var accessibilityScoreGradationMap = _ref.accessibilityScoreGradationMap,
      leg = _ref.leg,
      LegIcon = _ref.LegIcon;
  var tncData = leg.tncData;
  if (!tncData) return null;
  return /*#__PURE__*/React.createElement(S.Leg, null, /*#__PURE__*/React.createElement(AccessibilityAnnotation, {
    accessibilityScoreGradationMap: accessibilityScoreGradationMap,
    grayscale: true,
    leg: leg,
    LegIcon: LegIcon
  }), /*#__PURE__*/React.createElement(S.LegBody, null, /*#__PURE__*/React.createElement(S.LegHeader, null, /*#__PURE__*/React.createElement("b", null, "Take ", tncData.displayName), " to ", /*#__PURE__*/React.createElement("b", null, leg.to.name)), /*#__PURE__*/React.createElement(S.LegDetails, null, /*#__PURE__*/React.createElement(S.LegDetail, null, "Estimated wait time for pickup:", " ", /*#__PURE__*/React.createElement("b", null, coreUtils.time.formatDuration(tncData.estimatedArrival))), /*#__PURE__*/React.createElement(S.LegDetail, null, "Estimated travel time:", " ", /*#__PURE__*/React.createElement("b", null, coreUtils.time.formatDuration(leg.duration)), " (does not account for traffic)"))));
}
TNCLeg.propTypes = {
  accessibilityScoreGradationMap: PropTypes.shape({
    color: PropTypes.string,
    text: PropTypes.string,
    icon: PropTypes.element
  }),
  leg: coreUtils.types.legType.isRequired,
  LegIcon: PropTypes.elementType.isRequired
};
TNCLeg.defaultProps = {
  accessibilityScoreGradationMap: null
};
//# sourceMappingURL=tnc-leg.js.map