import coreUtils from "@opentripplanner/core-utils";
import PropTypes from "prop-types";
import React from "react";
import AccessLeg from "./access-leg";
import * as S from "./styled";
import TNCLeg from "./tnc-leg";
import TransitLeg from "./transit-leg";

function PrintableItinerary(_ref) {
  var className = _ref.className,
      config = _ref.config,
      itinerary = _ref.itinerary,
      LegIcon = _ref.LegIcon,
      timeOptions = _ref.timeOptions;
  return /*#__PURE__*/React.createElement(S.PrintableItinerary, {
    className: className
  }, itinerary.legs.length > 0 && /*#__PURE__*/React.createElement(S.CollapsedTop, null, /*#__PURE__*/React.createElement(S.LegBody, null, /*#__PURE__*/React.createElement(S.LegHeader, null, /*#__PURE__*/React.createElement("b", null, "Depart"), " from ", /*#__PURE__*/React.createElement("b", null, itinerary.legs[0].from.name)))), itinerary.legs.map(function (leg, k) {
    return leg.transitLeg ? /*#__PURE__*/React.createElement(TransitLeg, {
      interlineFollows: k < itinerary.legs.length - 1 && itinerary.legs[k + 1].interlineWithPreviousLeg,
      key: k,
      leg: leg,
      LegIcon: LegIcon,
      timeOptions: timeOptions
    }) : leg.hailedCar ? /*#__PURE__*/React.createElement(TNCLeg, {
      leg: leg,
      LegIcon: LegIcon,
      key: k,
      timeOptions: timeOptions
    }) : /*#__PURE__*/React.createElement(AccessLeg, {
      config: config,
      key: k,
      leg: leg,
      LegIcon: LegIcon,
      timeOptions: timeOptions
    });
  }));
}

PrintableItinerary.propTypes = {
  /** Used for additional styling with styled components for example. */
  className: PropTypes.string,

  /** Contains OTP configuration details. */
  config: coreUtils.types.configType.isRequired,

  /** Itinerary that the user has selected to view, contains multiple legs */
  itinerary: coreUtils.types.itineraryType.isRequired,

  /** A component class that is used to render icons for legs of an itinerary */
  LegIcon: PropTypes.elementType.isRequired,

  /** Contains the preferred format string for time display and a timezone offset */
  timeOptions: coreUtils.types.timeOptionsType
};
PrintableItinerary.defaultProps = {
  className: null,
  timeOptions: null
};
export default PrintableItinerary; // Rename styled components for export

export { S as Styled };
//# sourceMappingURL=index.js.map