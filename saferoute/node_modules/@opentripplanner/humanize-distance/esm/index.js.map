{"version":3,"sources":["../src/index.ts"],"names":["roundToOneDecimalPlace","number","Math","round","humanizeDistanceStringImperial","meters","abbreviate","intl","feet","unit","unitIfNoIntl","value","formatNumber","style","unitDisplay","humanizeDistanceStringMetric","km","shortUnit","humanizeDistanceString","outputMetricUnits"],"mappings":"AAEA,SAASA,sBAAT,CAAgCC,MAAhC,EAAwD;AACtD,SAAOC,IAAI,CAACC,KAAL,CAAWF,MAAM,GAAG,EAApB,IAA0B,EAAjC;AACD;;AAED,OAAO,SAASG,8BAAT,CACLC,MADK,EAELC,UAFK,EAGLC,IAHK,EAIG;AACR,MAAMC,IAAI,GAAGH,MAAM,GAAG,OAAtB;AAEA,MAAII,IAAI,GAAG,MAAX;AACA,MAAIC,YAAY,GAAGJ,UAAU,GAAG,IAAH,GAAU,OAAvC;AACA,MAAIK,KAAK,GAAGX,sBAAsB,CAACQ,IAAI,GAAG,IAAR,CAAlC;;AAEA,MAAIA,IAAI,GAAG,GAAX,EAAgB;AACdC,IAAAA,IAAI,GAAG,MAAP;AACAC,IAAAA,YAAY,GAAGJ,UAAU,GAAG,IAAH,GAAU,MAAnC;AACAK,IAAAA,KAAK,GAAGT,IAAI,CAACC,KAAL,CAAWK,IAAX,CAAR;AACD;;AAED,SAAOD,IAAI,GACPA,IAAI,CAACK,YAAL,CAAkBD,KAAlB,EAAyB;AACvBE,IAAAA,KAAK,EAAE,MADgB;AAEvBJ,IAAAA,IAAI,EAAJA,IAFuB;AAGvBK,IAAAA,WAAW,EAAER,UAAU,GAAG,OAAH,GAAa;AAHb,GAAzB,CADO,aAMJK,KANI,cAMKD,YANL,CAAX;AAOD;AAED,OAAO,SAASK,4BAAT,CACLV,MADK,EAELE,IAFK,EAGG;AACR,MAAMS,EAAE,GAAGX,MAAM,GAAG,IAApB;AACA,MAAII,IAAI,GAAG,OAAX;AACA,MAAIQ,SAAS,GAAG,GAAhB;AACA,MAAIN,KAAK,GAAGT,IAAI,CAACC,KAAL,CAAWE,MAAX,CAAZ;;AAEA,MAAIW,EAAE,GAAG,CAAT,EAAY;AACVP,IAAAA,IAAI,GAAG,WAAP;AACAQ,IAAAA,SAAS,GAAG,IAAZ;AACAN,IAAAA,KAAK,GACHK,EAAE,GAAG,GAAL,GACI;AACAd,IAAAA,IAAI,CAACC,KAAL,CAAWa,EAAX,CAFJ,GAGI;AACAhB,IAAAA,sBAAsB,CAACgB,EAAD,CAL5B;AAMD;;AAED,SAAOT,IAAI,GACPA,IAAI,CAACK,YAAL,CAAkBD,KAAlB,EAAyB;AACvBE,IAAAA,KAAK,EAAE,MADgB;AAEvBJ,IAAAA,IAAI,EAAJA,IAFuB;AAGvBK,IAAAA,WAAW,EAAE;AAHU,GAAzB,CADO,aAMJH,KANI,cAMKM,SANL,CAAX;AAOD;AAED,OAAO,SAASC,sBAAT,CACLb,MADK,EAIG;AAAA,MAFRc,iBAEQ,uEAFY,KAEZ;AAAA,MADRZ,IACQ;AACR,SAAOY,iBAAiB,GACpBJ,4BAA4B,CAACV,MAAD,EAASE,IAAT,CADR,GAEpBH,8BAA8B,CAACC,MAAD,EAAS,IAAT,EAAeE,IAAf,CAFlC;AAGD","sourcesContent":["import { IntlShape } from \"react-intl\";\n\nfunction roundToOneDecimalPlace(number: number): number {\n  return Math.round(number * 10) / 10;\n}\n\nexport function humanizeDistanceStringImperial(\n  meters: number,\n  abbreviate?: boolean,\n  intl?: IntlShape\n): string {\n  const feet = meters * 3.28084;\n\n  let unit = \"mile\";\n  let unitIfNoIntl = abbreviate ? \"mi\" : \"miles\";\n  let value = roundToOneDecimalPlace(feet / 5280);\n\n  if (feet < 528) {\n    unit = \"foot\";\n    unitIfNoIntl = abbreviate ? \"ft\" : \"feet\";\n    value = Math.round(feet);\n  }\n\n  return intl\n    ? intl.formatNumber(value, {\n        style: \"unit\",\n        unit,\n        unitDisplay: abbreviate ? \"short\" : \"long\"\n      })\n    : `${value} ${unitIfNoIntl}`;\n}\n\nexport function humanizeDistanceStringMetric(\n  meters: number,\n  intl?: IntlShape\n): string {\n  const km = meters / 1000;\n  let unit = \"meter\";\n  let shortUnit = \"m\";\n  let value = Math.round(meters);\n\n  if (km > 1) {\n    unit = \"kilometer\";\n    shortUnit = \"km\";\n    value =\n      km > 100\n        ? // 100 km and over\n          Math.round(km)\n        : // 1.1 km => 99.9 km\n          roundToOneDecimalPlace(km);\n  }\n\n  return intl\n    ? intl.formatNumber(value, {\n        style: \"unit\",\n        unit,\n        unitDisplay: \"short\"\n      })\n    : `${value} ${shortUnit}`;\n}\n\nexport function humanizeDistanceString(\n  meters: number,\n  outputMetricUnits = false,\n  intl?: IntlShape\n): string {\n  return outputMetricUnits\n    ? humanizeDistanceStringMetric(meters, intl)\n    : humanizeDistanceStringImperial(meters, null, intl);\n}\n"],"file":"index.js"}