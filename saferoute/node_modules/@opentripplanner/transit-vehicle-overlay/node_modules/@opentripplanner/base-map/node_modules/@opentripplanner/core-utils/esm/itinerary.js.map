{"version":3,"sources":["../src/itinerary.js"],"names":["polyline","turfAlong","calculateFares","getLegModeLabel","getModeForPlace","getPlaceName","getStepDirection","getStepInstructions","getStepStreetName","getTransitFare","transitModes","getTransitModes","config","modes","map","tm","mode","isTransit","includes","isReservationRequired","leg","boardRule","isContinuousDropoff","alightRule","isFlex","isAdvanceBookingRequired","info","latestBookingTime","daysPrior","legDropoffRequiresAdvanceBooking","dropOffBookingInfo","isWalk","isBicycle","isBicycleRent","isCar","startsWith","isMicromobility","isAccessMode","hasTransit","modesStr","split","some","hasCar","hasBike","hasMicromobility","hasHail","indexOf","hasRental","getMapColor","get","toSentenceCase","str","String","charAt","toUpperCase","substr","toLowerCase","getCompanyFromLeg","from","rentedBike","rentedCar","rentedVehicle","tncData","networks","company","getItineraryBounds","itinerary","coords","legs","forEach","legCoords","toGeoJSON","legGeometry","points","coordinates","c","getLegBounds","length","push","lat","lon","to","legLocationAtDistance","distance","line","pt","units","geometry","e","legElevationAtDistance","traversed","unshift","i","start","elevDistanceSpan","console","warn","pct","elevSpan","getElevationProfile","steps","unitConversion","minElev","maxElev","gain","loss","previous","step","elevation","elev","diff","second","first","convertedElevation","getTextWidth","text","font","canvas","document","createElement","context","getContext","metrics","measureText","width","getCompanyForNetwork","networkString","companies","find","co","id","getCompaniesLabelFromNetworks","network","filter","label","join","getTNCLocation","type","location","toFixed","calculatePhysicalActivity","walkDuration","bikeDuration","duration","caloriesBurned","getTimeZoneOffset","dstOffset","Date","startTime","getTimezoneOffset","agencyTimeZoneOffset","calculateTncFares","maxTNCFare","minTNCFare","tncCurrencyCode"],"mappings":"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","sourcesContent":["import polyline from \"@mapbox/polyline\";\nimport turfAlong from \"@turf/along\";\n\nimport {\n  calculateFares,\n  getLegModeLabel,\n  getModeForPlace,\n  getPlaceName,\n  getStepDirection,\n  getStepInstructions,\n  getStepStreetName,\n  getTransitFare\n} from \"./deprecated\";\n\nexport {\n  calculateFares,\n  getLegModeLabel,\n  getModeForPlace,\n  getPlaceName,\n  getStepDirection,\n  getStepInstructions,\n  getStepStreetName,\n  getTransitFare\n};\n\n// All OTP transit modes\nexport const transitModes = [\n  \"TRAM\",\n  \"BUS\",\n  \"SUBWAY\",\n  \"FERRY\",\n  \"RAIL\",\n  \"GONDOLA\"\n];\n\n/**\n * @param  {config} config OTP-RR configuration object\n * @return {Array}  List of all transit modes defined in config; otherwise default mode list\n */\n\nexport function getTransitModes(config) {\n  if (!config || !config.modes || !config.modes.transitModes)\n    return transitModes;\n  return config.modes.transitModes.map(tm => tm.mode);\n}\n\nexport function isTransit(mode) {\n  return transitModes.includes(mode) || mode === \"TRANSIT\";\n}\n\n/**\n * Returns true if the leg pickup rules enabled which require\n * calling ahead for the service to run. \"mustPhone\" is the only\n * property of boardRule which encodes this info.\n */\nexport function isReservationRequired(leg) {\n  return leg.boardRule === \"mustPhone\";\n}\n/**\n * Returns true if the leg has continuous dropoff enabled which requires\n * asking the driver to let the user off. \"coordinateWithDriver\" is the only\n * property of alightRule which encodes this info.\n */\nexport function isContinuousDropoff(leg) {\n  return leg.alightRule === \"coordinateWithDriver\";\n}\n/**\n * The two rules checked by the above two functions are the only values\n * returned by OTP when a leg is a flex leg.\n */\nexport function isFlex(leg) {\n  return isReservationRequired(leg) || isContinuousDropoff(leg);\n}\n\nexport function isAdvanceBookingRequired(info) {\n  return info?.latestBookingTime?.daysPrior > 0;\n}\nexport function legDropoffRequiresAdvanceBooking(leg) {\n  return isAdvanceBookingRequired(leg.dropOffBookingInfo);\n}\n\nexport function isWalk(mode) {\n  if (!mode) return false;\n\n  return mode === \"WALK\";\n}\n\nexport function isBicycle(mode) {\n  if (!mode) return false;\n\n  return mode === \"BICYCLE\";\n}\n\nexport function isBicycleRent(mode) {\n  if (!mode) return false;\n\n  return mode === \"BICYCLE_RENT\";\n}\n\nexport function isCar(mode) {\n  if (!mode) return false;\n  return mode.startsWith(\"CAR\");\n}\n\nexport function isMicromobility(mode) {\n  if (!mode) return false;\n  return mode.startsWith(\"MICROMOBILITY\") || mode.startsWith(\"SCOOTER\");\n}\n\nexport function isAccessMode(mode) {\n  return (\n    isWalk(mode) ||\n    isBicycle(mode) ||\n    isBicycleRent(mode) ||\n    isCar(mode) ||\n    isMicromobility(mode)\n  );\n}\n\n/**\n * @param  {string}  modesStr a comma-separated list of OTP modes\n * @return {boolean} whether any of the modes are transit modes\n */\nexport function hasTransit(modesStr) {\n  return modesStr.split(\",\").some(mode => isTransit(mode));\n}\n\n/**\n * @param  {string}  modesStr a comma-separated list of OTP modes\n * @return {boolean} whether any of the modes are car-based modes\n */\nexport function hasCar(modesStr) {\n  return modesStr.split(\",\").some(mode => isCar(mode));\n}\n\n/**\n * @param  {string}  modesStr a comma-separated list of OTP modes\n * @return {boolean} whether any of the modes are bicycle-based modes\n */\nexport function hasBike(modesStr) {\n  return modesStr\n    .split(\",\")\n    .some(mode => isBicycle(mode) || isBicycleRent(mode));\n}\n\n/**\n * @param  {string}  modesStr a comma-separated list of OTP modes\n * @return {boolean} whether any of the modes are micromobility-based modes\n */\nexport function hasMicromobility(modesStr) {\n  return modesStr.split(\",\").some(mode => isMicromobility(mode));\n}\n\n/**\n * @param  {string}  modesStr a comma-separated list of OTP modes\n * @return {boolean} whether any of the modes is a hailing mode\n */\nexport function hasHail(modesStr) {\n  return modesStr.split(\",\").some(mode => mode.indexOf(\"_HAIL\") > -1);\n}\n\n/**\n * @param  {string}  modesStr a comma-separated list of OTP modes\n * @return {boolean} whether any of the modes is a rental mode\n */\nexport function hasRental(modesStr) {\n  return modesStr.split(\",\").some(mode => mode.indexOf(\"_RENT\") > -1);\n}\n\nexport function getMapColor(mode) {\n  mode = mode || this.get(\"mode\");\n  if (mode === \"WALK\") return \"#444\";\n  if (mode === \"BICYCLE\") return \"#0073e5\";\n  if (mode === \"SUBWAY\") return \"#e60000\";\n  if (mode === \"RAIL\") return \"#b00\";\n  if (mode === \"BUS\") return \"#080\";\n  if (mode === \"TRAM\") return \"#800\";\n  if (mode === \"FERRY\") return \"#008\";\n  if (mode === \"CAR\") return \"#444\";\n  if (mode === \"MICROMOBILITY\" || mode === \"SCOOTER\") return \"#f5a729\";\n  return \"#aaa\";\n}\n\nexport function toSentenceCase(str) {\n  if (str == null) {\n    return \"\";\n  }\n  str = String(str);\n  return str.charAt(0).toUpperCase() + str.substr(1).toLowerCase();\n}\n\n/**\n * Derive the company string based on mode and network associated with leg.\n */\nexport function getCompanyFromLeg(leg) {\n  if (!leg) return null;\n  const { from, mode, rentedBike, rentedCar, rentedVehicle, tncData } = leg;\n  if (mode === \"CAR\" && rentedCar) {\n    return from.networks[0];\n  }\n  if (mode === \"CAR\" && tncData) {\n    return tncData.company;\n  }\n  if (mode === \"BICYCLE\" && rentedBike && from.networks) {\n    return from.networks[0];\n  }\n  if (\n    (mode === \"MICROMOBILITY\" || mode === \"SCOOTER\") &&\n    rentedVehicle &&\n    from.networks\n  ) {\n    return from.networks[0];\n  }\n  return null;\n}\n\nexport function getItineraryBounds(itinerary) {\n  let coords = [];\n  itinerary.legs.forEach(leg => {\n    const legCoords = polyline\n      .toGeoJSON(leg.legGeometry.points)\n      .coordinates.map(c => [c[1], c[0]]);\n    coords = [...coords, ...legCoords];\n  });\n  return coords;\n}\n\n/**\n * Return a coords object that encloses the given leg's geometry.\n */\nexport function getLegBounds(leg) {\n  const coords = polyline\n    .toGeoJSON(leg.legGeometry.points)\n    .coordinates.map(c => [c[1], c[0]]);\n\n  // in certain cases, there might be zero-length coordinates in the leg\n  // geometry. In these cases, build us an array of coordinates using the from\n  // and to data of the leg.\n  if (coords.length === 0) {\n    coords.push([leg.from.lat, leg.from.lon], [leg.to.lat, leg.to.lon]);\n  }\n  return coords;\n}\n\n/* Returns an interpolated lat-lon at a specified distance along a leg */\n\nexport function legLocationAtDistance(leg, distance) {\n  if (!leg.legGeometry) return null;\n\n  try {\n    const line = polyline.toGeoJSON(leg.legGeometry.points);\n    const pt = turfAlong(line, distance, { units: \"meters\" });\n    if (pt && pt.geometry && pt.geometry.coordinates) {\n      return [pt.geometry.coordinates[1], pt.geometry.coordinates[0]];\n    }\n  } catch (e) {\n    // FIXME handle error!\n  }\n\n  return null;\n}\n\n/* Returns an interpolated elevation at a specified distance along a leg */\n\nexport function legElevationAtDistance(points, distance) {\n  // Iterate through the combined elevation profile\n  let traversed = 0;\n  // If first point distance is not zero, insert starting point at zero with\n  // null elevation. Encountering this value should trigger the warning below.\n  if (points[0][0] > 0) {\n    points.unshift([0, null]);\n  }\n  for (let i = 1; i < points.length; i++) {\n    const start = points[i - 1];\n    const elevDistanceSpan = points[i][0] - start[0];\n    if (distance >= traversed && distance <= traversed + elevDistanceSpan) {\n      // Distance falls within this point and the previous one;\n      // compute & return iterpolated elevation value\n      if (start[1] === null) {\n        console.warn(\n          \"Elevation value does not exist for distance.\",\n          distance,\n          traversed\n        );\n        return null;\n      }\n      const pct = (distance - traversed) / elevDistanceSpan;\n      const elevSpan = points[i][1] - start[1];\n      return start[1] + elevSpan * pct;\n    }\n    traversed += elevDistanceSpan;\n  }\n  console.warn(\n    \"Elevation value does not exist for distance.\",\n    distance,\n    traversed\n  );\n  return null;\n}\n\n// Iterate through the steps, building the array of elevation points and\n// keeping track of the minimum and maximum elevations reached\nexport function getElevationProfile(steps, unitConversion = 1) {\n  let minElev = 100000;\n  let maxElev = -100000;\n  let traversed = 0;\n  let gain = 0;\n  let loss = 0;\n  let previous = null;\n  const points = [];\n  steps.forEach(step => {\n    if (!step.elevation || step.elevation.length === 0) {\n      traversed += step.distance;\n      return;\n    }\n    for (let i = 0; i < step.elevation.length; i++) {\n      const elev = step.elevation[i];\n      if (previous) {\n        const diff = (elev.second - previous.second) * unitConversion;\n        if (diff > 0) gain += diff;\n        else loss += diff;\n      }\n      if (i === 0 && elev.first !== 0) {\n        // console.warn(`No elevation data available for step ${stepIndex}-${i} at beginning of segment`, elev)\n      }\n      const convertedElevation = elev.second * unitConversion;\n      if (convertedElevation < minElev) minElev = convertedElevation;\n      if (convertedElevation > maxElev) maxElev = convertedElevation;\n      points.push([traversed + elev.first, elev.second]);\n      // Insert \"filler\" point if the last point in elevation profile does not\n      // reach the full distance of the step.\n      if (i === step.elevation.length - 1 && elev.first !== step.distance) {\n        // points.push([traversed + step.distance, elev.second])\n      }\n      previous = elev;\n    }\n    traversed += step.distance;\n  });\n  return { maxElev, minElev, points, traversed, gain, loss };\n}\n\n/**\n * Uses canvas.measureText to compute and return the width of the given text of given font in pixels.\n *\n * @param {string} text The text to be rendered.\n * @param {string} font The css font descriptor that text is to be rendered with (e.g. \"bold 14px verdana\").\n *\n * @see https://stackoverflow.com/questions/118241/calculate-text-width-with-javascript/21015393#21015393\n */\nexport function getTextWidth(text, font = \"22px Arial\") {\n  // re-use canvas object for better performance\n  const canvas =\n    getTextWidth.canvas ||\n    (getTextWidth.canvas = document.createElement(\"canvas\"));\n  const context = canvas.getContext(\"2d\");\n  context.font = font;\n  const metrics = context.measureText(text);\n  return metrics.width;\n}\n\n/**\n * Get the configured company object for the given network string if the company\n * has been defined in the provided companies array config.\n */\nexport function getCompanyForNetwork(networkString, companies = []) {\n  const company = companies.find(co => co.id === networkString);\n  if (!company) {\n    console.warn(\n      `No company found in config.yml that matches rented vehicle network: ${networkString}`,\n      companies\n    );\n  }\n  return company;\n}\n\n/**\n * Get a string label to display from a list of vehicle rental networks.\n *\n * @param  {Array<string>} networks  A list of network ids.\n * @param  {Array<object>}  [companies=[]] An optional list of the companies config.\n * @return {string}  A label for use in presentation on a website.\n */\nexport function getCompaniesLabelFromNetworks(networks, companies = []) {\n  return networks\n    .map(network => getCompanyForNetwork(network, companies))\n    .filter(co => !!co)\n    .map(co => co.label)\n    .join(\"/\");\n}\n\nexport function getTNCLocation(leg, type) {\n  const location = leg[type];\n  return `${location.lat.toFixed(5)},${location.lon.toFixed(5)}`;\n}\n\nexport function calculatePhysicalActivity(itinerary) {\n  let walkDuration = 0;\n  let bikeDuration = 0;\n  itinerary.legs.forEach(leg => {\n    if (leg.mode.startsWith(\"WALK\")) walkDuration += leg.duration;\n    if (leg.mode.startsWith(\"BICYCLE\")) bikeDuration += leg.duration;\n  });\n  const caloriesBurned =\n    (walkDuration / 3600) * 280 + (bikeDuration / 3600) * 290;\n  return {\n    bikeDuration,\n    caloriesBurned,\n    walkDuration\n  };\n}\n\nexport function getTimeZoneOffset(itinerary) {\n  if (!itinerary.legs || !itinerary.legs.length) return 0;\n\n  // Determine if there is a DST offset between now and the itinerary start date\n  const dstOffset =\n    new Date(itinerary.startTime).getTimezoneOffset() -\n    new Date().getTimezoneOffset();\n\n  return (\n    itinerary.legs[0].agencyTimeZoneOffset +\n    (new Date().getTimezoneOffset() + dstOffset) * 60000\n  );\n}\n\nexport function calculateTncFares(itinerary) {\n  // TODO: don't rely on deprecated methods!\n  // At the moment this is safe as none of these exported variables contain strings\n  const { maxTNCFare, minTNCFare, tncCurrencyCode } = calculateFares(\n    itinerary,\n    true\n  );\n  return { maxTNCFare, minTNCFare, tncCurrencyCode };\n}\n"],"file":"itinerary.js"}