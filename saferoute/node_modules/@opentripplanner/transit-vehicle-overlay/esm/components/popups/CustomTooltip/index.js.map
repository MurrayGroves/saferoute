{"version":3,"sources":["../../../../src/components/popups/CustomTooltip/index.js"],"names":["React","PropTypes","useIntl","Tooltip","L","TooltipStyle","linterIgnoreTheseProps","CustomTooltip","props","vehicle","isTracked","allMarkers","getContent","offset","permanent","direction","intl","tooltipContent","dir","heading","propTypes","func","bool","string","object","defaultProps","Point"],"mappings":"AAAA;;AACA;AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,OAAT,QAAwB,YAAxB;AACA,SAASC,OAAT,QAAwB,eAAxB;AACA,OAAOC,CAAP,MAAc,SAAd;AAEA,SAASC,YAAT,QAA6B,WAA7B;AACA,SAASC,sBAAT,QAAuC,gBAAvC;AAEA;;AACA,eAAe,SAASC,aAAT,CAAuBC,KAAvB,EAA8B;AAC3C,MACEC,OADF,GAQID,KARJ,CACEC,OADF;AAAA,MAEEC,SAFF,GAQIF,KARJ,CAEEE,SAFF;AAAA,MAGEC,UAHF,GAQIH,KARJ,CAGEG,UAHF;AAAA,MAIEC,UAJF,GAQIJ,KARJ,CAIEI,UAJF;AAAA,MAKEC,MALF,GAQIL,KARJ,CAKEK,MALF;AAAA,MAMEC,SANF,GAQIN,KARJ,CAMEM,SANF;AAAA,MAOEC,SAPF,GAQIP,KARJ,CAOEO,SAPF;AASA,MAAMC,IAAI,GAAGd,OAAO,EAApB,CAV2C,CAY3C;;AACA,MAAIe,cAAc,GAAG,IAArB;;AACA,MAAIP,SAAS,IAAIC,UAAjB,EAA6B;AAC3BM,IAAAA,cAAc,GAAGL,UAAU,CAACH,OAAD,EAAUC,SAAV,EAAqBM,IAArB,CAA3B;AACD,GAhB0C,CAkB3C;;;AACA,MAAIE,GAAG,GAAGH,SAAV;;AACA,MAAIA,SAAS,KAAK,UAAlB,EAA8B;AAC5BG,IAAAA,GAAG,GAAG,KAAN;AACA,QAAIT,OAAO,KAAKA,OAAO,CAACU,OAAR,GAAkB,EAAlB,IAAwBV,OAAO,CAACU,OAAR,GAAkB,GAA/C,CAAX,EACED,GAAG,GAAG,QAAN;AACH;;AAED,SACED,cAAc,KACbP,SAAS,IAAIC,UADA,CAAd,iBAEE,oBAAC,OAAD;AAAS,IAAA,SAAS,EAAEG,SAApB;AAA+B,IAAA,SAAS,EAAEI,GAA1C;AAA+C,IAAA,MAAM,EAAEL;AAAvD,kBACE,oBAAC,YAAD,QAAeI,cAAf,CADF,CAHJ;AAQD;AAEDV,aAAa,CAACa,SAAd,GAA0B;AACxB;AACA;;AAEA;AACAR,EAAAA,UAAU,EAAEX,SAAS,CAACoB,IALE;;AAOxB;AACAX,EAAAA,SAAS,EAAET,SAAS,CAACqB,IARG;;AAUxB;AACAX,EAAAA,UAAU,EAAEV,SAAS,CAACqB,IAXE;;AAaxB;AACAR,EAAAA,SAAS,EAAEb,SAAS,CAACqB,IAdG;;AAgBxB;AACAP,EAAAA,SAAS,EAAEd,SAAS,CAACsB,MAjBG;;AAmBxB;AACAV,EAAAA,MAAM,EAAEZ,SAAS,CAACuB,MApBM,CAoBC;;AApBD,CAA1B;AAuBAjB,aAAa,CAACkB,YAAd,GAA6B;AAC3BhB,EAAAA,OAAO,EAAE,IADkB;AAE3BC,EAAAA,SAAS,EAAE,KAFgB;AAG3BC,EAAAA,UAAU,EAAE,KAHe;AAI3BC,EAAAA,UAAU,EAAE,oBAACH,OAAD,EAAUC,SAAV,EAAwB;AAClCJ,IAAAA,sBAAsB,CAACG,OAAD,EAAUC,SAAV,CAAtB;AACA,WAAO,IAAP;AACD,GAP0B;AAQ3BI,EAAAA,SAAS,EAAE,IARgB;AAS3BC,EAAAA,SAAS,EAAE,UATgB;AAU3BF,EAAAA,MAAM,EAAE,IAAIT,CAAC,CAACsB,KAAN,CAAY,CAAZ,EAAe,CAAf;AAVmB,CAA7B","sourcesContent":["// Removed as core-utils is typescripted. TODO: Remove when typescripting!\n/* eslint-disable react/forbid-prop-types */\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { useIntl } from \"react-intl\";\nimport { Tooltip } from \"react-leaflet\";\nimport L from \"leaflet\";\n\nimport { TooltipStyle } from \"../styled\";\nimport { linterIgnoreTheseProps } from \"../../../utils\";\n\n/** will show a (leaflet) map tooltip on a vehicle, with custom information (e.g. arrival data) */\nexport default function CustomTooltip(props) {\n  const {\n    vehicle,\n    isTracked,\n    allMarkers,\n    getContent,\n    offset,\n    permanent,\n    direction\n  } = props;\n  const intl = useIntl();\n\n  // note: only build tooltip content if we're about to render it on a tooltip\n  let tooltipContent = null;\n  if (isTracked || allMarkers) {\n    tooltipContent = getContent(vehicle, isTracked, intl);\n  }\n\n  // the custom \"rotation\" tooltip orientation is either top or bottom\n  let dir = direction;\n  if (direction === \"rotation\") {\n    dir = \"top\";\n    if (vehicle && (vehicle.heading < 80 || vehicle.heading > 280))\n      dir = \"bottom\";\n  }\n\n  return (\n    tooltipContent &&\n    (isTracked || allMarkers) && (\n      <Tooltip permanent={permanent} direction={dir} offset={offset}>\n        <TooltipStyle>{tooltipContent}</TooltipStyle>\n      </Tooltip>\n    )\n  );\n}\n\nCustomTooltip.propTypes = {\n  /** vehicle record - @see: core-utils/types/transitVehicleType */\n  // vehicle: coreUtils.types.transitVehicleType,\n\n  /** callback used to supply content of the tip (e.g, \"arrives in 5 minutes\") */\n  getContent: PropTypes.func,\n\n  /** indicate if this vehicle is being tracked, */\n  isTracked: PropTypes.bool,\n\n  /** control whether the tip goes on all markers or just the tracked marker */\n  allMarkers: PropTypes.bool,\n\n  /** is the tip always shown, or just shown on mouse hover */\n  permanent: PropTypes.bool,\n\n  /** placement: rotation (top/bot based on marker orientation), auto, left, right, top, bottom */\n  direction: PropTypes.string,\n\n  /** center of the marker, or some X,Y position in relation to the marker's center */\n  offset: PropTypes.object // eslint-disable-line react/forbid-prop-types\n};\n\nCustomTooltip.defaultProps = {\n  vehicle: null,\n  isTracked: false,\n  allMarkers: false,\n  getContent: (vehicle, isTracked) => {\n    linterIgnoreTheseProps(vehicle, isTracked);\n    return null;\n  },\n  permanent: true,\n  direction: \"rotation\",\n  offset: new L.Point(0, 0)\n};\n"],"file":"index.js"}