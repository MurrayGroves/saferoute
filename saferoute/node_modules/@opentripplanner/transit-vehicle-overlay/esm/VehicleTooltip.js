import React from "react";
import { FormattedMessage } from "react-intl";
import styled from "styled-components";
import defaultMessages from "./utils/default-messages";
import FormattedDurationWithSeconds from "./utils/formatted-duration-with-seconds";
var Title = styled.span.withConfig({
  displayName: "VehicleTooltip__Title",
  componentId: "sc-57cvce-0"
})(["font-size:110%;font-weight:bold;&::after{content:\"\";margin:0 0.125em;}"]);
export default function VehicleTooltip(_ref) {
  var vehicle = _ref.vehicle;
  var routeShortName = vehicle.routeShortName,
      routeType = vehicle.routeType,
      seconds = vehicle.seconds;
  var name = /*#__PURE__*/React.createElement(React.Fragment, null, routeShortName); // This condition avoids processing long route names such as "Portland Streetcar".

  if ((routeShortName === null || routeShortName === void 0 ? void 0 : routeShortName.length) <= 5) {
    name = routeType ?
    /*#__PURE__*/
    // This produces text such as "MAX Green", so don't localize.
    React.createElement(React.Fragment, null, "`$", routeType, " $", routeShortName, "`") : /*#__PURE__*/React.createElement(FormattedMessage, {
      defaultMessage: defaultMessages["otpUi.TransitVehicleOverlay.genericRouteFormat"],
      description: "Formats a route label",
      id: "otpUi.TransitVehicleOverlay.genericRouteFormat",
      values: {
        route: routeShortName
      }
    });
  }

  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Title, null, /*#__PURE__*/React.createElement(FormattedMessage, {
    defaultMessage: defaultMessages["otpUi.TransitVehicleOverlay.tooltipRouteLabel"],
    description: "Displays a route label in a tooltip",
    id: "otpUi.TransitVehicleOverlay.tooltipRouteLabel",
    values: {
      routeLabel: name
    }
  })), seconds && /*#__PURE__*/React.createElement(FormattedMessage, {
    defaultMessage: defaultMessages["otpUi.TransitVehicleOverlay.durationAgo"],
    description: "Text describing a past duration",
    id: "otpUi.TransitVehicleOverlay.durationAgo",
    values: {
      duration: /*#__PURE__*/React.createElement(FormattedDurationWithSeconds, {
        seconds: seconds
      })
    }
  }));
}
//# sourceMappingURL=VehicleTooltip.js.map