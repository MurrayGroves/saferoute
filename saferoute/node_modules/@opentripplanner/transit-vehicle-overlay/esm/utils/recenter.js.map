{"version":3,"sources":["../../src/utils/recenter.js"],"names":["useState","L","compareCoords","VIEW_RADIUS","recenterFlyTo","boundOptions","viewRadius","doRecenter","pause","coord","setCoord","onRecenterMap","map","lat","lon","newCoord","newBounds","latLng","toBounds","setTimeout","flyToBounds","recenterPanToOffset","panOffsetX","panOffsetY","panToOffset","recenterPanTo","panTo"],"mappings":"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","sourcesContent":["/**\n * various different strategies for moving the map when a tracked vehicle is moved\n * note, the 'offset' routine is for when you have something like a left nav hovering over your map,\n * and so the center of the map you like to use is offset from said left nav (e.g., true center\n * of the would be look skewed to the floating nav)\n *\n * About the 'doRecenter' parameter.  This boolean, when false, will not execute the map.panTo of\n * the tracked vehicle's coordinates.  Tracking a vehicle involves highlighting the vehicle on the\n * map, showing the pattern geometry of the vehicle and current progress along that pattern , and\n * optionally pan/zooms the map to that tracked vehicle.\n *\n * The 'doRecenter' param can be used to switch control the map.panTo on/off.  Once the\n * TransitVehicleOverlay component is mounted, the onRecenterMap (PropType.func) needs to be locked\n * in place, else Leaflet (or ReactLeaflet) throws a bunch of errors. So the doRecenter param to\n * this onRecenterMap function will control whether to map.panTo() or not call map.panTo().\n */\nimport { useState } from \"react\";\nimport L from \"leaflet\";\nimport { compareCoords } from \"./coordinates\";\n\nconst VIEW_RADIUS = 1000;\n\n/** callback used to fly (zoom) the map to some coordinates (e.g., selected vehicle) */\nexport function recenterFlyTo(\n  boundOptions,\n  viewRadius = VIEW_RADIUS,\n  doRecenter = true,\n  pause = 700\n) {\n  const [coord, setCoord] = useState([0, 0]);\n\n  // function that is being returned and able to be used to zoom to points\n  const onRecenterMap = (map, lat, lon) => {\n    const newCoord = [lat, lon];\n    if (doRecenter && !compareCoords(coord, newCoord)) {\n      setCoord(newCoord);\n      const newBounds = L.latLng(lat, lon).toBounds(viewRadius);\n      // note: there is a slight pause, so that other fetch then re-paint work can happen\n      setTimeout(() => {\n        if (map) map.flyToBounds(newBounds, boundOptions);\n      }, pause);\n    }\n  };\n  return onRecenterMap;\n}\n\n/** callback used to move the map to coordinates -- offsets of UI panes can be specified */\nexport function recenterPanToOffset(\n  panOffsetX = 0,\n  panOffsetY = 0,\n  doRecenter = true,\n  pause = 700\n) {\n  const [coord, setCoord] = useState([0, 0]);\n\n  // function that is being returned and able to be used to zoom to points\n  const onRecenterMap = (map, lat, lon) => {\n    const newCoord = [lat, lon];\n    if (doRecenter && !compareCoords(coord, newCoord)) {\n      setCoord(newCoord);\n      // note: there is a slight pause, so that other fetch then re-paint work can happen\n      setTimeout(() => {\n        if (map) map.panToOffset(newCoord, panOffsetX, panOffsetY);\n      }, pause);\n    }\n  };\n  return onRecenterMap;\n}\n\n/** callback used to move the map to some coordinates (e.g., selected vehicle) */\nexport function recenterPanTo(doRecenter = true, pause = 700) {\n  const [coord, setCoord] = useState([0, 0]);\n\n  // function that is being returned and able to be used to zoom to points\n  const onRecenterMap = (map, lat, lon) => {\n    const newCoord = [lat, lon];\n    if (doRecenter && !compareCoords(coord, newCoord)) {\n      setCoord(newCoord);\n      // note: there is a slight pause, so that other fetch then re-paint work can happen\n      setTimeout(() => {\n        if (map) map.panTo(newCoord);\n      }, pause);\n    }\n  };\n  return onRecenterMap;\n}\n"],"file":"recenter.js"}