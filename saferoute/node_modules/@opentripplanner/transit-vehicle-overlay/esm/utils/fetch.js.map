{"version":3,"sources":["../../src/utils/fetch.js"],"names":["DEFAULT_REFRESH_TIME","checkRefreshInteval","interval","defInterval","retVal","r","parseInt","handleHttpResponse","response","ok","Error","status","json","handleGlobalError","error","fetchRouteGeometry","config","id","fetch","host","path","agency","suffix","then","fetchVehicles","query","type","ids","length","join","defRoutes"],"mappings":";;;AAAA;AACA,IAAMA,oBAAoB,GAAG,IAA7B;AAEA;;AACA,OAAO,SAASC,mBAAT,CACLC,QADK,EAGL;AAAA,MADAC,WACA,uEADcH,oBACd;AACA,MAAII,MAAM,GAAGD,WAAb;;AACA,MAAID,QAAJ,EAAc;AACZ,QAAIG,CAAC,GAAGH,QAAR;AACA,QAAI,OAAOG,CAAP,KAAa,QAAjB,EAA2BA,CAAC,GAAGC,QAAQ,CAACD,CAAD,EAAI,EAAJ,CAAZ;AAC3B,QAAIA,CAAC,GAAG,CAAJ,IAASA,CAAC,IAAI,GAAlB,EAAuBA,CAAC,IAAI,IAAL;AACvB,QAAIA,CAAC,IAAI,IAAL,IAAaA,CAAC,IAAI,MAAtB,EAA8BD,MAAM,GAAGC,CAAT,CAA9B,KACKD,MAAM,GAAGD,WAAT;AACN;;AACD,SAAOC,MAAP;AACD;AAED,OAAO,IAAMG,kBAAkB,GAAG,SAArBA,kBAAqB,CAAAC,QAAQ,EAAI;AAC5C,MAAI,CAACA,QAAQ,CAACC,EAAd,EAAkB;AAChB;AACA,UAAM,IAAIC,KAAJ,6CAA+CF,QAAQ,CAACG,MAAxD,EAAN;AACD;AACD;AACF;AACA;AACA;;;AACE,SAAOH,QAAQ,CAACI,IAAT,EAAP;AACD,CAVM;AAYP,OAAO,IAAMC,iBAAiB,GAAG,SAApBA,iBAAoB,CAAAC,KAAK,EAAI;AACxC;AACF;AACA;AACA;AACE,QAAMA,KAAN;AACD,CANM;AAQP;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAMC,kBAAkB;AAAA,sEAAG,iBAAOC,MAAP,EAAeC,EAAf;AAAA;AAAA;AAAA;AAAA;AAAA,6CAChCC,KAAK,WAAIF,MAAM,CAACG,IAAX,SAAkBH,MAAM,CAACI,IAAzB,cAAiCJ,MAAM,CAACK,MAAxC,cAAkDJ,EAAlD,SAAuDD,MAAM,CAACM,MAA9D,EAAL,CACGC,IADH,CACQhB,kBADR,WAESM,iBAFT,CADgC;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAlBE,kBAAkB;AAAA;AAAA;AAAA,GAAxB;AAKP;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAMS,aAAa;AAAA,uEAAG,kBAAOR,MAAP,EAAeS,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA,8CAC3BP,KAAK,WACAF,MAAM,CAACG,IADP,SACcH,MAAM,CAACI,IADrB,cAC6BK,KAAK,CAACC,IADnC;AAED;AACAD,YAAAA,KAAK,CAACE,GAAN,CAAUC,MAAV,GAAmBH,KAAK,CAACE,GAAN,CAAUE,IAAV,EAAnB,GAAsCJ,KAAK,CAACK,SAH3C,EAAL,CAMGP,IANH,CAMQhB,kBANR,WAOSM,iBAPT,CAD2B;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAbW,aAAa;AAAA;AAAA;AAAA,GAAnB","sourcesContent":["/** utility helper functions used alongside proprietary web service calls / data fetch routines */\nconst DEFAULT_REFRESH_TIME = 7000;\n\n/** get refresh values (default 7 second abs), and convert from secs to millisecs */\nexport function checkRefreshInteval(\n  interval,\n  defInterval = DEFAULT_REFRESH_TIME\n) {\n  let retVal = defInterval;\n  if (interval) {\n    let r = interval;\n    if (typeof r === \"string\") r = parseInt(r, 10);\n    if (r > 0 && r <= 100) r *= 1000;\n    if (r >= 1000 && r <= 100000) retVal = r;\n    else retVal = defInterval;\n  }\n  return retVal;\n}\n\nexport const handleHttpResponse = response => {\n  if (!response.ok) {\n    /* TODO: Is there anything special we want to do with server side errors? */\n    throw new Error(`Error fetching data. Status code: ${response.status}`);\n  }\n  /*\n    TODO: TriMet services bubble up their own error messages from time to time\n    and we'll want to grab those inside the `errorMessage` property\n  */\n  return response.json();\n};\n\nexport const handleGlobalError = error => {\n  /*\n      TODO: More descriptive error handling here...\n      maybe dispatch error event, display error message dialog\n    */\n  throw error;\n};\n\n/**\n * get linestring examples (using either pattern id or trip id):\n *\n * https://newplanner.trimet.org/ws/ti/v0/index/patterns/TRIMET:440496/geometry/geojson\n * or\n * https://newplanner.trimet.org/ws/ti/v0/index/patterns/trip/TRIMET:440496/geometry/geojson\n */\nexport const fetchRouteGeometry = async (config, id) =>\n  fetch(`${config.host}${config.path}/${config.agency}:${id}${config.suffix}`)\n    .then(handleHttpResponse)\n    .catch(handleGlobalError);\n\n/**\n * get vehicle positions -- example\n * https://maps.trimet.org/gtfs/rt/vehicles/routes/100\n * or\n * https://developer.trimet.org/ws/v2/vehicles/appid/12A1B6835DC871375825C3AD1/routes/100\n */\nexport const fetchVehicles = async (config, query) =>\n  fetch(\n    `${config.host}${config.path}/${query.type}/${\n      /* eslint-disable prefer-template */\n      query.ids.length ? query.ids.join() : query.defRoutes\n    }`\n  )\n    .then(handleHttpResponse)\n    .catch(handleGlobalError);\n"],"file":"fetch.js"}