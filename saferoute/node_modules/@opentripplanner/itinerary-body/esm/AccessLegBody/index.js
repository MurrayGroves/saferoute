import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _inherits from "@babel/runtime/helpers/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

import coreUtils from "@opentripplanner/core-utils";
import React, { Component } from "react";
import PropTypes from "prop-types";
import { VelocityTransitionGroup } from "velocity-react";
import AccessLegSteps from "./access-leg-steps";
import AccessLegSummary from "./access-leg-summary";
import LegDiagramPreview from "./leg-diagram-preview";
import MapillaryButton from "./mapillary-button";
import RentedVehicleSubheader from "./rented-vehicle-subheader";
import * as Styled from "../styled";
import TNCLeg from "./tnc-leg";
/**
 * Component for access (e.g. walk/bike/etc.) leg in narrative itinerary. This
 * particular component is used in the line-itin (i.e., trimet-mod-otp) version
 * of the narrative itinerary.
 */

var AccessLegBody = /*#__PURE__*/function (_Component) {
  _inherits(AccessLegBody, _Component);

  var _super = _createSuper(AccessLegBody);

  function AccessLegBody(props) {
    var _this;

    _classCallCheck(this, AccessLegBody);

    _this = _super.call(this, props);

    _this.onStepsHeaderClick = function () {
      var expanded = _this.state.expanded;

      _this.setState({
        expanded: !expanded
      });
    };

    _this.onSummaryClick = function () {
      var _this$props = _this.props,
          leg = _this$props.leg,
          legIndex = _this$props.legIndex,
          setActiveLeg = _this$props.setActiveLeg;
      setActiveLeg(legIndex, leg);
    };

    _this.state = {
      expanded: false
    };
    return _this;
  }

  _createClass(AccessLegBody, [{
    key: "render",
    value: function render() {
      var _this$props2 = this.props,
          config = _this$props2.config,
          diagramVisible = _this$props2.diagramVisible,
          followsTransit = _this$props2.followsTransit,
          leg = _this$props2.leg,
          LegIcon = _this$props2.LegIcon,
          mapillaryCallback = _this$props2.mapillaryCallback,
          mapillaryKey = _this$props2.mapillaryKey,
          setLegDiagram = _this$props2.setLegDiagram,
          showElevationProfile = _this$props2.showElevationProfile,
          showLegIcon = _this$props2.showLegIcon,
          timeOptions = _this$props2.timeOptions;
      var expanded = this.state.expanded;

      if (leg.mode === "CAR" && leg.hailedCar) {
        return /*#__PURE__*/React.createElement(TNCLeg, {
          config: config,
          followsTransit: followsTransit,
          leg: leg,
          LegIcon: LegIcon,
          onSummaryClick: this.onSummaryClick,
          showLegIcon: showLegIcon,
          timeOptions: timeOptions
        });
      }

      return /*#__PURE__*/React.createElement(React.Fragment, null, leg && (leg.rentedVehicle || leg.rentedBike || leg.rentedCar) && /*#__PURE__*/React.createElement(RentedVehicleSubheader, {
        config: config,
        leg: leg
      }), /*#__PURE__*/React.createElement(Styled.LegBody, null, /*#__PURE__*/React.createElement(AccessLegSummary, {
        config: config,
        leg: leg,
        LegIcon: LegIcon,
        onSummaryClick: this.onSummaryClick,
        showLegIcon: showLegIcon
      }), /*#__PURE__*/React.createElement(Styled.StepsHeader, {
        "aria-expanded": expanded,
        onClick: this.onStepsHeaderClick
      }, coreUtils.time.formatDuration(leg.duration), leg.steps && /*#__PURE__*/React.createElement("span", null, " ", /*#__PURE__*/React.createElement(Styled.CaretToggle, {
        expanded: expanded
      }))), /*#__PURE__*/React.createElement(MapillaryButton, {
        coords: leg.from,
        clickCallback: mapillaryCallback,
        mapillaryKey: mapillaryKey,
        padTop: true
      }), /*#__PURE__*/React.createElement(LegDiagramPreview, {
        diagramVisible: diagramVisible,
        leg: leg,
        setLegDiagram: setLegDiagram,
        showElevationProfile: showElevationProfile
      }), /*#__PURE__*/React.createElement(VelocityTransitionGroup, {
        enter: {
          animation: "slideDown"
        },
        leave: {
          animation: "slideUp"
        }
      }, expanded && /*#__PURE__*/React.createElement(AccessLegSteps, {
        steps: leg.steps,
        mapillaryCallback: mapillaryCallback,
        mapillaryKey: mapillaryKey
      }))));
    }
  }]);

  return AccessLegBody;
}(Component);

AccessLegBody.propTypes = {
  config: coreUtils.types.configType.isRequired,

  /**
   * Should be either null or a legType. Indicates that a particular leg diagram
   * has been selected and is active.
   */
  diagramVisible: coreUtils.types.legType,
  followsTransit: PropTypes.bool,
  leg: coreUtils.types.legType.isRequired,
  LegIcon: PropTypes.elementType.isRequired,
  legIndex: PropTypes.number.isRequired,
  mapillaryCallback: PropTypes.func,
  mapillaryKey: PropTypes.string,
  setActiveLeg: PropTypes.func.isRequired,
  setLegDiagram: PropTypes.func.isRequired,
  showElevationProfile: PropTypes.bool.isRequired,
  showLegIcon: PropTypes.bool.isRequired,
  timeOptions: coreUtils.types.timeOptionsType
};
AccessLegBody.defaultProps = {
  diagramVisible: null,
  followsTransit: false,
  mapillaryCallback: null,
  mapillaryKey: null,
  timeOptions: null
};
export default AccessLegBody;
export { AccessLegSteps, AccessLegSummary, LegDiagramPreview, RentedVehicleSubheader, Styled, TNCLeg };
//# sourceMappingURL=index.js.map