import coreUtils from "@opentripplanner/core-utils";
import React from "react";
import * as Styled from "../styled";
/**
 * A component to display vehicle rental data. The word "Vehicle" has been used
 * because a future refactor is intended to combine car rental, bike rental
 * and micromobility rental all within this component. The future refactor is
 * assuming that the leg.rentedCar and leg.rentedBike response elements from OTP
 * will eventually be merged into the leg.rentedVehicle element.
 */

export default function RentedVehicleSubheader(_ref) {
  var config = _ref.config,
      leg = _ref.leg;
  var configCompanies = config.companies || []; // Sometimes rented vehicles can be walked over things like stairs or other
  // ways that forbid the main mode of travel.

  if (leg.mode === "WALK") {
    return /*#__PURE__*/React.createElement(Styled.PlaceSubheader, null, /*#__PURE__*/React.createElement("span", null, "Walk vehicle along ", leg.from.name));
  }

  var rentalDescription;

  if (leg.rentedBike) {
    // TODO: Special case for TriMet may need to be refactored.
    rentalDescription = "Pick up shared bike";
  } else {
    // Add company and vehicle labels.
    var companyName = "";
    var vehicleName = ""; // TODO allow more flexibility in customizing these mode strings

    var modeString = leg.rentedVehicle ? "E-scooter" : leg.rentedBike ? "bike" : "car"; // The networks attribute of the from data will only appear at the very
    // beginning of the rental. It is possible that there will be some forced
    // walking that occurs in the middle of the rental, so once the main mode
    // resumes there won't be any network info. In that case we simply return
    // that the rental is continuing.

    if (leg.from.networks) {
      companyName = coreUtils.itinerary.getCompaniesLabelFromNetworks(leg.from.networks, configCompanies); // Only show vehicle name for car rentals. For bikes and E-scooters, these
      // IDs/names tend to be less relevant (or entirely useless) in this context.

      if (leg.rentedCar && leg.from.name) {
        vehicleName = leg.from.name;
      }

      modeString = coreUtils.itinerary.getModeForPlace(leg.from);
      rentalDescription = "Pick up ".concat(companyName, " ").concat(modeString, " ").concat(vehicleName);
    } else {
      rentalDescription = "Continue using rental";
    }
  } // e.g., Pick up REACHNOW rented car XYZNDB OR
  //       Pick up SPIN E-scooter
  //       Pick up shared bike


  return /*#__PURE__*/React.createElement(Styled.PlaceSubheader, null, rentalDescription);
}
RentedVehicleSubheader.propTypes = {
  config: coreUtils.types.configType.isRequired,
  leg: coreUtils.types.legType.isRequired
};
//# sourceMappingURL=rented-vehicle-subheader.js.map