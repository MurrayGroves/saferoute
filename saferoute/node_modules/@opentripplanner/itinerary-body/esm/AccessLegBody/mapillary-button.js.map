{"version":3,"sources":["../../src/AccessLegBody/mapillary-button.tsx"],"names":["React","useEffect","useState","styled","StreetView","generateBoundingBoxFromCoordinate","lat","lon","WINDOW","south","north","west","east","Container","a","props","padTop","padLeft","Icon","MapillaryButton","clickCallback","coords","mapillaryKey","imageId","setImageId","getMapillaryId","bounds","join","fetch","raw","json","data","length","id","handleClick","window","open","paddingBottom"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\nimport { StreetView } from \"@styled-icons/fa-solid\";\n\n/**\n * Helper method to generate bounding box from a location. Adding the WINDOW to the coordinate\n * creates a bounding box of approximately 1 meter around the coordinate, which is likely to\n * encompass any imagery available.\n * @param coord     The coordinate to convert to a bounding box\n * @returns         A bounding box 1 meter around the passed coordinate\n */\nconst generateBoundingBoxFromCoordinate = ({\n  lat,\n  lon\n}: {\n  lat: number;\n  lon: number;\n}) => {\n  const WINDOW = 0.000075;\n  const south = lat - WINDOW;\n  const north = lat + WINDOW;\n  const west = lon - WINDOW;\n  const east = lon + WINDOW;\n  return [west, south, east, north];\n};\n\nconst Container = styled.a<{ padLeft?: boolean; padTop?: boolean }>`\n  display: inline-block;\n  margin-top: ${props => (props.padTop ? \"10px\" : \"0\")};\n\n  &:hover {\n    cursor: pointer;\n    text-decoration: none;\n  }\n\n  &:active {\n    color: #111;\n  }\n\n  &::before {\n    content: \"| \";\n    cursor: auto;\n    margin-left: ${props => (props.padLeft ? \"1ch\" : \"0\")};\n  }\n`;\n\nconst Icon = styled(StreetView)`\n  height: 16px;\n  padding-left: 2px;\n`;\n\n/**\n * A component which shows a \"street view\" button if a Mapillary image is available for a\n * passed coordinate\n *\n * @param coords        The coordinates to find imagery for in the format [lat, lon]\n * @param mapillaryKey  A Mapillary api key used to check for imagery.\n * @param padTop        Whether to add padding to the top of the container.\n * @param clickCallback A method to fire when the button is clicked, which accepts an ID.\n *  If it is not passsed, a popup window will be opened. */\nconst MapillaryButton = ({\n  clickCallback,\n  coords,\n  mapillaryKey,\n  padLeft,\n  padTop\n}: {\n  clickCallback?: (id: string) => void;\n  coords: { lat: number; lon: number };\n  mapillaryKey: string;\n  padLeft?: boolean;\n  padTop?: boolean;\n}): JSX.Element => {\n  const [imageId, setImageId] = useState(null);\n\n  useEffect(() => {\n    // useEffect only supports async actions as a child function\n    const getMapillaryId = async () => {\n      const bounds = generateBoundingBoxFromCoordinate(coords).join(\",\");\n      const raw = await fetch(\n        `https://graph.mapillary.com/images?fields=id&limit=1&access_token=${mapillaryKey}&bbox=${bounds}`\n      );\n      const json = await raw.json();\n      if (json?.data?.length > 0) {\n        setImageId(json.data[0].id);\n      }\n    };\n\n    if (!imageId && !!mapillaryKey) getMapillaryId();\n  }, [coords]);\n\n  const handleClick = () => {\n    if (clickCallback) clickCallback(imageId);\n    else {\n      window.open(\n        `https://www.mapillary.com/embed?image_key=${imageId}`,\n        \"_blank\",\n        \"location=no,height=600,width=600,scrollbars=no,status=no\"\n      );\n    }\n  };\n\n  if (!imageId) return null;\n  return (\n    <Container\n      onClick={handleClick}\n      padLeft={padLeft}\n      padTop={padTop}\n      title=\"Show street imagery at this location\"\n    >\n      <Icon style={{ paddingBottom: 1 }} />\n    </Container>\n  );\n};\n\nexport default MapillaryButton;\n"],"file":"mapillary-button.js"}