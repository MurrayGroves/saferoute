{"version":3,"sources":["../../src/AccessLegBody/leg-diagram-preview.js"],"names":["coreUtils","PropTypes","React","Component","ReactResizeDetector","Styled","METERS_TO_FEET","generateSvg","profile","width","height","ptArr","points","traversed","minElev","maxElev","pts","map","pt","x","y","join","LegDiagramPreview","props","onResize","setState","isActive","diagramVisible","leg","startTime","onExpandClick","setLegDiagram","formatElevation","elev","Math","round","state","showElevationProfile","itinerary","getElevationProfile","steps","distance","mode","gain","loss","length","propTypes","types","legType","isRequired","func","bool","defaultProps"],"mappings":"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","sourcesContent":["import coreUtils from \"@opentripplanner/core-utils\";\nimport PropTypes from \"prop-types\";\nimport React, { Component } from \"react\";\nimport ReactResizeDetector from \"react-resize-detector\";\n\nimport * as Styled from \"../styled\";\n\nconst METERS_TO_FEET = 3.28084;\n\nfunction generateSvg(profile, width) {\n  const height = 30;\n  const { points: ptArr, traversed } = profile;\n  let { minElev, maxElev } = profile;\n  // Pad the min-max range by 25m on either side\n  minElev -= 25;\n  maxElev += 25;\n\n  // Transform the point array and store it as an SVG-ready string\n  const pts = ptArr\n    .map(pt => {\n      const x = (pt[0] / traversed) * width;\n      const y = height - (height * (pt[1] - minElev)) / (maxElev - minElev);\n      return `${x},${y}`;\n    })\n    .join(\" \");\n\n  // Render the SVG\n  return (\n    <svg height={height} width={width}>\n      <polyline points={pts} fill=\"none\" stroke=\"black\" strokeWidth={1.3} />\n    </svg>\n  );\n}\n\nclass LegDiagramPreview extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { width: null };\n  }\n\n  onResize = width => {\n    if (width > 0) {\n      this.setState({ width });\n    }\n  };\n\n  /**\n   * Determine if the diagram currently visible is for this leg (based on start\n   * time).\n   */\n  isActive = () => {\n    const { diagramVisible, leg } = this.props;\n    return diagramVisible && diagramVisible.startTime === leg.startTime;\n  };\n\n  onExpandClick = () => {\n    const { leg, setLegDiagram } = this.props;\n    if (this.isActive()) setLegDiagram(null);\n    else setLegDiagram(leg);\n  };\n\n  /** Round elevation to whole number and add symbol. */\n  formatElevation = elev => `${Math.round(elev)}'`;\n\n  render() {\n    const { leg, showElevationProfile } = this.props;\n    const { width } = this.state;\n    if (!showElevationProfile) return null;\n    const profile = coreUtils.itinerary.getElevationProfile(leg.steps);\n    // Don't show for very short legs\n    if (leg.distance < 500 || leg.mode === \"CAR\") return null;\n\n    return (\n      <Styled.PreviewContainer active={this.isActive()}>\n        {/* The preview elevation SVG */}\n        {/* eslint-disable-next-line */}\n        <Styled.PreviewDiagram\n          tabIndex=\"0\"\n          title=\"Toggle elevation chart\"\n          role=\"button\"\n          onClick={this.onExpandClick}\n        >\n          <Styled.PreviewDiagramTitle>\n            Elevation chart{\" \"}\n            <Styled.PreviewDiagramElevationGain>\n              ↑{this.formatElevation(profile.gain * METERS_TO_FEET)}\n              {\"  \"}\n            </Styled.PreviewDiagramElevationGain>\n            <Styled.PreviewDiagramElevationLoss>\n              ↓{this.formatElevation(-profile.loss * METERS_TO_FEET)}\n            </Styled.PreviewDiagramElevationLoss>\n          </Styled.PreviewDiagramTitle>\n          {profile.points.length > 0\n            ? generateSvg(profile, width)\n            : \"No elevation data available.\"}\n          <ReactResizeDetector handleWidth onResize={this.onResize} />\n        </Styled.PreviewDiagram>\n      </Styled.PreviewContainer>\n    );\n  }\n}\n\nLegDiagramPreview.propTypes = {\n  diagramVisible: coreUtils.types.legType,\n  leg: coreUtils.types.legType.isRequired,\n  setLegDiagram: PropTypes.func.isRequired,\n  showElevationProfile: PropTypes.bool.isRequired\n};\n\nLegDiagramPreview.defaultProps = {\n  diagramVisible: null\n};\n\nexport default LegDiagramPreview;\n"],"file":"leg-diagram-preview.js"}