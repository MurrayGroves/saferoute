import currencyFormatter from "currency-formatter";
import coreUtils from "@opentripplanner/core-utils";
import React from "react";
import PropTypes from "prop-types";
import AccessLegSummary from "./access-leg-summary";
import * as Styled from "../styled";
export default function TNCLeg(_ref) {
  var config = _ref.config,
      LYFT_CLIENT_ID = _ref.LYFT_CLIENT_ID,
      UBER_CLIENT_ID = _ref.UBER_CLIENT_ID,
      followsTransit = _ref.followsTransit,
      leg = _ref.leg,
      LegIcon = _ref.LegIcon,
      onSummaryClick = _ref.onSummaryClick,
      showLegIcon = _ref.showLegIcon,
      timeOptions = _ref.timeOptions;
  var universalLinks = {
    UBER: "https://m.uber.com/".concat(coreUtils.ui.isMobile() ? "ul/" : "", "?client_id=").concat(UBER_CLIENT_ID, "&action=setPickup&pickup[latitude]=").concat(leg.from.lat, "&pickup[longitude]=").concat(leg.from.lon, "&pickup[formatted_address]=").concat(encodeURI(leg.from.name), "&dropoff[latitude]=").concat(leg.to.lat, "&dropoff[longitude]=").concat(leg.to.lon, "&dropoff[formatted_address]=").concat(encodeURI(leg.to.name)),
    LYFT: "https://lyft.com/ride?id=lyft&partner=".concat(LYFT_CLIENT_ID, "&pickup[latitude]=").concat(leg.from.lat, "&pickup[longitude]=").concat(leg.from.lon, "&destination[latitude]=").concat(leg.to.lat, "&destination[longitude]=").concat(leg.to.lon)
  };
  var tncData = leg.tncData;
  if (!tncData || !tncData.estimatedArrival) return null;
  return /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement(Styled.PlaceSubheader, null, "Wait", " ", !followsTransit && /*#__PURE__*/React.createElement("span", null, Math.round(tncData.estimatedArrival / 60), " minutes "), "for ", tncData.displayName, " pickup"), /*#__PURE__*/React.createElement(Styled.LegBody, null, /*#__PURE__*/React.createElement(AccessLegSummary, {
    config: config,
    leg: leg,
    LegIcon: LegIcon,
    onSummaryClick: onSummaryClick,
    showLegIcon: showLegIcon
  }), /*#__PURE__*/React.createElement(Styled.BookTNCRideButtonContainer, null, /*#__PURE__*/React.createElement(Styled.BookTNCRideButton, {
    href: universalLinks[tncData.company],
    target: coreUtils.ui.isMobile() ? "_self" : "_blank"
  }, "Book Ride"), followsTransit && /*#__PURE__*/React.createElement(Styled.BookLaterPointer, null), followsTransit && /*#__PURE__*/React.createElement(Styled.BookLaterContainer, null, /*#__PURE__*/React.createElement(Styled.BookLaterInnerContainer, null, /*#__PURE__*/React.createElement(Styled.BookLaterText, null, "Wait until", " ", coreUtils.time.formatTime(leg.startTime - tncData.estimatedArrival * 1000, timeOptions), " ", "to book")))), /*#__PURE__*/React.createElement(Styled.TNCTravelTime, null, "Estimated travel time: ", coreUtils.time.formatDuration(leg.duration), " ", "(does not account for traffic)"), tncData.minCost && /*#__PURE__*/React.createElement(Styled.TNCCost, null, "Estimated cost:", " ", "".concat(currencyFormatter.format(tncData.minCost, {
    code: tncData.currency
  }), " - ").concat(currencyFormatter.format(tncData.maxCost, {
    code: tncData.currency
  })))));
}
TNCLeg.propTypes = {
  config: coreUtils.types.configType.isRequired,
  LYFT_CLIENT_ID: PropTypes.string,
  UBER_CLIENT_ID: PropTypes.string,
  followsTransit: PropTypes.bool.isRequired,
  leg: coreUtils.types.legType.isRequired,
  LegIcon: PropTypes.elementType.isRequired,
  onSummaryClick: PropTypes.func.isRequired,
  showLegIcon: PropTypes.bool.isRequired,
  timeOptions: coreUtils.types.timeOptionsType
};
TNCLeg.defaultProps = {
  LYFT_CLIENT_ID: "",
  UBER_CLIENT_ID: "",
  timeOptions: null
};
//# sourceMappingURL=tnc-leg.js.map