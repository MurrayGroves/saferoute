{"version":3,"sources":["../../src/AccessLegBody/tnc-leg.js"],"names":["currencyFormatter","coreUtils","React","PropTypes","AccessLegSummary","Styled","TNCLeg","config","LYFT_CLIENT_ID","UBER_CLIENT_ID","followsTransit","leg","LegIcon","onSummaryClick","showLegIcon","timeOptions","universalLinks","UBER","ui","isMobile","from","lat","lon","encodeURI","name","to","LYFT","tncData","estimatedArrival","Math","round","displayName","company","time","formatTime","startTime","formatDuration","duration","minCost","format","code","currency","maxCost","propTypes","types","configType","isRequired","string","bool","legType","elementType","func","timeOptionsType","defaultProps"],"mappings":"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","sourcesContent":["import currencyFormatter from \"currency-formatter\";\nimport coreUtils from \"@opentripplanner/core-utils\";\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport AccessLegSummary from \"./access-leg-summary\";\nimport * as Styled from \"../styled\";\n\nexport default function TNCLeg({\n  config,\n  LYFT_CLIENT_ID,\n  UBER_CLIENT_ID,\n  followsTransit,\n  leg,\n  LegIcon,\n  onSummaryClick,\n  showLegIcon,\n  timeOptions\n}) {\n  const universalLinks = {\n    UBER: `https://m.uber.com/${\n      coreUtils.ui.isMobile() ? \"ul/\" : \"\"\n    }?client_id=${UBER_CLIENT_ID}&action=setPickup&pickup[latitude]=${\n      leg.from.lat\n    }&pickup[longitude]=${leg.from.lon}&pickup[formatted_address]=${encodeURI(\n      leg.from.name\n    )}&dropoff[latitude]=${leg.to.lat}&dropoff[longitude]=${\n      leg.to.lon\n    }&dropoff[formatted_address]=${encodeURI(leg.to.name)}`,\n    LYFT: `https://lyft.com/ride?id=lyft&partner=${LYFT_CLIENT_ID}&pickup[latitude]=${leg.from.lat}&pickup[longitude]=${leg.from.lon}&destination[latitude]=${leg.to.lat}&destination[longitude]=${leg.to.lon}`\n  };\n  const { tncData } = leg;\n\n  if (!tncData || !tncData.estimatedArrival) return null;\n  return (\n    <div>\n      <Styled.PlaceSubheader>\n        Wait{\" \"}\n        {!followsTransit && (\n          <span>{Math.round(tncData.estimatedArrival / 60)} minutes </span>\n        )}\n        for {tncData.displayName} pickup\n      </Styled.PlaceSubheader>\n\n      <Styled.LegBody>\n        {/* The icon/summary row */}\n        <AccessLegSummary\n          config={config}\n          leg={leg}\n          LegIcon={LegIcon}\n          onSummaryClick={onSummaryClick}\n          showLegIcon={showLegIcon}\n        />\n\n        {/* The \"Book Ride\" button */}\n        <Styled.BookTNCRideButtonContainer>\n          <Styled.BookTNCRideButton\n            href={universalLinks[tncData.company]}\n            target={coreUtils.ui.isMobile() ? \"_self\" : \"_blank\"}\n          >\n            Book Ride\n          </Styled.BookTNCRideButton>\n          {followsTransit && <Styled.BookLaterPointer />}\n          {followsTransit && (\n            <Styled.BookLaterContainer>\n              <Styled.BookLaterInnerContainer>\n                <Styled.BookLaterText>\n                  Wait until{\" \"}\n                  {coreUtils.time.formatTime(\n                    leg.startTime - tncData.estimatedArrival * 1000,\n                    timeOptions\n                  )}{\" \"}\n                  to book\n                </Styled.BookLaterText>\n              </Styled.BookLaterInnerContainer>\n            </Styled.BookLaterContainer>\n          )}\n        </Styled.BookTNCRideButtonContainer>\n\n        {/* The estimated travel time */}\n        <Styled.TNCTravelTime>\n          Estimated travel time: {coreUtils.time.formatDuration(leg.duration)}{\" \"}\n          (does not account for traffic)\n        </Styled.TNCTravelTime>\n\n        {/* The estimated travel cost */}\n        {tncData.minCost && (\n          <Styled.TNCCost>\n            Estimated cost:{\" \"}\n            {`${currencyFormatter.format(tncData.minCost, {\n              code: tncData.currency\n            })} - ${currencyFormatter.format(tncData.maxCost, {\n              code: tncData.currency\n            })}`}\n          </Styled.TNCCost>\n        )}\n      </Styled.LegBody>\n    </div>\n  );\n}\n\nTNCLeg.propTypes = {\n  config: coreUtils.types.configType.isRequired,\n  LYFT_CLIENT_ID: PropTypes.string,\n  UBER_CLIENT_ID: PropTypes.string,\n  followsTransit: PropTypes.bool.isRequired,\n  leg: coreUtils.types.legType.isRequired,\n  LegIcon: PropTypes.elementType.isRequired,\n  onSummaryClick: PropTypes.func.isRequired,\n  showLegIcon: PropTypes.bool.isRequired,\n  timeOptions: coreUtils.types.timeOptionsType\n};\n\nTNCLeg.defaultProps = {\n  LYFT_CLIENT_ID: \"\",\n  UBER_CLIENT_ID: \"\",\n  timeOptions: null\n};\n"],"file":"tnc-leg.js"}