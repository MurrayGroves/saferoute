{"version":3,"sources":["../../src/stories/itinerary-body-defaults-wrapper.js"],"names":["coreUtils","TriMetLegIcon","PropTypes","React","Component","action","ItineraryBody","DefaultLineColumnContent","DefaultPlaceName","DefaultRouteDescription","DefaultTransitLegSummary","StyledItineraryBody","OtpRRStyledItineraryBody","config","require","ItineraryBodyDefaultsWrapper","setLegDiagram","leg","setState","diagramVisible","state","props","itinerary","LegIcon","LineColumnContent","PlaceName","RouteDescription","showAgencyInfo","showLegIcon","showMapButtonColumn","showRouteFares","showViewTripButton","styledItinerary","TimeColumnContent","toRouteAbbreviation","TransitLegSubheader","TransitLegSummary","AlertToggleIcon","AlertBodyIcon","ItineraryBodyComponent","propTypes","types","itineraryType","isRequired","elementType","bool","string","func","defaultProps","undefined","r","toString","substr"],"mappings":";;;;;;;;;;AAAA,OAAOA,SAAP,MAAsB,6BAAtB;AACA,SAASC,aAAT,QAA8B,wBAA9B;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,MAAT,QAAuB,0BAAvB;AAEA,OAAOC,aAAP,MAA0B,IAA1B;AACA,OAAOC,wBAAP,MAAqC,iCAArC;AACA,OAAOC,gBAAP,MAA6B,wBAA7B;AACA,OAAOC,uBAAP,MAAoC,+BAApC;AACA,OAAOC,wBAAP,MAAqC,iCAArC;AACA,SAASC,mBAAT,QAAoC,UAApC;AACA,OAAOC,wBAAP,MAAqC,mCAArC;;AAEA,IAAMC,MAAM,GAAGC,OAAO,CAAC,0BAAD,CAAtB;;IAEqBC,4B;;;;;AACnB,0CAAc;AAAA;;AAAA;;AACZ;;AADY,UAKdC,aALc,GAKE,UAAAC,GAAG,EAAI;AACrB,YAAKC,QAAL,CAAc;AAAEC,QAAAA,cAAc,EAAEF;AAAlB,OAAd;AACD,KAPa;;AAEZ,UAAKG,KAAL,GAAa,EAAb;AAFY;AAGb;;;;WAMD,kBAAS;AACP,wBAkBI,KAAKC,KAlBT;AAAA,UACEC,SADF,eACEA,SADF;AAAA,UAEEC,OAFF,eAEEA,OAFF;AAAA,UAGEC,iBAHF,eAGEA,iBAHF;AAAA,UAIEC,SAJF,eAIEA,SAJF;AAAA,UAKEC,gBALF,eAKEA,gBALF;AAAA,UAMEC,cANF,eAMEA,cANF;AAAA,UAOEC,WAPF,eAOEA,WAPF;AAAA,UAQEC,mBARF,eAQEA,mBARF;AAAA,UASEC,cATF,eASEA,cATF;AAAA,UAUEC,kBAVF,eAUEA,kBAVF;AAAA,UAWEC,eAXF,eAWEA,eAXF;AAAA,UAYEC,iBAZF,eAYEA,iBAZF;AAAA,UAaEC,mBAbF,eAaEA,mBAbF;AAAA,UAcEC,mBAdF,eAcEA,mBAdF;AAAA,UAeEC,iBAfF,eAeEA,iBAfF;AAAA,UAgBEC,eAhBF,eAgBEA,eAhBF;AAAA,UAiBEC,aAjBF,eAiBEA,aAjBF;AAmBA,UAAQnB,cAAR,GAA2B,KAAKC,KAAhC,CAAQD,cAAR;AACA,UAAIoB,sBAAJ;;AACA,cAAQP,eAAR;AACE,aAAK,WAAL;AACEO,UAAAA,sBAAsB,GAAG5B,mBAAzB;AACA;;AACF,aAAK,QAAL;AACE4B,UAAAA,sBAAsB,GAAG3B,wBAAzB;AACA;;AACF;AACE2B,UAAAA,sBAAsB,GAAGjC,aAAzB;AARJ;;AAUA,0BACE,oBAAC,sBAAD;AACE,QAAA,MAAM,EAAEO,MADV;AAEE,QAAA,cAAc,EAAEM,cAFlB;AAGE,QAAA,QAAQ,EAAEd,MAAM,CAAC,UAAD,CAHlB;AAIE,QAAA,SAAS,EAAEiB,SAJb;AAKE,QAAA,OAAO,EAAEC,OALX;AAME,QAAA,iBAAiB,EAAEC,iBAAiB,IAAIjB,wBAN1C;AAOE,QAAA,YAAY,EAAC,wDAPf;AAQE,QAAA,SAAS,EAAEkB,SAAS,IAAIjB,gBAR1B;AASE,QAAA,gBAAgB,EAAEkB,gBAAgB,IAAIjB,uBATxC;AAUE,QAAA,WAAW,EAAC,WAVd;AAWE,QAAA,YAAY,EAAEJ,MAAM,CAAC,cAAD,CAXtB;AAYE,QAAA,aAAa,EAAE,KAAKW,aAZtB;AAaE,QAAA,aAAa,EAAEX,MAAM,CAAC,eAAD,CAbvB;AAcE,QAAA,cAAc,EAAEsB,cAdlB;AAeE,QAAA,oBAAoB,MAftB;AAgBE,QAAA,WAAW,EAAEC,WAhBf;AAiBE,QAAA,mBAAmB,EAAEC,mBAjBvB;AAkBE,QAAA,cAAc,EAAEC,cAlBlB;AAmBE,QAAA,kBAAkB,EAAEC,kBAnBtB;AAoBE,QAAA,iBAAiB,EAAEE,iBApBrB;AAqBE,QAAA,mBAAmB,EAAEC,mBArBvB;AAsBE,QAAA,mBAAmB,EAAEC,mBAtBvB;AAuBE,QAAA,iBAAiB,EAAEC,iBAAiB,IAAI1B,wBAvB1C;AAwBE,QAAA,eAAe,EAAE2B,eAxBnB;AAyBE,QAAA,aAAa,EAAEC;AAzBjB,QADF;AA6BD;;;;EAvEuDlC,S;;SAArCW,4B;AA0ErBA,4BAA4B,CAACyB,SAA7B,GAAyC;AACvClB,EAAAA,SAAS,EAAEtB,SAAS,CAACyC,KAAV,CAAgBC,aAAhB,CAA8BC,UADF;AAEvCpB,EAAAA,OAAO,EAAErB,SAAS,CAAC0C,WAFoB;AAGvCpB,EAAAA,iBAAiB,EAAEtB,SAAS,CAAC0C,WAHU;AAIvCnB,EAAAA,SAAS,EAAEvB,SAAS,CAAC0C,WAJkB;AAKvClB,EAAAA,gBAAgB,EAAExB,SAAS,CAAC0C,WALW;AAMvCjB,EAAAA,cAAc,EAAEzB,SAAS,CAAC2C,IANa;AAOvCjB,EAAAA,WAAW,EAAE1B,SAAS,CAAC2C,IAPgB;AAQvChB,EAAAA,mBAAmB,EAAE3B,SAAS,CAAC2C,IARQ;AASvCf,EAAAA,cAAc,EAAE5B,SAAS,CAAC2C,IATa;AAUvCd,EAAAA,kBAAkB,EAAE7B,SAAS,CAAC2C,IAVS;AAWvCb,EAAAA,eAAe,EAAE9B,SAAS,CAAC4C,MAXY;AAYvCb,EAAAA,iBAAiB,EAAE/B,SAAS,CAAC0C,WAZU;AAavCV,EAAAA,mBAAmB,EAAEhC,SAAS,CAAC6C,IAbQ;AAcvCZ,EAAAA,mBAAmB,EAAEjC,SAAS,CAAC0C,WAdQ;AAevCR,EAAAA,iBAAiB,EAAElC,SAAS,CAAC0C,WAfU;AAgBvCP,EAAAA,eAAe,EAAEnC,SAAS,CAAC0C,WAhBY;AAiBvCN,EAAAA,aAAa,EAAEpC,SAAS,CAAC0C;AAjBc,CAAzC;AAoBA7B,4BAA4B,CAACiC,YAA7B,GAA4C;AAC1CzB,EAAAA,OAAO,EAAEtB,aADiC;AAE1CuB,EAAAA,iBAAiB,EAAEyB,SAFuB;AAG1CxB,EAAAA,SAAS,EAAEwB,SAH+B;AAI1CvB,EAAAA,gBAAgB,EAAEuB,SAJwB;AAK1CtB,EAAAA,cAAc,EAAE,KAL0B;AAM1CC,EAAAA,WAAW,EAAE,KAN6B;AAO1CC,EAAAA,mBAAmB,EAAE,IAPqB;AAQ1CC,EAAAA,cAAc,EAAE,KAR0B;AAS1CC,EAAAA,kBAAkB,EAAE,KATsB;AAU1CC,EAAAA,eAAe,EAAE,IAVyB;AAW1CC,EAAAA,iBAAiB,EAAEgB,SAXuB;AAY1Cf,EAAAA,mBAAmB,EAAE,6BAAAgB,CAAC;AAAA,WAAIA,CAAC,CAACC,QAAF,GAAaC,MAAb,CAAoB,CAApB,EAAuB,CAAvB,CAAJ;AAAA,GAZoB;AAa1CjB,EAAAA,mBAAmB,EAAEc,SAbqB;AAc1Cb,EAAAA,iBAAiB,EAAEa,SAduB;AAe1CZ,EAAAA,eAAe,EAAEY,SAfyB;AAgB1CX,EAAAA,aAAa,EAAEW;AAhB2B,CAA5C","sourcesContent":["import coreUtils from \"@opentripplanner/core-utils\";\nimport { TriMetLegIcon } from \"@opentripplanner/icons\";\nimport PropTypes from \"prop-types\";\nimport React, { Component } from \"react\";\nimport { action } from \"@storybook/addon-actions\";\n\nimport ItineraryBody from \"..\";\nimport DefaultLineColumnContent from \"../defaults/line-column-content\";\nimport DefaultPlaceName from \"../defaults/place-name\";\nimport DefaultRouteDescription from \"../defaults/route-description\";\nimport DefaultTransitLegSummary from \"../defaults/transit-leg-summary\";\nimport { StyledItineraryBody } from \"../demos\";\nimport OtpRRStyledItineraryBody from \"../otp-react-redux/itinerary-body\";\n\nconst config = require(\"../__mocks__/config.json\");\n\nexport default class ItineraryBodyDefaultsWrapper extends Component {\n  constructor() {\n    super();\n    this.state = {};\n  }\n\n  setLegDiagram = leg => {\n    this.setState({ diagramVisible: leg });\n  };\n\n  render() {\n    const {\n      itinerary,\n      LegIcon,\n      LineColumnContent,\n      PlaceName,\n      RouteDescription,\n      showAgencyInfo,\n      showLegIcon,\n      showMapButtonColumn,\n      showRouteFares,\n      showViewTripButton,\n      styledItinerary,\n      TimeColumnContent,\n      toRouteAbbreviation,\n      TransitLegSubheader,\n      TransitLegSummary,\n      AlertToggleIcon,\n      AlertBodyIcon\n    } = this.props;\n    const { diagramVisible } = this.state;\n    let ItineraryBodyComponent;\n    switch (styledItinerary) {\n      case \"pink-legs\":\n        ItineraryBodyComponent = StyledItineraryBody;\n        break;\n      case \"otp-rr\":\n        ItineraryBodyComponent = OtpRRStyledItineraryBody;\n        break;\n      default:\n        ItineraryBodyComponent = ItineraryBody;\n    }\n    return (\n      <ItineraryBodyComponent\n        config={config}\n        diagramVisible={diagramVisible}\n        frameLeg={action(\"frameLeg\")}\n        itinerary={itinerary}\n        LegIcon={LegIcon}\n        LineColumnContent={LineColumnContent || DefaultLineColumnContent}\n        mapillaryKey=\"fake key, but ok because the api response is also fake\"\n        PlaceName={PlaceName || DefaultPlaceName}\n        RouteDescription={RouteDescription || DefaultRouteDescription}\n        routingType=\"ITINERARY\"\n        setActiveLeg={action(\"setActiveLeg\")}\n        setLegDiagram={this.setLegDiagram}\n        setViewedTrip={action(\"setViewedTrip\")}\n        showAgencyInfo={showAgencyInfo}\n        showElevationProfile\n        showLegIcon={showLegIcon}\n        showMapButtonColumn={showMapButtonColumn}\n        showRouteFares={showRouteFares}\n        showViewTripButton={showViewTripButton}\n        TimeColumnContent={TimeColumnContent}\n        toRouteAbbreviation={toRouteAbbreviation}\n        TransitLegSubheader={TransitLegSubheader}\n        TransitLegSummary={TransitLegSummary || DefaultTransitLegSummary}\n        AlertToggleIcon={AlertToggleIcon}\n        AlertBodyIcon={AlertBodyIcon}\n      />\n    );\n  }\n}\n\nItineraryBodyDefaultsWrapper.propTypes = {\n  itinerary: coreUtils.types.itineraryType.isRequired,\n  LegIcon: PropTypes.elementType,\n  LineColumnContent: PropTypes.elementType,\n  PlaceName: PropTypes.elementType,\n  RouteDescription: PropTypes.elementType,\n  showAgencyInfo: PropTypes.bool,\n  showLegIcon: PropTypes.bool,\n  showMapButtonColumn: PropTypes.bool,\n  showRouteFares: PropTypes.bool,\n  showViewTripButton: PropTypes.bool,\n  styledItinerary: PropTypes.string,\n  TimeColumnContent: PropTypes.elementType,\n  toRouteAbbreviation: PropTypes.func,\n  TransitLegSubheader: PropTypes.elementType,\n  TransitLegSummary: PropTypes.elementType,\n  AlertToggleIcon: PropTypes.elementType,\n  AlertBodyIcon: PropTypes.elementType\n};\n\nItineraryBodyDefaultsWrapper.defaultProps = {\n  LegIcon: TriMetLegIcon,\n  LineColumnContent: undefined,\n  PlaceName: undefined,\n  RouteDescription: undefined,\n  showAgencyInfo: false,\n  showLegIcon: false,\n  showMapButtonColumn: true,\n  showRouteFares: false,\n  showViewTripButton: false,\n  styledItinerary: null,\n  TimeColumnContent: undefined,\n  toRouteAbbreviation: r => r.toString().substr(0, 2),\n  TransitLegSubheader: undefined,\n  TransitLegSummary: undefined,\n  AlertToggleIcon: undefined,\n  AlertBodyIcon: undefined\n};\n"],"file":"itinerary-body-defaults-wrapper.js"}