import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _inherits from "@babel/runtime/helpers/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

import coreUtils from "@opentripplanner/core-utils";
import PropTypes from "prop-types";
import React, { Component } from "react";
import { VelocityTransitionGroup } from "velocity-react";
import AlertsBody from "./alerts-body";
import IntermediateStops from "./intermediate-stops";
import * as Styled from "../styled";
import ViewTripButton from "./view-trip-button"; // TODO use pluralize that for internationalization (and complex plurals, i.e., not just adding 's')

function pluralize(str, list) {
  return "".concat(str).concat(list.length > 1 ? "s" : "");
}

var TransitLegBody = /*#__PURE__*/function (_Component) {
  _inherits(TransitLegBody, _Component);

  var _super = _createSuper(TransitLegBody);

  function TransitLegBody(props) {
    var _this;

    _classCallCheck(this, TransitLegBody);

    _this = _super.call(this, props);

    _this.getFareForLeg = function (leg, fare) {
      var fareForLeg;

      if (fare && fare.details && fare.details.regular) {
        fare.details.regular.forEach(function (fareComponent) {
          if (fareComponent.routes.includes(leg.routeId)) {
            fareForLeg = coreUtils.itinerary.getTransitFare(fareComponent.price);
          }
        });
      }

      return fareForLeg;
    };

    _this.onToggleStopsClick = function () {
      var stopsExpanded = _this.state.stopsExpanded;

      _this.setState({
        stopsExpanded: !stopsExpanded
      });
    };

    _this.onToggleAlertsClick = function () {
      var alertsExpanded = _this.state.alertsExpanded;

      _this.setState({
        alertsExpanded: !alertsExpanded
      });
    };

    _this.onSummaryClick = function () {
      var _this$props = _this.props,
          leg = _this$props.leg,
          legIndex = _this$props.legIndex,
          setActiveLeg = _this$props.setActiveLeg;
      setActiveLeg(legIndex, leg);
    };

    _this.state = {
      alertsExpanded: false,
      stopsExpanded: false
    };
    return _this;
  }

  _createClass(TransitLegBody, [{
    key: "render",
    value: function render() {
      var _this$props2 = this.props,
          config = _this$props2.config,
          fare = _this$props2.fare,
          leg = _this$props2.leg,
          LegIcon = _this$props2.LegIcon,
          longDateFormat = _this$props2.longDateFormat,
          RouteDescription = _this$props2.RouteDescription,
          setViewedTrip = _this$props2.setViewedTrip,
          showAgencyInfo = _this$props2.showAgencyInfo,
          showViewTripButton = _this$props2.showViewTripButton,
          timeFormat = _this$props2.timeFormat,
          TransitLegSubheader = _this$props2.TransitLegSubheader,
          TransitLegSummary = _this$props2.TransitLegSummary,
          transitOperator = _this$props2.transitOperator,
          AlertToggleIcon = _this$props2.AlertToggleIcon,
          AlertBodyIcon = _this$props2.AlertBodyIcon;
      var languageConfig = config.language;
      var agencyBrandingUrl = leg.agencyBrandingUrl,
          agencyName = leg.agencyName,
          agencyUrl = leg.agencyUrl,
          alerts = leg.alerts;
      var _this$state = this.state,
          alertsExpanded = _this$state.alertsExpanded,
          stopsExpanded = _this$state.stopsExpanded;
      var isReservationRequired = coreUtils.itinerary.isReservationRequired(leg); // If the config contains an operator with a logo URL, prefer that over the
      // one provided by OTP (which is derived from agency.txt#agency_branding_url)

      var logoUrl = transitOperator && transitOperator.logo ? transitOperator.logo : agencyBrandingUrl;
      var expandAlerts = alertsExpanded || leg.alerts && leg.alerts.length < 3;
      var fareForLeg = this.getFareForLeg(leg, fare);
      return /*#__PURE__*/React.createElement(React.Fragment, null, TransitLegSubheader && /*#__PURE__*/React.createElement(TransitLegSubheader, {
        languageConfig: languageConfig,
        leg: leg
      }), /*#__PURE__*/React.createElement(Styled.LegBody, null, /*#__PURE__*/React.createElement(Styled.LegClickable, {
        onClick: this.onSummaryClick
      }, /*#__PURE__*/React.createElement(RouteDescription, {
        leg: leg,
        LegIcon: LegIcon,
        transitOperator: transitOperator
      })), showAgencyInfo && /*#__PURE__*/React.createElement(Styled.AgencyInfo, null, "Service operated by", " ", /*#__PURE__*/React.createElement("a", {
        href: agencyUrl,
        rel: "noopener noreferrer",
        target: "_blank"
      }, agencyName, logoUrl && /*#__PURE__*/React.createElement("img", {
        alt: "".concat(agencyName, " logo"),
        src: logoUrl,
        height: 25
      }))), isReservationRequired && /*#__PURE__*/React.createElement(Styled.CallAheadWarning, null, "Will not run unless requested ahead of time!"), alerts && alerts.length > 2 && /*#__PURE__*/React.createElement(Styled.TransitAlertToggle, {
        onClick: this.onToggleAlertsClick
      }, /*#__PURE__*/React.createElement(AlertToggleIcon, null), " ", alerts.length, " ", pluralize("alert", alerts), " ", /*#__PURE__*/React.createElement(Styled.CaretToggle, {
        expanded: alertsExpanded
      })), /*#__PURE__*/React.createElement(VelocityTransitionGroup, {
        enter: {
          animation: "slideDown"
        },
        leave: {
          animation: "slideUp"
        }
      }, expandAlerts && /*#__PURE__*/React.createElement(AlertsBody, {
        alerts: leg.alerts,
        longDateFormat: longDateFormat,
        timeFormat: timeFormat,
        AlertIcon: AlertBodyIcon
      })), leg.intermediateStops && leg.intermediateStops.length > 0 && /*#__PURE__*/React.createElement(Styled.TransitLegDetails, null, /*#__PURE__*/React.createElement(Styled.TransitLegDetailsHeader, null, /*#__PURE__*/React.createElement(TransitLegSummary, {
        leg: leg,
        onClick: this.onToggleStopsClick,
        stopsExpanded: stopsExpanded
      }), showViewTripButton && /*#__PURE__*/React.createElement(ViewTripButton, {
        tripId: leg.tripId,
        fromIndex: leg.from.stopIndex,
        setViewedTrip: setViewedTrip,
        toIndex: leg.to.stopIndex
      })), /*#__PURE__*/React.createElement(VelocityTransitionGroup, {
        enter: {
          animation: "slideDown"
        },
        leave: {
          animation: "slideUp"
        }
      }, stopsExpanded ? /*#__PURE__*/React.createElement(Styled.TransitLegExpandedBody, null, /*#__PURE__*/React.createElement(IntermediateStops, {
        stops: leg.intermediateStops
      }), fareForLeg && /*#__PURE__*/React.createElement(Styled.TransitLegFare, null, "Fare: ", fareForLeg.centsToString(fareForLeg.transitFare))) : null), leg.averageWait && /*#__PURE__*/React.createElement("span", null, "Typical Wait: ", coreUtils.time.formatDuration(leg.averageWait)))));
    }
  }]);

  return TransitLegBody;
}(Component);

TransitLegBody.propTypes = {
  config: coreUtils.types.configType.isRequired,
  fare: coreUtils.types.fareType,
  leg: coreUtils.types.legType.isRequired,
  LegIcon: PropTypes.elementType.isRequired,
  legIndex: PropTypes.number.isRequired,
  longDateFormat: PropTypes.string.isRequired,
  RouteDescription: PropTypes.elementType.isRequired,
  setActiveLeg: PropTypes.func.isRequired,
  setViewedTrip: PropTypes.func.isRequired,
  showAgencyInfo: PropTypes.bool.isRequired,
  showViewTripButton: PropTypes.bool.isRequired,
  timeFormat: PropTypes.string.isRequired,
  TransitLegSubheader: PropTypes.elementType,
  TransitLegSummary: PropTypes.elementType.isRequired,
  transitOperator: coreUtils.types.transitOperatorType,
  AlertToggleIcon: PropTypes.elementType,
  AlertBodyIcon: PropTypes.elementType
};
TransitLegBody.defaultProps = {
  fare: null,
  TransitLegSubheader: undefined,
  transitOperator: null,
  AlertToggleIcon: Styled.DefaultAlertToggleIcon,
  AlertBodyIcon: undefined
};
export default TransitLegBody;
export { AlertsBody, IntermediateStops, ViewTripButton };
//# sourceMappingURL=index.js.map