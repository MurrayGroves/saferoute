import coreUtils from "@opentripplanner/core-utils";
import PropTypes from "prop-types";
import React from "react";
import * as Styled from "../styled";
export default function PlaceName(_ref) {
  var config = _ref.config,
      interline = _ref.interline,
      place = _ref.place;
  return /*#__PURE__*/React.createElement(React.Fragment, null, interline ? /*#__PURE__*/React.createElement(React.Fragment, null, "Stay on Board at ", /*#__PURE__*/React.createElement("b", null, place.name)) : /*#__PURE__*/React.createElement(React.Fragment, null, coreUtils.itinerary.getPlaceName(place, config.companies)), place.stopId && !interline && /*#__PURE__*/React.createElement(Styled.StopIdSpan, null, "ID ", place.stopId.split(":")[1])
  /*
  TODO: There is no explicit stop button on the mocks.
  Have a question out to marketing as to whether the above StopID
  is a button to navigate the user to the arrival list for the stop
  that's what the button below does
  */

  /* <ViewStopButton stopId={place.stopId} /> */
  );
}
PlaceName.propTypes = {
  config: coreUtils.types.configType.isRequired,
  interline: PropTypes.bool,
  place: coreUtils.types.placeType.isRequired
};
PlaceName.defaultProps = {
  interline: false
};
//# sourceMappingURL=place-name.js.map