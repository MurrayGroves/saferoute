{"version":3,"sources":["../../src/ItineraryBody/index.js"],"names":["coreUtils","PropTypes","React","AccessibilityRating","PlaceRow","S","ItineraryBody","accessibilityScoreGradationMap","AlertBodyIcon","AlertToggleIcon","className","config","diagramVisible","frameLeg","itinerary","LegIcon","LineColumnContent","mapillaryCallback","mapillaryKey","PlaceName","RouteDescription","routingType","setActiveLeg","setLegDiagram","setViewedTrip","showAgencyInfo","showElevationProfile","showLegIcon","showMapButtonColumn","showRouteFares","showViewTripButton","TimeColumnContent","timeOptions","toRouteAbbreviation","TransitLegSubheader","TransitLegSummary","rows","followsTransit","lastLeg","fare","legs","forEach","leg","i","createPlaceRow","isDestination","push","length","transitLeg","propTypes","string","types","configType","isRequired","legType","func","itineraryType","elementType","bool","timeOptionsType","shape","color","icon","element","text","noop","defaultProps","undefined"],"mappings":"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","sourcesContent":["import coreUtils from \"@opentripplanner/core-utils\";\nimport PropTypes from \"prop-types\";\nimport React from \"react\";\n\nimport AccessibilityRating from \"./accessibility-rating\";\nimport PlaceRow from \"./place-row\";\nimport * as S from \"../styled\";\n\nconst ItineraryBody = ({\n  accessibilityScoreGradationMap,\n  AlertBodyIcon,\n  AlertToggleIcon,\n  className,\n  config,\n  diagramVisible,\n  frameLeg,\n  itinerary,\n  LegIcon,\n  LineColumnContent,\n  mapillaryCallback,\n  mapillaryKey,\n  PlaceName,\n  RouteDescription,\n  routingType,\n  setActiveLeg,\n  setLegDiagram,\n  setViewedTrip,\n  showAgencyInfo,\n  showElevationProfile,\n  showLegIcon,\n  showMapButtonColumn,\n  showRouteFares,\n  showViewTripButton,\n  TimeColumnContent,\n  timeOptions,\n  toRouteAbbreviation,\n  TransitLegSubheader,\n  TransitLegSummary\n}) => {\n  /*\n    TODO: replace component should update logic? companies is simply used to\n    trigger a rerender of this component itinerary is also another criteria\n    that is used to trigger a rerender but has more reuse than companies here\n  */\n  const rows = [];\n  let followsTransit = false;\n  let lastLeg;\n  const { fare } = itinerary;\n  itinerary.legs.forEach((leg, i) => {\n    function createPlaceRow(isDestination) {\n      // Create a row containing this leg's start place and leg traversal details\n      rows.push(\n        <PlaceRow\n          accessibilityScoreGradationMap={accessibilityScoreGradationMap}\n          AlertToggleIcon={AlertToggleIcon}\n          AlertBodyIcon={AlertBodyIcon}\n          // eslint-disable-next-line react/no-array-index-key\n          key={i + (isDestination ? 1 : 0)}\n          config={config}\n          diagramVisible={diagramVisible}\n          // Itinerary fare is only passed as prop if showRouteFares is enabled.\n          // The fare details will be processed in the TransitLeg component and\n          // shown for all legs.\n          fare={showRouteFares ? fare : null}\n          followsTransit={followsTransit}\n          frameLeg={frameLeg}\n          isDestination={isDestination}\n          lastLeg={lastLeg}\n          leg={leg}\n          LegIcon={LegIcon}\n          legIndex={i}\n          LineColumnContent={LineColumnContent}\n          mapillaryCallback={mapillaryCallback}\n          mapillaryKey={mapillaryKey}\n          PlaceName={PlaceName}\n          RouteDescription={RouteDescription}\n          routingType={routingType}\n          setActiveLeg={setActiveLeg}\n          setLegDiagram={setLegDiagram}\n          setViewedTrip={setViewedTrip}\n          showAgencyInfo={showAgencyInfo}\n          showElevationProfile={showElevationProfile}\n          showLegIcon={showLegIcon}\n          showMapButtonColumn={showMapButtonColumn}\n          showViewTripButton={showViewTripButton}\n          TimeColumnContent={TimeColumnContent}\n          timeOptions={timeOptions}\n          toRouteAbbreviation={toRouteAbbreviation}\n          TransitLegSubheader={TransitLegSubheader}\n          TransitLegSummary={TransitLegSummary}\n        />\n      );\n    }\n\n    createPlaceRow(false);\n    // If this is the last leg, create a special PlaceRow for the destination\n    // only\n    if (i === itinerary.legs.length - 1) {\n      createPlaceRow(true);\n    }\n    if (leg.transitLeg) followsTransit = true;\n    lastLeg = leg;\n  });\n  return <S.ItineraryBody className={className}>{rows}</S.ItineraryBody>;\n};\n\nItineraryBody.propTypes = {\n  /**\n   * Used for additional styling with styled components for example.\n   */\n  className: PropTypes.string,\n  /** Contains OTP configuration details. */\n  config: coreUtils.types.configType.isRequired,\n  /**\n   * Should be either null or a legType. Indicates that a particular leg diagram\n   * has been selected and is active.\n   */\n  diagramVisible: coreUtils.types.legType,\n  /**\n   * Called upon clicking the map icon on place headers. This function is sent a\n   * single argument of an object with the keys as follow:\n   * - `leg`: the leg clicked (can be null if the destination is clicked)\n   * - `legIndex`: the index of the leg clicked (can be null if the destination\n   *    is clicked)\n   * - `isDestination`: if the place header that is clicked is the destination\n   * - `place`: The place associated with the click event\n   */\n  frameLeg: PropTypes.func,\n  /** Itinerary that the user has selected to view, contains multiple legs */\n  itinerary: coreUtils.types.itineraryType.isRequired,\n  /** A component class that is used to render icons for legs of an itinerary */\n  LegIcon: PropTypes.elementType.isRequired,\n  /**\n   * A slot for a component that can render the content in the line column.\n   * This component is sent the following props:\n   * - interline - whether this place is an interlined stop\n   * - isDestination - whether this place is the destination\n   * - lastLeg - the leg prior to the current leg\n   * - leg - the current leg\n   * - LegIcon - the LegIcon class used to render leg icons.\n   * - legIndex - the current leg index\n   * - toRouteAbbreviation - a function to help abbreviate route names\n   */\n  LineColumnContent: PropTypes.elementType.isRequired,\n  /** Handler for when a Mapillary button is clicked. */\n  mapillaryCallback: PropTypes.func,\n  /**\n   * Mapillary key used to fetch imagery if available. Key can be obtained from\n   * https://www.mapillary.com/dashboard/developers\n   */\n  mapillaryKey: PropTypes.string,\n  /**\n   * A custom component for rendering the place name of legs.\n   * The component is sent 3 props:\n   * - config: the application config\n   * - interline: whether this place is an interlined stop (a stop where a\n   *   transit vehicle changes routes, but a rider can continue riding without\n   *   deboarding)\n   * - place: the particular place. Typically this is the from place, but it\n   *   could also be the to place if it is the destination of the itinerary.\n   */\n  PlaceName: PropTypes.elementType.isRequired,\n  /**\n   * A component to render the name of a route.\n   *\n   * The component is sent 2 props:\n   * - leg: the itinerary leg with the transit information\n   * - transitOperator: the transit operator associated with the route if available\n   */\n  RouteDescription: PropTypes.elementType.isRequired,\n  /** TODO: Routing Type is usually 'ITINERARY' but we should get more details on what this does */\n  routingType: PropTypes.string,\n  /**\n   * Sets the active leg and legIndex.\n   * Called with 2 arguments: (legIndex, leg)\n   */\n  setActiveLeg: PropTypes.func.isRequired,\n  /** Handler for when a leg diagram is selected. */\n  setLegDiagram: PropTypes.func.isRequired,\n  /** Fired when a user clicks on a view trip button of a transit leg */\n  setViewedTrip: PropTypes.func.isRequired,\n  /** If true, will show agency information in transit legs */\n  showAgencyInfo: PropTypes.bool,\n  /** If true, will show the elevation profile for walk/bike legs */\n  showElevationProfile: PropTypes.bool,\n  /** If true will show the leg icon in the leg body */\n  showLegIcon: PropTypes.bool,\n  /** If true, will show the right column with the map button */\n  showMapButtonColumn: PropTypes.bool,\n  /** If true, will show fare information in transit leg bodies */\n  showRouteFares: PropTypes.bool,\n  /** If true, shows the view trip button in transit leg bodies */\n  showViewTripButton: PropTypes.bool,\n  /**\n   * A slot for a component that can render the content in the time column portion of ItineraryBody.\n   * This component is sent the following props:\n   * - isDestination - whether this place is the destination\n   * - leg - the current leg\n   * - timeOptions - options for formatting time.\n   */\n  TimeColumnContent: PropTypes.elementType,\n  /** Contains the preferred format string for time display and a timezone offset */\n  timeOptions: coreUtils.types.timeOptionsType,\n  /** Converts a route's ID to its accepted badge abbreviation */\n  toRouteAbbreviation: PropTypes.func,\n  /**\n   * An optional custom component for rendering a subheader on transit legs.\n   * * The component is sent 4 props:\n   * - languageConfig: The language values\n   * - leg: the transit leg\n   */\n  TransitLegSubheader: PropTypes.elementType,\n  /**\n   * A custom component for rendering the summary of a transit leg.\n   * The component is sent 2 props:\n   * - leg: the transit leg\n   * - stopsExpanded: whether the intermediate stop display is currently expanded\n   */\n  TransitLegSummary: PropTypes.elementType.isRequired,\n  /**\n   * A custom icon component inserted into the transit alert toggle button\n   * within a transit leg, if this prop is not supplied a default icon is used\n   */\n  AlertToggleIcon: PropTypes.elementType,\n  /**\n   * A custom icon component inserted into the transit alert body component\n   * within a transit leg, if this prop is not supplied a default icon is used\n   */\n  AlertBodyIcon: PropTypes.elementType,\n  /**\n   * A mapping of accessibility score to color, icon, and text used\n   * to override the default one shipped in AccessibilityLabel\n   */\n  accessibilityScoreGradationMap: PropTypes.shape({\n    color: PropTypes.string,\n    icon: PropTypes.element,\n    text: PropTypes.string\n  })\n};\n\nfunction noop() {}\n\nItineraryBody.defaultProps = {\n  accessibilityScoreGradationMap: undefined,\n  AlertBodyIcon: undefined,\n  AlertToggleIcon: undefined,\n  className: null,\n  diagramVisible: null,\n  frameLeg: noop,\n  mapillaryCallback: null,\n  mapillaryKey: null,\n  routingType: \"ITINERARY\",\n  showAgencyInfo: false,\n  showElevationProfile: false,\n  showLegIcon: false,\n  showMapButtonColumn: true,\n  showRouteFares: false,\n  showViewTripButton: false,\n  TimeColumnContent: PlaceRow.defaultProps.TimeColumnContent,\n  timeOptions: null,\n  toRouteAbbreviation: noop,\n  TransitLegSubheader: undefined\n};\n\nexport default ItineraryBody;\n\nexport { AccessibilityRating };\n"],"file":"index.js"}