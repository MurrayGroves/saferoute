import coreUtils from "@opentripplanner/core-utils";
import PropTypes from "prop-types";
import React from "react";
import DefaultTimeColumnContent from "../defaults/time-column-content";
import AccessLegBody from "../AccessLegBody";
import * as S from "../styled";
import TransitLegBody from "../TransitLegBody";
import AccessibilityRating from "./accessibility-rating";
/*
  TODO: Wondering if it's possible for us to destructure the time
  preferences from the config object and avoid making the props list so long
*/

var PlaceRow = function PlaceRow(_ref) {
  var accessibilityScoreGradationMap = _ref.accessibilityScoreGradationMap,
      config = _ref.config,
      diagramVisible = _ref.diagramVisible,
      fare = _ref.fare,
      followsTransit = _ref.followsTransit,
      frameLeg = _ref.frameLeg,
      isDestination = _ref.isDestination,
      lastLeg = _ref.lastLeg,
      leg = _ref.leg,
      LegIcon = _ref.LegIcon,
      legIndex = _ref.legIndex,
      LineColumnContent = _ref.LineColumnContent,
      mapillaryCallback = _ref.mapillaryCallback,
      mapillaryKey = _ref.mapillaryKey,
      messages = _ref.messages,
      PlaceName = _ref.PlaceName,
      RouteDescription = _ref.RouteDescription,
      setActiveLeg = _ref.setActiveLeg,
      setLegDiagram = _ref.setLegDiagram,
      setViewedTrip = _ref.setViewedTrip,
      showAgencyInfo = _ref.showAgencyInfo,
      showElevationProfile = _ref.showElevationProfile,
      showLegIcon = _ref.showLegIcon,
      showMapButtonColumn = _ref.showMapButtonColumn,
      showViewTripButton = _ref.showViewTripButton,
      TimeColumnContent = _ref.TimeColumnContent,
      timeOptions = _ref.timeOptions,
      toRouteAbbreviation = _ref.toRouteAbbreviation,
      TransitLegSubheader = _ref.TransitLegSubheader,
      TransitLegSummary = _ref.TransitLegSummary,
      AlertToggleIcon = _ref.AlertToggleIcon,
      AlertBodyIcon = _ref.AlertBodyIcon;
  // NOTE: Previously there was a check for itineraries that changed vehicles
  // at a single stop, which would render the stop place the same as the
  // interline stop. However, this prevents the user from being able to click
  // on the stop viewer in this case, which they may want to do in order to
  // check the real-time arrival information for the next leg of their journey.
  var interline = !!(!isDestination && leg.interlineWithPreviousLeg);
  var hideBorder = interline || !legIndex;
  var place = isDestination ? leg.to : leg.from;
  var _config$dateTime = config.dateTime,
      longDateFormat = _config$dateTime.longDateFormat,
      timeFormat = _config$dateTime.timeFormat;
  return /*#__PURE__*/React.createElement(S.PlaceRowWrapper, {
    key: legIndex || "destination-place"
  }, /*#__PURE__*/React.createElement(S.TimeColumn, null, /*#__PURE__*/React.createElement(TimeColumnContent, {
    isDestination: isDestination,
    leg: leg,
    timeOptions: timeOptions
  }), !isDestination && leg.accessibilityScore && /*#__PURE__*/React.createElement(AccessibilityRating, {
    gradationMap: accessibilityScoreGradationMap,
    score: leg.accessibilityScore
  })), /*#__PURE__*/React.createElement(S.LineColumn, null, /*#__PURE__*/React.createElement(LineColumnContent, {
    interline: interline,
    isDestination: isDestination,
    lastLeg: lastLeg,
    leg: leg,
    LegIcon: LegIcon,
    legIndex: legIndex,
    toRouteAbbreviation: toRouteAbbreviation
  })), /*#__PURE__*/React.createElement(S.DetailsColumn, {
    hideBorder: hideBorder.toString()
  }, /*#__PURE__*/React.createElement(S.PlaceDetails, null, /*#__PURE__*/React.createElement(S.PlaceHeader, null, interline && /*#__PURE__*/React.createElement(S.InterlineDot, null, "\u2022"), /*#__PURE__*/React.createElement(S.PlaceName, null, /*#__PURE__*/React.createElement(PlaceName, {
    config: config,
    interline: interline,
    place: place
  }))), !isDestination && (leg.transitLeg ?
  /*#__PURE__*/

  /* This is a transit leg */
  React.createElement(TransitLegBody, {
    config: config,
    fare: fare,
    leg: leg,
    LegIcon: LegIcon,
    legIndex: legIndex,
    setActiveLeg: setActiveLeg,
    longDateFormat: longDateFormat,
    RouteDescription: RouteDescription,
    setViewedTrip: setViewedTrip,
    showAgencyInfo: showAgencyInfo,
    showViewTripButton: showViewTripButton,
    timeFormat: timeFormat,
    TransitLegSubheader: TransitLegSubheader,
    TransitLegSummary: TransitLegSummary,
    transitOperator: coreUtils.route.getTransitOperatorFromLeg(leg, config.transitOperators),
    AlertToggleIcon: AlertToggleIcon,
    AlertBodyIcon: AlertBodyIcon
  }) :
  /*#__PURE__*/

  /* This is an access (e.g. walk/bike/etc.) leg */
  React.createElement(AccessLegBody, {
    config: config,
    diagramVisible: diagramVisible,
    followsTransit: followsTransit,
    leg: leg,
    LegIcon: LegIcon,
    legIndex: legIndex,
    mapillaryCallback: mapillaryCallback,
    mapillaryKey: mapillaryKey,
    setActiveLeg: setActiveLeg,
    setLegDiagram: setLegDiagram,
    showElevationProfile: showElevationProfile,
    showLegIcon: showLegIcon,
    timeOptions: timeOptions
  })))), showMapButtonColumn && /*#__PURE__*/React.createElement(S.MapButtonColumn, {
    hideBorder: hideBorder.toString()
  }, /*#__PURE__*/React.createElement(S.MapButton, {
    "aria-label": messages.mapIconTitle,
    onClick: function onClick() {
      return frameLeg({
        isDestination: isDestination,
        leg: leg,
        legIndex: legIndex,
        place: place
      });
    },
    title: messages.mapIconTitle
  }, /*#__PURE__*/React.createElement(S.MapIcon, {
    title: messages.mapIconTitle
  }))));
};

var messagesType = PropTypes.shape({
  mapIconTitle: PropTypes.string.isRequired
}); // A lot of these props are passed through from the ItineraryBody. See the
// documentation in that component for more information.

PlaceRow.propTypes = {
  accessibilityScoreGradationMap: PropTypes.shape({
    color: PropTypes.string,
    icon: PropTypes.element,
    text: PropTypes.string
  }),
  AlertToggleIcon: PropTypes.elementType,
  AlertBodyIcon: PropTypes.elementType,
  config: coreUtils.types.configType.isRequired,
  diagramVisible: coreUtils.types.legType,
  fare: coreUtils.types.fareType,

  /** Indicates whether this leg directly follows a transit leg */
  followsTransit: PropTypes.bool,
  frameLeg: PropTypes.func.isRequired,

  /** whether this place row represents the destination */
  isDestination: PropTypes.bool.isRequired,

  /** Contains details about the leg object prior to the current one */
  lastLeg: coreUtils.types.legType,

  /** Contains details about leg object that is being displayed */
  leg: coreUtils.types.legType.isRequired,
  LegIcon: PropTypes.elementType.isRequired,

  /** The index value of this specific leg within the itinerary */
  legIndex: PropTypes.number.isRequired,
  LineColumnContent: PropTypes.elementType.isRequired,
  mapillaryCallback: PropTypes.func,
  mapillaryKey: PropTypes.string,
  messages: messagesType,
  PlaceName: PropTypes.elementType.isRequired,
  RouteDescription: PropTypes.elementType.isRequired,
  setActiveLeg: PropTypes.func.isRequired,
  setLegDiagram: PropTypes.func.isRequired,
  setViewedTrip: PropTypes.func.isRequired,
  showAgencyInfo: PropTypes.bool.isRequired,
  showElevationProfile: PropTypes.bool.isRequired,
  showLegIcon: PropTypes.bool.isRequired,
  showMapButtonColumn: PropTypes.bool.isRequired,
  showViewTripButton: PropTypes.bool.isRequired,
  TimeColumnContent: PropTypes.elementType,
  timeOptions: coreUtils.types.timeOptionsType,
  toRouteAbbreviation: PropTypes.func.isRequired,
  TransitLegSubheader: PropTypes.elementType,
  TransitLegSummary: PropTypes.elementType.isRequired
};
PlaceRow.defaultProps = {
  accessibilityScoreGradationMap: undefined,
  AlertToggleIcon: undefined,
  AlertBodyIcon: undefined,
  diagramVisible: null,
  fare: null,
  followsTransit: false,
  // can be null if this is the origin place
  lastLeg: null,
  mapillaryCallback: null,
  mapillaryKey: null,
  messages: {
    mapIconTitle: "View on map"
  },
  TimeColumnContent: DefaultTimeColumnContent,
  timeOptions: null,
  TransitLegSubheader: undefined
};
export default PlaceRow;
//# sourceMappingURL=place-row.js.map