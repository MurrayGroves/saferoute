{"version":3,"sources":["../../src/ItineraryBody/place-row.js"],"names":["coreUtils","PropTypes","React","DefaultTimeColumnContent","AccessLegBody","S","TransitLegBody","AccessibilityRating","PlaceRow","accessibilityScoreGradationMap","config","diagramVisible","fare","followsTransit","frameLeg","isDestination","lastLeg","leg","LegIcon","legIndex","LineColumnContent","mapillaryCallback","mapillaryKey","messages","PlaceName","RouteDescription","setActiveLeg","setLegDiagram","setViewedTrip","showAgencyInfo","showElevationProfile","showLegIcon","showMapButtonColumn","showViewTripButton","TimeColumnContent","timeOptions","toRouteAbbreviation","TransitLegSubheader","TransitLegSummary","AlertToggleIcon","AlertBodyIcon","interline","interlineWithPreviousLeg","hideBorder","place","to","from","dateTime","longDateFormat","timeFormat","accessibilityScore","toString","transitLeg","route","getTransitOperatorFromLeg","transitOperators","mapIconTitle","messagesType","shape","string","isRequired","propTypes","color","icon","element","text","elementType","types","configType","legType","fareType","bool","func","number","timeOptionsType","defaultProps","undefined"],"mappings":"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","sourcesContent":["import coreUtils from \"@opentripplanner/core-utils\";\nimport PropTypes from \"prop-types\";\nimport React from \"react\";\n\nimport DefaultTimeColumnContent from \"../defaults/time-column-content\";\nimport AccessLegBody from \"../AccessLegBody\";\nimport * as S from \"../styled\";\nimport TransitLegBody from \"../TransitLegBody\";\n\nimport AccessibilityRating from \"./accessibility-rating\";\n/*\n  TODO: Wondering if it's possible for us to destructure the time\n  preferences from the config object and avoid making the props list so long\n*/\nconst PlaceRow = ({\n  accessibilityScoreGradationMap,\n  config,\n  diagramVisible,\n  fare,\n  followsTransit,\n  frameLeg,\n  isDestination,\n  lastLeg,\n  leg,\n  LegIcon,\n  legIndex,\n  LineColumnContent,\n  mapillaryCallback,\n  mapillaryKey,\n  messages,\n  PlaceName,\n  RouteDescription,\n  setActiveLeg,\n  setLegDiagram,\n  setViewedTrip,\n  showAgencyInfo,\n  showElevationProfile,\n  showLegIcon,\n  showMapButtonColumn,\n  showViewTripButton,\n  TimeColumnContent,\n  timeOptions,\n  toRouteAbbreviation,\n  TransitLegSubheader,\n  TransitLegSummary,\n  AlertToggleIcon,\n  AlertBodyIcon\n}) => {\n  // NOTE: Previously there was a check for itineraries that changed vehicles\n  // at a single stop, which would render the stop place the same as the\n  // interline stop. However, this prevents the user from being able to click\n  // on the stop viewer in this case, which they may want to do in order to\n  // check the real-time arrival information for the next leg of their journey.\n  const interline = !!(!isDestination && leg.interlineWithPreviousLeg);\n  const hideBorder = interline || !legIndex;\n  const place = isDestination ? leg.to : leg.from;\n\n  const { longDateFormat, timeFormat } = config.dateTime;\n  return (\n    <S.PlaceRowWrapper key={legIndex || \"destination-place\"}>\n      <S.TimeColumn>\n        {/* Custom rendering of the departure/arrival time of the specified leg. */}\n        <TimeColumnContent\n          isDestination={isDestination}\n          leg={leg}\n          timeOptions={timeOptions}\n        />\n        {!isDestination && leg.accessibilityScore && (\n          <AccessibilityRating\n            gradationMap={accessibilityScoreGradationMap}\n            score={leg.accessibilityScore}\n          />\n        )}\n      </S.TimeColumn>\n      <S.LineColumn>\n        <LineColumnContent\n          interline={interline}\n          isDestination={isDestination}\n          lastLeg={lastLeg}\n          leg={leg}\n          LegIcon={LegIcon}\n          legIndex={legIndex}\n          toRouteAbbreviation={toRouteAbbreviation}\n        />\n      </S.LineColumn>\n      <S.DetailsColumn hideBorder={hideBorder.toString()}>\n        <S.PlaceDetails>\n          {/* Dot separating interlined segments, if applicable */}\n          <S.PlaceHeader>\n            {/*\n              TODO: Need to rework this -- Need to display a marker\n              for an interline place\n            */}\n            {interline && <S.InterlineDot>&bull;</S.InterlineDot>}\n            <S.PlaceName>\n              <PlaceName config={config} interline={interline} place={place} />\n            </S.PlaceName>\n          </S.PlaceHeader>\n\n          {/* Show the leg, if not rendering the destination */}\n          {!isDestination &&\n            (leg.transitLeg ? (\n              /* This is a transit leg */\n              <TransitLegBody\n                config={config}\n                fare={fare}\n                leg={leg}\n                LegIcon={LegIcon}\n                legIndex={legIndex}\n                setActiveLeg={setActiveLeg}\n                longDateFormat={longDateFormat}\n                RouteDescription={RouteDescription}\n                setViewedTrip={setViewedTrip}\n                showAgencyInfo={showAgencyInfo}\n                showViewTripButton={showViewTripButton}\n                timeFormat={timeFormat}\n                TransitLegSubheader={TransitLegSubheader}\n                TransitLegSummary={TransitLegSummary}\n                transitOperator={coreUtils.route.getTransitOperatorFromLeg(\n                  leg,\n                  config.transitOperators\n                )}\n                AlertToggleIcon={AlertToggleIcon}\n                AlertBodyIcon={AlertBodyIcon}\n              />\n            ) : (\n              /* This is an access (e.g. walk/bike/etc.) leg */\n              <AccessLegBody\n                config={config}\n                diagramVisible={diagramVisible}\n                followsTransit={followsTransit}\n                leg={leg}\n                LegIcon={LegIcon}\n                legIndex={legIndex}\n                mapillaryCallback={mapillaryCallback}\n                mapillaryKey={mapillaryKey}\n                setActiveLeg={setActiveLeg}\n                setLegDiagram={setLegDiagram}\n                showElevationProfile={showElevationProfile}\n                showLegIcon={showLegIcon}\n                timeOptions={timeOptions}\n              />\n            ))}\n        </S.PlaceDetails>\n      </S.DetailsColumn>\n      {showMapButtonColumn && (\n        <S.MapButtonColumn hideBorder={hideBorder.toString()}>\n          <S.MapButton\n            aria-label={messages.mapIconTitle}\n            onClick={() => frameLeg({ isDestination, leg, legIndex, place })}\n            title={messages.mapIconTitle}\n          >\n            <S.MapIcon title={messages.mapIconTitle} />\n          </S.MapButton>\n        </S.MapButtonColumn>\n      )}\n    </S.PlaceRowWrapper>\n  );\n};\n\nconst messagesType = PropTypes.shape({\n  mapIconTitle: PropTypes.string.isRequired\n});\n\n// A lot of these props are passed through from the ItineraryBody. See the\n// documentation in that component for more information.\nPlaceRow.propTypes = {\n  accessibilityScoreGradationMap: PropTypes.shape({\n    color: PropTypes.string,\n    icon: PropTypes.element,\n    text: PropTypes.string\n  }),\n  AlertToggleIcon: PropTypes.elementType,\n  AlertBodyIcon: PropTypes.elementType,\n  config: coreUtils.types.configType.isRequired,\n  diagramVisible: coreUtils.types.legType,\n  fare: coreUtils.types.fareType,\n  /** Indicates whether this leg directly follows a transit leg */\n  followsTransit: PropTypes.bool,\n  frameLeg: PropTypes.func.isRequired,\n  /** whether this place row represents the destination */\n  isDestination: PropTypes.bool.isRequired,\n  /** Contains details about the leg object prior to the current one */\n  lastLeg: coreUtils.types.legType,\n  /** Contains details about leg object that is being displayed */\n  leg: coreUtils.types.legType.isRequired,\n  LegIcon: PropTypes.elementType.isRequired,\n  /** The index value of this specific leg within the itinerary */\n  legIndex: PropTypes.number.isRequired,\n  LineColumnContent: PropTypes.elementType.isRequired,\n  mapillaryCallback: PropTypes.func,\n  mapillaryKey: PropTypes.string,\n  messages: messagesType,\n  PlaceName: PropTypes.elementType.isRequired,\n  RouteDescription: PropTypes.elementType.isRequired,\n  setActiveLeg: PropTypes.func.isRequired,\n  setLegDiagram: PropTypes.func.isRequired,\n  setViewedTrip: PropTypes.func.isRequired,\n  showAgencyInfo: PropTypes.bool.isRequired,\n  showElevationProfile: PropTypes.bool.isRequired,\n  showLegIcon: PropTypes.bool.isRequired,\n  showMapButtonColumn: PropTypes.bool.isRequired,\n  showViewTripButton: PropTypes.bool.isRequired,\n  TimeColumnContent: PropTypes.elementType,\n  timeOptions: coreUtils.types.timeOptionsType,\n  toRouteAbbreviation: PropTypes.func.isRequired,\n  TransitLegSubheader: PropTypes.elementType,\n  TransitLegSummary: PropTypes.elementType.isRequired\n};\n\nPlaceRow.defaultProps = {\n  accessibilityScoreGradationMap: undefined,\n  AlertToggleIcon: undefined,\n  AlertBodyIcon: undefined,\n  diagramVisible: null,\n  fare: null,\n  followsTransit: false,\n  // can be null if this is the origin place\n  lastLeg: null,\n  mapillaryCallback: null,\n  mapillaryKey: null,\n  messages: {\n    mapIconTitle: \"View on map\"\n  },\n  TimeColumnContent: DefaultTimeColumnContent,\n  timeOptions: null,\n  TransitLegSubheader: undefined\n};\n\nexport default PlaceRow;\n"],"file":"place-row.js"}