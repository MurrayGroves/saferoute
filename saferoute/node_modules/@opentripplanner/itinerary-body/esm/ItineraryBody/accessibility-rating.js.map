{"version":3,"sources":["../../src/ItineraryBody/accessibility-rating.tsx"],"names":["React","styled","Wheelchair","Wrapper","div","props","border","color","large","StatusWrapper","span","TextWrapper","AccessibilityRating","gradationMap","grayscale","score","mapping","text","mappedKey","parseFloat","Object","keys","sort","reverse","find","key","mapped","flex","height","minWidth","icon"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,SAASC,UAAT,QAA2B,qCAA3B;AAQA,IAAMC,OAAO,GAAGF,MAAM,CAACG,GAAV;AAAA;AAAA;AAAA,8NAED,UAAAC,KAAK;AAAA,SAAKA,KAAK,CAACC,MAAN,GAAe,gBAAf,GAAkC,MAAvC;AAAA,CAFJ,EAGS,UAAAD,KAAK;AAAA,SAAIA,KAAK,CAACE,KAAV;AAAA,CAHd,EAIM,UAAAF,KAAK;AAAA,SAAKA,KAAK,CAACG,KAAN,GAAc,KAAd,GAAsB,MAA3B;AAAA,CAJX,EASD,UAAAH,KAAK;AAAA,SAAKA,KAAK,CAACG,KAAN,GAAc,MAAd,GAAuB,MAA5B;AAAA,CATJ,CAAb;AAaA,IAAMC,aAAa,GAAGR,MAAM,CAACS,IAAV;AAAA;AAAA;AAAA,mCAAnB;AASA,IAAMC,WAAW,GAAGV,MAAM,CAACS,IAAV;AAAA;AAAA;AAAA,wCAAjB;AAKA;AACA;AACA;AACA;;AACA,IAAME,mBAAmB,GAAG,SAAtBA,mBAAsB,OAaT;AAAA,MAZjBC,YAYiB,QAZjBA,YAYiB;AAAA,4BAXjBC,SAWiB;AAAA,MAXjBA,SAWiB,+BAXL,KAWK;AAAA,wBAVjBN,KAUiB;AAAA,MAVjBA,KAUiB,2BAVT,KAUS;AAAA,MATjBO,KASiB,QATjBA,KASiB;AACjB;AACA,MAAMC,OAAO,GAAGH,YAAY,IAAI;AAC9B,SAAK;AAAEN,MAAAA,KAAK,EAAE,SAAT;AAAoBU,MAAAA,IAAI,EAAE;AAA1B,KADyB;AAE9B,SAAK;AACHV,MAAAA,KAAK,EAAE,SADJ;AAEHU,MAAAA,IAAI,EAAE;AAFH,KAFyB;AAM9B,SAAK;AAAEV,MAAAA,KAAK,EAAE,SAAT;AAAoBU,MAAAA,IAAI,EAAE;AAA1B;AANyB,GAAhC,CAFiB,CAWjB;;AACA,MAAMC,SAAiB,GAAGC,UAAU,CAClCC,MAAM,CAACC,IAAP,CAAYL,OAAZ,EACGM,IADH,GAEE;AAFF,GAGGC,OAHH,GAIGC,IAJH,CAIQ,UAAAC,GAAG;AAAA,WAAIN,UAAU,CAACM,GAAD,CAAV,IAAmBV,KAAvB;AAAA,GAJX,CADkC,CAApC,CAZiB,CAoBjB;;AACA,MAAMW,MAAM,GAAGV,OAAO,CAACE,SAAD,CAAP,IAAsBF,OAAO,CAAC,GAAD,CAA5C;AAEA,sBACE,oBAAC,OAAD;AACE,IAAA,MAAM,EAAEF,SADV;AAEE,IAAA,KAAK,EAAEA,SAAS,GAAG,aAAH,GAAmBY,MAAM,CAACnB,KAF5C;AAGE,IAAA,KAAK,EAAEC,KAHT;AAIE,IAAA,KAAK,EAAEkB,MAAM,CAACT;AAJhB,kBAME,oBAAC,UAAD;AAAY,IAAA,KAAK,EAAE;AAAEU,MAAAA,IAAI,EAAE,GAAR;AAAaC,MAAAA,MAAM,EAAE,MAArB;AAA6BC,MAAAA,QAAQ,EAAE;AAAvC;AAAnB,IANF,eAOE,oBAAC,aAAD,QAEGH,MAAM,CAACI,IAAP,iBAAe,oBAAC,WAAD,QAAcJ,MAAM,CAACT,IAArB,CAFlB,CAPF,CADF;AAcD,CAlDD;;AAoDA,eAAeL,mBAAf","sourcesContent":["import React from \"react\";\nimport styled from \"styled-components\";\nimport { Wheelchair } from \"@styled-icons/foundation/Wheelchair\";\n\ninterface WrapperProps {\n  border: boolean;\n  color: string;\n  large: boolean;\n}\n\nconst Wrapper = styled.div<WrapperProps>`\n  align-items: center;\n  border: ${props => (props.border ? \"1px solid #333\" : \"none\")};\n  background-color: ${props => props.color};\n  border-radius: ${props => (props.large ? \"4px\" : \"20px\")};\n  display: flex;\n  justify-content: space-between;\n  margin-top: 0.25em;\n  max-width: 75px;\n  height: ${props => (props.large ? \"40px\" : \"30px\")};\n  padding: 0.25em 0.6em 0.25em 0.4em;\n  word-wrap: anywhere; /* this can often look quite bad, but helps encourage icons */\n`;\nconst StatusWrapper = styled.span`\n  flex: 1;\n  /* TODO: 0.25em negative margin to get centering correct? */\n\n  span {\n    display: block;\n  }\n`;\n\nconst TextWrapper = styled.span`\n  padding-top: 3px;\n  font-weight: 600;\n`;\n\n/**\n * Component which renders a label with a color and icon depending on\n * a given accessibility score. The color and icon are set by a given gradation map.\n */\nconst AccessibilityRating = ({\n  gradationMap,\n  grayscale = false,\n  large = false,\n  score\n}: {\n  gradationMap?: Record<\n    number,\n    { color: string; icon?: JSX.Element; text?: string }\n  >;\n  grayscale: boolean;\n  large: boolean;\n  score: number;\n}): JSX.Element => {\n  // Provide default mapping\n  const mapping = gradationMap || {\n    0.0: { color: \"#ffe4e5\", text: \"❌\" },\n    0.5: {\n      color: \"#dbe9ff\",\n      text: \"？\"\n    },\n    0.9: { color: \"#bfffb5\", text: \"✅\" }\n  };\n\n  // Find the highest (including equality) key for our score.\n  const mappedKey: number = parseFloat(\n    Object.keys(mapping)\n      .sort()\n      // Start at the top, so the first one that is less/equal to our score is the correct label\n      .reverse()\n      .find(key => parseFloat(key) <= score)\n  );\n\n  // External configuration may report \"0.0\" as 0, so include fallback\n  const mapped = mapping[mappedKey] || mapping[0.0];\n\n  return (\n    <Wrapper\n      border={grayscale}\n      color={grayscale ? \"transparent\" : mapped.color}\n      large={large}\n      title={mapped.text}\n    >\n      <Wheelchair style={{ flex: \"2\", height: \"100%\", minWidth: \"20px\" }} />\n      <StatusWrapper>\n        {/* Show either icon or text if no icon given */}\n        {mapped.icon || <TextWrapper>{mapped.text}</TextWrapper>}\n      </StatusWrapper>\n    </Wrapper>\n  );\n};\n\nexport default AccessibilityRating;\n"],"file":"accessibility-rating.js"}