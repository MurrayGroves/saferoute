import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _inherits from "@babel/runtime/helpers/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

import React, { Component } from "react";
import PropTypes from "prop-types";
import * as Styled from "../styled";

var ViewStopButton = /*#__PURE__*/function (_Component) {
  _inherits(ViewStopButton, _Component);

  var _super = _createSuper(ViewStopButton);

  function ViewStopButton() {
    var _this;

    _classCallCheck(this, ViewStopButton);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _this.onClick = function () {
      var _this$props = _this.props,
          onStopClick = _this$props.onStopClick,
          stopId = _this$props.stopId;
      onStopClick({
        stopId: stopId
      });
    };

    return _this;
  }

  _createClass(ViewStopButton, [{
    key: "render",
    value: function render() {
      var text = this.props.text;
      return /*#__PURE__*/React.createElement(Styled.ViewerButton, {
        onClick: this.onClick
      }, text);
    }
  }]);

  return ViewStopButton;
}(Component);

export { ViewStopButton as default };
ViewStopButton.propTypes = {
  onStopClick: PropTypes.func.isRequired,
  stopId: PropTypes.string.isRequired,
  text: PropTypes.string.isRequired
};
//# sourceMappingURL=view-stop-button.js.map