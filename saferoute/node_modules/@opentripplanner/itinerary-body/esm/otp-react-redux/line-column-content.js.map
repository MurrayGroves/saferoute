{"version":3,"sources":["../../src/otp-react-redux/line-column-content.js"],"names":["coreUtils","LocationIcon","PropTypes","React","styled","css","Circle","cssWalk","cssBicycle","cssCar","cssMicromobility","cssTransit","getLegCSS","mode","IconStacker","span","legLineBackgroundColor","leg","routeColor","itinerary","isTransit","undefined","barberPole","gap","LegLine","div","props","isFlex","StackedCircle","StackedCircleInner","StyledLocationIcon","LineColumnContent","interline","isDestination","lastLeg","legIndex","legBadge","from","bikeShareId","vertexType","propTypes","bool","isRequired","types","legType","number","defaultProps"],"mappings":"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","sourcesContent":["import coreUtils from \"@opentripplanner/core-utils\";\nimport LocationIcon from \"@opentripplanner/location-icon\";\nimport PropTypes from \"prop-types\";\nimport React from \"react\";\nimport styled, { css } from \"styled-components\";\nimport { Circle } from \"@styled-icons/fa-solid/Circle\";\n\nconst cssWalk = css`\n  background: radial-gradient(ellipse at center, #87cefa 40%, transparent 10%);\n  background-position: center -5px;\n  background-repeat: repeat-y;\n  background-size: 12px 12px;\n  left: 6px;\n  right: 6px;\n`;\n\nconst cssBicycle = css`\n  background: repeating-linear-gradient(\n    0deg,\n    red,\n    red 8px,\n    white 8px,\n    white 12.5px\n  );\n  left: 7.5px;\n  right: 7.5px;\n`;\n\nconst cssCar = css`\n  background: repeating-linear-gradient(\n    0deg,\n    grey,\n    grey 8px,\n    white 8px,\n    white 12.5px\n  );\n  left: 7.5px;\n  right: 7.5px;\n`;\n\nconst cssMicromobility = css`\n  background: repeating-linear-gradient(\n    0deg,\n    #f5a729,\n    #f5a729 8px,\n    white 8px,\n    white 12.5px\n  );\n  left: 7.5px;\n  right: 7.5px;\n`;\n\nconst cssTransit = css`\n  background-color: gray;\n  left: 5px;\n  right: 5px;\n`;\n\nfunction getLegCSS(mode) {\n  switch (mode) {\n    case \"WALK\":\n      return cssWalk;\n    case \"BICYCLE\":\n    case \"BICYCLE_RENT\":\n      return cssBicycle;\n    case \"CAR\":\n      return cssCar;\n    case \"MICROMOBILITY\":\n    case \"MICROMOBILITY_RENT\":\n      return cssMicromobility;\n    default:\n      return cssTransit;\n  }\n}\n\nconst IconStacker = styled.span`\n  position: absolute;\n  width: 100%;\n  top: 3px;\n  z-index: 20;\n`;\n\nconst legLineBackgroundColor = ({ leg, routeColor }) => {\n  const { mode } = leg;\n  return coreUtils.itinerary.isTransit(mode)\n    ? routeColor\n      ? `#${routeColor}`\n      : \"#000088\"\n    : undefined;\n};\n\n/**\n * Generates background-image CSS for \"barber pole\" effect\n * @param routeColor  the background color. Assumed to be hex.\n */\nexport const barberPole = (routeColor, gap = 5) => `repeating-linear-gradient( \n  -45deg, \n  ${routeColor}30, \n  ${routeColor}30 ${gap}px, \n  ${routeColor} ${gap}px, \n  ${routeColor} ${gap * 2}px\n  );`;\n\nconst LegLine = styled.div`\n  ${props => getLegCSS(props.leg.mode)}\n\n  /* Disabling CSS order rules is the only way to ensure styles override each other properly */\n  /* stylelint-disable declaration-block-no-shorthand-property-overrides */ \n  background-color: ${props => legLineBackgroundColor(props)};\n  background: ${props =>\n    coreUtils.itinerary.isFlex(props.leg)\n      ? barberPole(legLineBackgroundColor(props))\n      : undefined};\n  bottom: -11px;\n  position: absolute;\n  top: 11px;\n  z-index: 10;\n`;\n\nconst StackedCircle = styled(Circle)`\n  left: 0;\n  line-height: inherit;\n  position: absolute;\n  text-align: center;\n  width: 100%;\n`;\n\nconst StackedCircleInner = styled(StackedCircle)`\n  top: 3px;\n`;\n\nconst StyledLocationIcon = styled(LocationIcon)`\n  left: 0;\n  position: absolute;\n  text-align: center;\n  width: 100%;\n`;\n\nexport default function LineColumnContent({\n  interline,\n  isDestination,\n  lastLeg,\n  leg,\n  legIndex\n}) {\n  let legBadge;\n  if (interline) {\n    // Interlined. Don't create a leg badge as a stop marker should be inserted\n    // from the place name\n  } else if (isDestination) {\n    // Destination\n    legBadge = (\n      <>\n        <StackedCircleInner size={14} color=\"white\" />\n        <StyledLocationIcon size={20} type=\"to\" />\n      </>\n    );\n  } else if (legIndex === 0) {\n    // Origin\n    legBadge = (\n      <>\n        <StackedCircleInner size={14} color=\"white\" />\n        <StyledLocationIcon size={20} type=\"from\" />\n      </>\n    );\n  } else if (\n    leg.from.bikeShareId ||\n    (lastLeg.from.bikeShareId && leg.mode === \"WALK\")\n  ) {\n    // start or end of a bike rental leg (not including origin or\n    // destination)\n    legBadge = <StackedCircle size={17} color=\"red\" />;\n  } else if (\n    leg.from.vertexType === \"VEHICLERENTAL\" ||\n    (lastLeg.from.vertexType === \"VEHICLERENTAL\" && leg.mode === \"WALK\")\n  ) {\n    // start or end of a vehicle rental leg (not including origin or\n    // destination)\n    legBadge = <StackedCircle size={17} color=\"#f5a729\" />;\n  } else if (\n    (leg.mode === \"CAR\" && lastLeg.mode === \"WALK\") ||\n    (lastLeg.mode === \"CAR\" && leg.mode === \"WALK\")\n  ) {\n    // start or end of a car rental/TNC/P&R leg (not including origin or\n    // destination)\n    legBadge = <StackedCircle size={17} color=\"#888\" />;\n  } else {\n    legBadge = (\n      <>\n        <StackedCircle size={20} color=\"black\" />\n        <StackedCircleInner size={14} color=\"white\" />\n      </>\n    );\n  }\n\n  return (\n    <>\n      {!isDestination && <LegLine leg={leg} routeColor={leg.routeColor} />}\n      <IconStacker>{legBadge}</IconStacker>\n    </>\n  );\n}\n\nLineColumnContent.propTypes = {\n  /** whether this leg is an interlined-transit leg */\n  interline: PropTypes.bool.isRequired,\n  /** whether this place row represents the destination */\n  isDestination: PropTypes.bool.isRequired,\n  /** Contains details about leg object that is being displayed */\n  lastLeg: coreUtils.types.legType,\n  /** Contains details about leg object that is being displayed */\n  leg: coreUtils.types.legType.isRequired,\n  /** the index of the leg in the itinerary leg list */\n  legIndex: PropTypes.number.isRequired\n};\n\nLineColumnContent.defaultProps = {\n  /** can be null if it's the first leg */\n  lastLeg: null\n};\n"],"file":"line-column-content.js"}