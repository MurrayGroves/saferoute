{"version":3,"sources":["../../src/geocoders/abstract-geocoder.ts"],"names":["fromCoordinates","Geocoder","geocoderApi","geocoderConfig","api","query","autocomplete","getAutocompleteQuery","then","rewriteAutocompleteResponse","bind","feature","geometry","type","location","coordinates","name","properties","label","rawGeocodedFeature","Promise","resolve","reject","Error","reverse","getReverseQuery","rewriteReverseResponse","search","getSearchQuery","rewriteSearchResponse","apiKey","baseUrl","boundary","focusPoint","options","url","undefined","format","reverseUseFeatureCollection","response"],"mappings":"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","sourcesContent":["import { fromCoordinates } from \"@conveyal/lonlat\";\n\n// Prettier does not support typescript annotation\n// eslint-disable-next-line prettier/prettier\nimport type { Feature } from \"geojson\"\nimport type { GeocoderConfig, ReverseQuery, AutocompleteQuery, SearchQuery, MultiGeocoderResponse, SingleGeocoderResponse, SingleOrMultiGeocoderResponse } from \"./types\"\n\n/**\n * The exact format of the Geocoder response depends on the specific geocoder implementation\n */\ntype GeocoderAPI = {\n  autocomplete: (query: AutocompleteQuery) => Promise<unknown>;\n  reverse: (query: ReverseQuery) => Promise<unknown>;\n  search: (query: SearchQuery) => Promise<unknown>;\n};\n\n/**\n * Create customized geocoder functions given a certain geocoding API, the\n * config for the geocoder and response rewrite functions specific to this\n * application. Any geocoder API that is added is expected to have an API that\n * behaves very closely to https://github.com/conveyal/isomorphic-mapzen-search\n */\nexport default class Geocoder {\n  geocoderConfig: GeocoderConfig;\n\n  api: GeocoderAPI;\n\n  constructor(geocoderApi?: GeocoderAPI, geocoderConfig?: GeocoderConfig) {\n    this.api = geocoderApi;\n    this.geocoderConfig = geocoderConfig;\n  }\n\n  /**\n   * Perform an autocomplete query, e.g. using partial text of a possible\n   * address or POI, attempt to find possible matches.\n   */\n  autocomplete(query: AutocompleteQuery): Promise<MultiGeocoderResponse> {\n    return this.api\n      .autocomplete(this.getAutocompleteQuery(query))\n      .then(this.rewriteAutocompleteResponse.bind(this));\n  }\n\n  /**\n   * Get an application-specific data structure from a given feature. The\n   * feature is either the result of an autocomplete or a search query. This\n   * function returns a Promise because sometimes an asynchronous action\n   * needs to be taken to translate a feature into a location. For example,\n   * the ArcGIS autocomplete service returns results that lack full address\n   * data and GPS and it is expected that an extra call to the `search` API is\n   * done to obtain that detailed data.\n   */\n  getLocationFromGeocodedFeature(\n    feature: Feature\n  ): Promise<SingleGeocoderResponse> {\n    if (feature.geometry.type === \"Point\") {\n      const location: SingleGeocoderResponse = {\n        ...fromCoordinates(feature.geometry.coordinates),\n        name: feature.properties.label,\n        rawGeocodedFeature: feature\n      };\n      return Promise.resolve(location);\n    }\n    return Promise.reject(new Error(\"Feature is not of type Point.\"));\n  }\n\n  /**\n   * Do a reverse-geocode, i.e. get address information and attributes given a\n   * GPS coordinate.\n   */\n  reverse(query: ReverseQuery): Promise<MultiGeocoderResponse | SingleGeocoderResponse> {\n    return this.api\n      .reverse(this.getReverseQuery(query))\n      .then(this.rewriteReverseResponse.bind(this));\n  }\n\n  /**\n   * Perform a search query. A search query is different from autocomplete in\n   * that it is assumed that the text provided is more or less a complete\n   * well-formatted address.\n   */\n  search(query: SearchQuery): Promise<MultiGeocoderResponse> {\n    return this.api\n      .search(this.getSearchQuery(query))\n      .then(this.rewriteSearchResponse.bind(this));\n  }\n\n  /**\n   * Default autocomplete query generator\n   */\n  getAutocompleteQuery(query: AutocompleteQuery): AutocompleteQuery {\n    const {\n      apiKey,\n      baseUrl,\n      boundary,\n      focusPoint,\n      options\n    } = this.geocoderConfig;\n    return {\n      apiKey,\n      boundary,\n      focusPoint,\n      options,\n      // TODO: Hard coding something like an /autocomplete endpoint path in here is not very abstract.\n      url: baseUrl ? `${baseUrl}/autocomplete` : undefined,\n      ...query\n    };\n  }\n\n  /**\n   * Default reverse query generator\n   */\n  getReverseQuery(query: ReverseQuery): ReverseQuery {\n    const { apiKey, baseUrl, options } = this.geocoderConfig;\n    return {\n      apiKey,\n      format: !this.geocoderConfig?.reverseUseFeatureCollection, // keep result as GeoJSON if we're supposed to have a feature collection\n      options,\n      url: baseUrl ? `${baseUrl}/reverse` : undefined,\n      ...query\n    };\n  }\n\n  /**\n   * Default search query generator.\n   */\n  getSearchQuery(query: SearchQuery): SearchQuery {\n    const {\n      apiKey,\n      baseUrl,\n      boundary,\n      focusPoint,\n      options\n    } = this.geocoderConfig;\n    return {\n      apiKey,\n      boundary,\n      focusPoint,\n      options,\n      url: baseUrl ? `${baseUrl}/search` : undefined,\n      format: false, // keep as returned GeoJSON,\n      ...query\n    };\n  }\n\n  /**\n   * Default rewriter for autocomplete responses\n   * Response type is unknown because it depends on the specific Geocoder implementation.\n   */\n  rewriteAutocompleteResponse(response: unknown): MultiGeocoderResponse {\n    return response as MultiGeocoderResponse;\n  }\n\n  /**\n   * Default rewriter for reverse responses\n   * Response type is unknown because it depends on the specific Geocoder implementation.\n   * Reverse response can use either Single or MultiGeocoderResponse based on GeocoderConfig.reverseUseFeatureCollection\n   */\n  rewriteReverseResponse(response: unknown): SingleOrMultiGeocoderResponse {\n    return response as SingleOrMultiGeocoderResponse;\n  }\n\n  /**\n   * Default rewriter for search responses\n   * Response type is unknown because it depends on the specific Geocoder implementation.\n   */\n  rewriteSearchResponse(response: unknown): MultiGeocoderResponse {\n    return response as MultiGeocoderResponse;\n  }\n}\n"],"file":"abstract-geocoder.js"}