{"version":3,"sources":["../../src/geocoders/arcgis.js"],"names":["fromCoordinates","normalize","Geocoder","ArcGISGeocoder","feature","geometry","prototype","getLocationFromGeocodedFeature","api","search","magicKey","text","then","response","firstFeature","features","location","coordinates","name","properties","label","rawGeocodedFeature","filter","isCollection","map","geocoderConfig","reverseUseFeatureCollection","query","lat","lon"],"mappings":";;;;;;;;;;;;;;;AAAA,SAASA,eAAT,EAA0BC,SAA1B,QAA2C,kBAA3C;AAEA,OAAOC,QAAP,MAAqB,qBAArB;AAEA;AACA;AACA;AACA;AACA;AACA;;IACqBC,c;;;;;;;;;;;;;;AACnB;AACF;AACA;AACA;AACA;AACE,4CAA+BC,OAA/B,EAAwC;AACtC;AACA;AACA,UAAIA,OAAO,CAACC,QAAZ,EAAsB;AACpB,eAAOH,QAAQ,CAACI,SAAT,CAAmBC,8BAAnB,CAAkDH,OAAlD,CAAP;AACD,OALqC,CAMtC;AACA;;;AACA,aAAO,KAAKI,GAAL,CACJC,MADI,CACG;AAAEC,QAAAA,QAAQ,EAAEN,OAAO,CAACM,QAApB;AAA8BC,QAAAA,IAAI,EAAEP,OAAO,CAACO;AAA5C,OADH,EAEJC,IAFI,CAEC,UAAAC,QAAQ,EAAI;AAChB,YAAMC,YAAY,GAAGD,QAAQ,CAACE,QAAT,CAAkB,CAAlB,CAArB;AACA,YAAMC,QAAQ,GAAGhB,eAAe,CAACc,YAAY,CAACT,QAAb,CAAsBY,WAAvB,CAAhC;AACAD,QAAAA,QAAQ,CAACE,IAAT,GAAgBJ,YAAY,CAACK,UAAb,CAAwBC,KAAxC;AACAJ,QAAAA,QAAQ,CAACK,kBAAT,GAA8BP,YAA9B;AACA,eAAOE,QAAP;AACD,OARI,CAAP;AASD;AAED;AACF;AACA;AACA;;;;WACE,qCAA4BH,QAA5B,EAAsC;AACpC,aAAO;AACL;AACA;AACAE,QAAAA,QAAQ,EAAEF,QAAQ,CAACE,QAAT,CACPO,MADO,CACA,UAAAlB,OAAO;AAAA,iBAAI,CAACA,OAAO,CAACmB,YAAb;AAAA,SADP,EAER;AAFQ,SAGPC,GAHO,CAGH,UAAApB,OAAO;AAAA,iDACPA,OADO;AAEVe,YAAAA,UAAU,EAAE;AACVC,cAAAA,KAAK,EAAEhB,OAAO,CAACO;AADL;AAFF;AAAA,SAHJ;AAHL,OAAP;AAaD;AAED;AACF;AACA;AACA;;;;WACE,gCAAuBE,QAAvB,EAAiC;AAAA;;AAC/B,kCAAI,KAAKY,cAAT,iDAAI,qBAAqBC,2BAAzB,EAAsD,OAAOb,QAAP;AAEtD,UAAQE,QAAR,GAA4BF,QAA5B,CAAQE,QAAR;AAAA,UAAkBY,KAAlB,GAA4Bd,QAA5B,CAAkBc,KAAlB;;AACA,uBAAqB1B,SAAS,CAAC0B,KAAD,CAA9B;AAAA,UAAQC,GAAR,cAAQA,GAAR;AAAA,UAAaC,GAAb,cAAaA,GAAb;;AACA,UAAMf,YAAY,GAAGC,QAAQ,CAAC,CAAD,CAA7B;AACA,aAAO;AACLa,QAAAA,GAAG,EAAHA,GADK;AAELC,QAAAA,GAAG,EAAHA,GAFK;AAGLX,QAAAA,IAAI,EAAEJ,YAAY,CAACK,UAAb,CAAwBC,KAHzB;AAILC,QAAAA,kBAAkB,EAAEP;AAJf,OAAP;AAMD;;;;EA7DyCZ,Q;;SAAvBC,c","sourcesContent":["import { fromCoordinates, normalize } from \"@conveyal/lonlat\";\n\nimport Geocoder from \"./abstract-geocoder\";\n\n/**\n * Geocoder implementation for the ArcGIS geocoder.\n * See https://developers.arcgis.com/rest/geocode/api-reference/overview-world-geocoding-service.htm\n *\n * @extends Geocoder\n */\nexport default class ArcGISGeocoder extends Geocoder {\n  /**\n   * Using the given magicKey and text, perform a search query to get detailed\n   * address and GPS data. Return data in an application-specific location\n   * format.\n   */\n  getLocationFromGeocodedFeature(feature) {\n    // If feature was returned from 'search' query, it will already be\n    // structured properly.\n    if (feature.geometry) {\n      return Geocoder.prototype.getLocationFromGeocodedFeature(feature);\n    }\n    // If feature returned from autocomplete, we need to use the magicKey to get\n    // the location's coordinates.\n    return this.api\n      .search({ magicKey: feature.magicKey, text: feature.text })\n      .then(response => {\n        const firstFeature = response.features[0];\n        const location = fromCoordinates(firstFeature.geometry.coordinates);\n        location.name = firstFeature.properties.label;\n        location.rawGeocodedFeature = firstFeature;\n        return location;\n      });\n  }\n\n  /**\n   * Rewrite an autocomplete response into an application specific data format.\n   * Also, filter out any results that are collections.\n   */\n  rewriteAutocompleteResponse(response) {\n    return {\n      // remove any autocomplete results that are collections\n      // (eg multiple Starbucks)\n      features: response.features\n        .filter(feature => !feature.isCollection)\n        // add label property so location-field can handle things ok\n        .map(feature => ({\n          ...feature,\n          properties: {\n            label: feature.text\n          }\n        }))\n    };\n  }\n\n  /**\n   * Rewrite the response into an application-specific data format using the\n   * first feature returned from the geocoder.\n   */\n  rewriteReverseResponse(response) {\n    if (this.geocoderConfig?.reverseUseFeatureCollection) return response;\n\n    const { features, query } = response;\n    const { lat, lon } = normalize(query);\n    const firstFeature = features[0];\n    return {\n      lat,\n      lon,\n      name: firstFeature.properties.label,\n      rawGeocodedFeature: firstFeature\n    };\n  }\n}\n"],"file":"arcgis.js"}