{"version":3,"sources":["../../src/geocoders/here.ts"],"names":["Geocoder","hereResultTypeToPeliasLayerMap","houseNumber","place","convertHereToGeojson","hereFeature","scoring","categories","address","resultType","title","position","extraFields","confidence","queryScore","addendum","geometry","type","coordinates","lng","lat","properties","country","countryName","country_a","countryCode","country_code","county","housenumber","label","layer","locality","city","name","neighbourhood","district","postalcode","postalCode","region","state","source","street","HereGeocoder","items","point","geocoderConfig","reverseUseFeatureCollection","features","map","firstItem","rawGeocodedFeature","response","filter","item"],"mappings":"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","sourcesContent":["// Prettier does not support typescript annotation\n// eslint-disable-next-line prettier/prettier\nimport type { Feature } from \"geojson\"\nimport type { HereResponse, Item } from \"../apis/here/types\";\nimport type { MultiGeocoderResponse, SingleOrMultiGeocoderResponse } from \"./types\";\n\nimport Geocoder from \"./abstract-geocoder\";\n\nconst hereResultTypeToPeliasLayerMap = {\n  houseNumber: \"address\",\n  place: \"venue\"\n};\n\nconst convertHereToGeojson = (hereFeature: Item): Feature => {\n  const { scoring, categories, address, resultType, title, position } = hereFeature;\n  const extraFields: { confidence?: number; addendum?: any } = {};\n  if (scoring) {\n    extraFields.confidence = scoring.queryScore;\n  }\n  if (categories) {\n    extraFields.addendum = {\n      categories\n    };\n  }\n\n  return {\n    geometry: {\n      type: \"Point\",\n      coordinates: [position.lng, position.lat]\n    },\n    properties: {\n      country: address.countryName,\n      country_a: address.countryCode,\n      country_code: address.countryCode,\n      county: address.county,\n      housenumber: address.houseNumber,\n      label: address.label,\n      layer: hereResultTypeToPeliasLayerMap[resultType]\n        ? hereResultTypeToPeliasLayerMap[resultType]\n        : resultType,\n      ...extraFields,\n      locality: address.city,\n      name: title,\n      neighbourhood: address.district,\n      postalcode: address.postalCode,\n      region: address.state,\n      source: \"here\",\n      street: address.street\n    },\n    type: \"Feature\"\n  };\n};\n\nexport default class HereGeocoder extends Geocoder {\n  rewriteReverseResponse({ items, point }: HereResponse): SingleOrMultiGeocoderResponse {\n    if (this.geocoderConfig?.reverseUseFeatureCollection) {\n      return {\n        features: items.map(convertHereToGeojson),\n        type: \"FeatureCollection\",\n      }\n    } \n    // Render the result as a single geocoder response\n    const firstItem = items[0];\n    return {\n      ...point,\n      name: firstItem.title,\n      rawGeocodedFeature: convertHereToGeojson(firstItem)\n    }\n    \n  }\n\n  rewriteAutocompleteResponse(response: HereResponse): MultiGeocoderResponse {\n    const { items } = response;\n    return {\n      features: items\n      // Here has various types of responses, some of which are not locations.\n      // We only want the actual places, so throw out any without a position.\n      ?.filter(item => !!item.position)\n      .map(convertHereToGeojson),\n      type: \"FeatureCollection\"\n    };\n  }\n\n  rewriteSearchResponse({ items }: HereResponse): MultiGeocoderResponse {\n    return {\n      features: items.map(convertHereToGeojson),\n      type: \"FeatureCollection\"\n    };\n  }\n}\n"],"file":"here.js"}