{"version":3,"sources":["../src/index.ts"],"names":["arcgis","pelias","memoize","here","photon","otp","ArcGISGeocoder","NoApiGeocoder","PeliasGeocoder","HereGeocoder","PhotonGeocoder","OTPGeocoder","getGeocoder","geocoderConfig","type","console","error"],"mappings":"AAAA,OAAO,KAAKA,MAAZ,MAAwB,mCAAxB;AACA,OAAO,KAAKC,MAAZ,MAAwB,0BAAxB;AACA,OAAOC,OAAP,MAAoB,gBAApB;AACA,OAAO,KAAKC,IAAZ,MAAsB,aAAtB;AACA,OAAO,KAAKC,MAAZ,MAAwB,eAAxB;AACA,OAAO,KAAKC,GAAZ,MAAqB,YAArB;AAEA,OAAOC,cAAP,MAA2B,oBAA3B;AACA,OAAOC,aAAP,MAA0B,mBAA1B;AACA,OAAOC,cAAP,MAA2B,oBAA3B;AACA,OAAOC,YAAP,MAAyB,kBAAzB;AACA,OAAOC,cAAP,MAA2B,oBAA3B;AACA,OAAOC,WAAP,MAAwB,iBAAxB,C,CAEA;AACA;;AAGA;AACA,IAAMC,WAAW,GAAGV,OAAO,CAAC,UAACW,cAAD,EAAuD;AACjF,MAAI,CAACA,cAAD,IAAmB,CAACA,cAAc,CAACC,IAAvC,EAA6C;AAC3C,WAAO,IAAIP,aAAJ,EAAP;AACD;;AACD,MAAQO,IAAR,GAAiBD,cAAjB,CAAQC,IAAR;;AACA,UAAQA,IAAR;AACE,SAAK,QAAL;AACE,aAAO,IAAIR,cAAJ,CAAmBN,MAAnB,EAA2Ba,cAA3B,CAAP;;AACF,SAAK,QAAL;AACE,aAAO,IAAIL,cAAJ,CAAmBP,MAAnB,EAA2BY,cAA3B,CAAP;;AACF,SAAK,MAAL;AACE,aAAO,IAAIJ,YAAJ,CAAiBN,IAAjB,EAAuBU,cAAvB,CAAP;;AACF,SAAK,QAAL;AACE,aAAO,IAAIH,cAAJ,CAAmBN,MAAnB,EAA2BS,cAA3B,CAAP;;AACF,SAAK,KAAL;AACE,aAAO,IAAIF,WAAJ,CAAgBN,GAAhB,EAAqBQ,cAArB,CAAP;;AACF;AACEE,MAAAA,OAAO,CAACC,KAAR,oCAAyCF,IAAzC;AACA,aAAO,IAAIP,aAAJ,EAAP;AAbJ;AAeD,CApB0B,CAA3B;AAsBA,eAAeK,WAAf","sourcesContent":["import * as arcgis from \"@conveyal/geocoder-arcgis-geojson\";\nimport * as pelias from \"isomorphic-mapzen-search\";\nimport memoize from \"lodash.memoize\";\nimport * as here from \"./apis/here\";\nimport * as photon from \"./apis/photon\";\nimport * as otp from \"./apis/otp\";\n\nimport ArcGISGeocoder from \"./geocoders/arcgis\";\nimport NoApiGeocoder from \"./geocoders/noapi\";\nimport PeliasGeocoder from \"./geocoders/pelias\";\nimport HereGeocoder from \"./geocoders/here\";\nimport PhotonGeocoder from \"./geocoders/photon\";\nimport OTPGeocoder from \"./geocoders/otp\";\n\n// Prettier does not support typescript annotation\n// eslint-disable-next-line prettier/prettier\nimport type { AutocompleteQuery, GeocoderConfig, ReverseQuery, SearchQuery } from \"./geocoders/types\"\n\n// Create a memoized getter to avoid recreating new geocoders each time.\nconst getGeocoder = memoize((geocoderConfig: GeocoderConfig & { type: string }) => {\n  if (!geocoderConfig || !geocoderConfig.type) {\n    return new NoApiGeocoder();\n  }\n  const { type } = geocoderConfig;\n  switch (type) {\n    case \"ARCGIS\":\n      return new ArcGISGeocoder(arcgis, geocoderConfig);\n    case \"PELIAS\":\n      return new PeliasGeocoder(pelias, geocoderConfig);\n    case \"HERE\":\n      return new HereGeocoder(here, geocoderConfig);\n    case \"PHOTON\":\n      return new PhotonGeocoder(photon, geocoderConfig);\n    case \"OTP\":\n      return new OTPGeocoder(otp, geocoderConfig);\n    default:\n      console.error(`Unknown geocoder type: \"${type}\". Using NoApiGeocoder.`);\n      return new NoApiGeocoder();\n  }\n});\n\nexport default getGeocoder;\nexport type {\n  AutocompleteQuery,\n  GeocoderConfig,\n  ReverseQuery,\n  SearchQuery\n};\n"],"file":"index.js"}