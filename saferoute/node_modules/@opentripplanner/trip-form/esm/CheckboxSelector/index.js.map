{"version":3,"sources":["../../src/CheckboxSelector/index.tsx"],"names":["React","useCallback","S","CheckboxSelector","className","label","name","onChange","style","value","handleChange","evt","target","checked","id","finalValue"],"mappings":";AACA,OAAOA,KAAP,IAA2CC,WAA3C,QAA8D,OAA9D;AAEA,OAAO,KAAKC,CAAZ,MAAmB,WAAnB,C,CAEA;;AA8BA;AACA;AACA;AACA,eAAe,SAASC,gBAAT,OAOyB;AAAA,4BANtCC,SAMsC;AAAA,MANtCA,SAMsC,+BAN1B,IAM0B;AAAA,wBALtCC,KAKsC;AAAA,MALtCA,KAKsC,2BAL9B,IAK8B;AAAA,uBAJtCC,IAIsC;AAAA,MAJtCA,IAIsC,0BAJ/B,IAI+B;AAAA,2BAHtCC,QAGsC;AAAA,MAHtCA,QAGsC,8BAH3B,IAG2B;AAAA,MAFtCC,KAEsC,QAFtCA,KAEsC;AAAA,wBADtCC,KACsC;AAAA,MADtCA,KACsC,2BAD9B,IAC8B;AACtC,MAAMC,YAAY,GAAGT,WAAW,CAC9B,UAACU,GAAD,EAAwC;AACtC,QAAI,OAAOJ,QAAP,KAAoB,UAAxB,EAAoC;AAClCA,MAAAA,QAAQ,qBACLD,IADK,EACEK,GAAG,CAACC,MAAJ,CAAWC,OADb,EAAR;AAGD;AACF,GAP6B,EAQ9B,CAACN,QAAD,CAR8B,CAAhC;AAWA,MAAMO,EAAE,4BAAqBR,IAArB,CAAR;AACA,MAAMS,UAAU,GAAG,OAAON,KAAP,KAAiB,QAAjB,GAA4BA,KAAK,KAAK,MAAtC,GAA+CA,KAAlE;AAEA,sBACE;AAAK,IAAA,SAAS,EAAEL,SAAhB;AAA2B,IAAA,KAAK,EAAEI;AAAlC,kBACE;AACE,IAAA,EAAE,EAAEM,EADN;AAEE,IAAA,IAAI,EAAC,UAFP;AAGE,IAAA,OAAO,EAAEC,UAHX;AAIE,IAAA,QAAQ,EAAEL;AAJZ,IADF,eAOE,oBAAC,CAAD,CAAG,YAAH;AAAgB,IAAA,OAAO,EAAEI;AAAzB,KAA8BT,KAA9B,CAPF,CADF;AAWD","sourcesContent":["import CSS from \"csstype\";\nimport React, { ChangeEvent, ReactElement, useCallback } from \"react\";\n\nimport * as S from \"../styled\";\n\n// eslint-disable-next-line prettier/prettier\nimport type { QueryParamChangeEvent } from \"../types\";\n\ninterface CheckboxSelectorProps {\n  /**\n   * The CSS class name(s) to apply to this element.\n   */\n  className?: string;\n  /**\n   * The contents of the contained <label> control.\n   */\n  label?: ReactElement | string;\n  /**\n   * A unique name for the setting.\n   */\n  name?: string;\n  /**\n   * Triggered when the value of the <input> control changes.\n   */\n  onChange?: (evt: QueryParamChangeEvent) => void;\n  /**\n   * Standard React inline style prop.\n   */\n  style?: CSS.Properties;\n  /**\n   * The initial value for the contained <input> control.\n   */\n  value?: string | boolean;\n}\n\n/**\n * A wrapper that includes an <input type=\"select\" /> control and a <label> for the input control.\n */\nexport default function CheckboxSelector({\n  className = null,\n  label = null,\n  name = null,\n  onChange = null,\n  style,\n  value = null\n}: CheckboxSelectorProps): ReactElement {\n  const handleChange = useCallback(\n    (evt: ChangeEvent<HTMLInputElement>) => {\n      if (typeof onChange === \"function\") {\n        onChange({\n          [name]: evt.target.checked\n        });\n      }\n    },\n    [onChange]\n  );\n\n  const id = `id-query-param-${name}`;\n  const finalValue = typeof value === \"string\" ? value === \"true\" : value;\n\n  return (\n    <div className={className} style={style}>\n      <input\n        id={id}\n        type=\"checkbox\"\n        checked={finalValue}\n        onChange={handleChange}\n      />\n      <S.SettingLabel htmlFor={id}>{label}</S.SettingLabel>\n    </div>\n  );\n}\n"],"file":"index.js"}