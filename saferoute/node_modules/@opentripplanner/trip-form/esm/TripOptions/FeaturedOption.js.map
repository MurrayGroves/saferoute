{"version":3,"sources":["../../src/TripOptions/FeaturedOption.tsx"],"names":["coreUtils","React","QuestionCircle","accessModeIsWalkOnly","getCategoryModes","getCategoryPrimaryMode","getNonTransitModes","getSelectedModes","OptionButton","S","modeButtonAriaLabel","FeaturedOption","checkboxIcons","DetailedModeIcon","iconFillOverride","onQueryParamChange","queryParams","questionIcon","setFeaturedOption","supportedModes","mode","nonTransitModes","selectedCompanies","companies","split","selectedModes","option","category","categories","find","c","some","o","optionsAreCheckboxes","Boolean","selectOption","isChecked","company","filter","itinerary","isTransit","concat","join","id","options","map","index","companyIsSelected","modeIsSelected","m","length","image","label"],"mappings":"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","sourcesContent":["import coreUtils from \"@opentripplanner/core-utils\";\nimport React from \"react\";\nimport { QuestionCircle } from \"@styled-icons/fa-regular/QuestionCircle\";\n\nimport {\n  accessModeIsWalkOnly,\n  getCategoryModes,\n  getCategoryPrimaryMode,\n  getNonTransitModes,\n  getSelectedModes\n} from \"./util\";\nimport { CheckboxIcons, ModeOption, QueryProps } from \"./types\";\nimport OptionButton from \"./OptionButton\";\n\nimport * as S from \"./styled\";\n\n// todo: move this string to localization file (and possibly add more exact info on each particular mode)\nconst modeButtonAriaLabel =\n  \"Opens a dialog that describes this mode, with optional links to third party services.\";\n\nconst FeaturedOption = ({\n  checkboxIcons,\n  DetailedModeIcon,\n  iconFillOverride,\n  onQueryParamChange,\n  queryParams,\n  questionIcon,\n  setFeaturedOption,\n  supportedModes\n}: QueryProps & {\n  checkboxIcons?: CheckboxIcons;\n  iconFillOverride?: string;\n  questionIcon?: React.ReactElement;\n  setFeaturedOption(option: string): void;\n}): React.ReactElement => {\n  // No featured mode to show if walking to transit\n  if (accessModeIsWalkOnly(queryParams?.mode)) return null;\n  const nonTransitModes = getNonTransitModes(queryParams?.mode);\n  const selectedCompanies = queryParams?.companies?.split(\",\") || [];\n  const selectedModes = getSelectedModes(queryParams);\n  const option = nonTransitModes[0];\n  const category = supportedModes.categories.find(c =>\n    getCategoryModes(c).some(o => o === option)\n  );\n  const optionsAreCheckboxes = Boolean(category.mode);\n\n  // FIXME: the entire selectOption method could probably be repalced\n  // with a better useEffect hook\n\n  const selectOption = (isChecked: boolean, o: ModeOption) => {\n    let mode = selectedModes;\n    let company = selectedCompanies;\n    if (isChecked) {\n      // Un-check the company box if dealing with checkboxes. Otherwise, do nothing.\n      if (optionsAreCheckboxes) {\n        company = selectedCompanies.filter(c => c !== o.company);\n        // Do nothing if already radio button is already checked.\n      } else {\n        return;\n      }\n    } else {\n      // if un checked, set/add company and set mode (FIXME: what about car/walk)\n      if (o.mode) {\n        mode = selectedModes\n          .filter(coreUtils.itinerary.isTransit)\n          .concat([o.mode]);\n      }\n      if (o.company) {\n        company = optionsAreCheckboxes\n          ? selectedCompanies.concat([o.company])\n          : [o.company];\n      } else {\n        company = [];\n      }\n    }\n    onQueryParamChange(\n      {\n        companies: company.join(\",\"),\n        mode: mode.join(\",\")\n      },\n      category.id\n    );\n  };\n\n  return (\n    <S.FeaturedOptionContainer>\n      <div>\n        {category.options.map((o, index) => {\n          const companyIsSelected = selectedCompanies.some(\n            c => c === o.company\n          );\n          const modeIsSelected = selectedModes.some(m => m === o.mode);\n          const isChecked = optionsAreCheckboxes\n            ? companyIsSelected\n            : o.company\n            ? companyIsSelected && modeIsSelected\n            : modeIsSelected;\n\n          return (\n            <OptionButton\n              checkboxIcons={checkboxIcons}\n              checked={isChecked}\n              disabled={isChecked && selectedCompanies.length === 1}\n              iconFillOverride={iconFillOverride}\n              image={o.image}\n              key={index}\n              label={o.label}\n              onClick={() => selectOption(isChecked, o)}\n              selected={isChecked}\n            />\n          );\n        })}\n      </div>\n      <S.FeaturedOptionQuestionContainer\n        aria-label={modeButtonAriaLabel}\n        onClick={() => setFeaturedOption(option)}\n        onKeyPress={() => setFeaturedOption(option)}\n        role=\"link\"\n        tabIndex={0}\n      >\n        <S.QuestionButton aria-label={modeButtonAriaLabel}>\n          {questionIcon || <QuestionCircle />}\n        </S.QuestionButton>\n        <S.FeaturedOptionImageWrapper>\n          {(DetailedModeIcon && (\n            <DetailedModeIcon mode={getCategoryPrimaryMode(category)} />\n          )) || <S.Image src={category.image} />}\n        </S.FeaturedOptionImageWrapper>\n      </S.FeaturedOptionQuestionContainer>\n    </S.FeaturedOptionContainer>\n  );\n};\n\nexport default FeaturedOption;\n"],"file":"FeaturedOption.js"}