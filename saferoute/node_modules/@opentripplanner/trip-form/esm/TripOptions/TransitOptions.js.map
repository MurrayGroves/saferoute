{"version":3,"sources":["../../src/TripOptions/TransitOptions.tsx"],"names":["coreUtils","React","S","Checkbox","getSelectedModes","TransitOptions","checkboxIcons","DetailedModeIcon","onQueryParamChange","queryParams","supportedModes","transitModes","selectedModes","selectedTransit","filter","itinerary","isTransit","hasTransit","length","selectedAndVisibleTransit","forEach","m","some","t","mode","hidden","push","map","transitMode","allTransitEnabled","isChecked","label","concat","join","image","zIndex"],"mappings":"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","sourcesContent":["import coreUtils from \"@opentripplanner/core-utils\";\nimport React from \"react\";\n\nimport * as S from \"./styled\";\nimport Checkbox from \"./Checkbox\";\nimport { CheckboxIcons, QueryProps } from \"./types\";\nimport { getSelectedModes } from \"./util\";\n\nconst TransitOptions = ({\n  checkboxIcons,\n  DetailedModeIcon,\n  onQueryParamChange,\n  queryParams,\n  supportedModes\n}: {\n  checkboxIcons?: CheckboxIcons;\n} & QueryProps): JSX.Element => {\n  const { transitModes } = supportedModes;\n  const selectedModes = getSelectedModes(queryParams);\n  const selectedTransit = selectedModes.filter(coreUtils.itinerary.isTransit);\n  const hasTransit = selectedTransit.length > 0;\n  if (!hasTransit) return null;\n  const selectedAndVisibleTransit = [];\n  transitModes.forEach(m => {\n    if (selectedTransit.some(t => t === m.mode) && !m.hidden) {\n      selectedAndVisibleTransit.push(m);\n    }\n  });\n  return (\n    <S.TransitOptionsContainer>\n      {transitModes.map(transitMode => {\n        if (transitMode.hidden) return null;\n        const allTransitEnabled = selectedModes.some(m => m === \"TRANSIT\");\n        const isChecked =\n          allTransitEnabled || selectedModes.some(m => m === transitMode.mode);\n        return (\n          <Checkbox\n            ariaLabel={transitMode.label}\n            checkboxIcons={checkboxIcons}\n            checked={isChecked}\n            /* This prevents the user from de-selecting a transit mode when it is the only one selected.\n            the selectedModes length being 3 indicates that only one mode is selected. GONDOLA, WALK, and the mode. */\n            disabled={isChecked && selectedModes.length === 3}\n            key={transitMode.mode}\n            inset\n            onClick={() => {\n              let mode = selectedModes;\n              // Remove mode from list if all transit is selected.\n              if (allTransitEnabled) {\n                mode = selectedModes\n                  .filter(m => m !== \"TRANSIT\")\n                  .concat(\n                    transitModes\n                      .filter(m => m.mode !== transitMode.mode)\n                      .map(m => m.mode)\n                  );\n              } else if (isChecked) {\n                // Handle unchecking.\n                // If this is the last visible transit mode, switch to WALK only.\n                mode =\n                  selectedAndVisibleTransit.length === 1\n                    ? [\"WALK\"]\n                    : selectedModes.filter(m => m !== transitMode.mode);\n              } else {\n                // Add mode to list.\n                mode = selectedModes.concat([transitMode.mode]);\n              }\n              onQueryParamChange({ mode: mode.join(\",\") });\n            }}\n            selected={isChecked}\n          >\n            {(DetailedModeIcon && (\n              <DetailedModeIcon mode={transitMode.mode} />\n            )) ||\n              (transitMode.image && (\n                <S.Image\n                  alt={`Image for ${transitMode.label}`}\n                  src={transitMode.image}\n                />\n              ))}\n            <span style={{ zIndex: 5 }}>{transitMode.label}</span>\n          </Checkbox>\n        );\n      })}\n    </S.TransitOptionsContainer>\n  );\n};\n\nexport default TransitOptions;\n"],"file":"TransitOptions.js"}