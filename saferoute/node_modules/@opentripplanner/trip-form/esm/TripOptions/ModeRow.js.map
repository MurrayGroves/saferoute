{"version":3,"sources":["../../src/TripOptions/ModeRow.tsx"],"names":["coreUtils","React","useRef","useEffect","categoryIsActive","getCategoryPrimaryMode","getSelectedModes","isServerEnv","S","Checkbox","ModeRow","checkboxIcons","onQueryParamChange","queryParamOverrides","queryParams","SimpleModeIcon","supportedModes","categories","selectedModes","selectedTransit","filter","itinerary","isTransit","hasTransit","length","selectedTransitString","join","setModeToTransit","companies","mode","initialRenderRef","current","scrollIntoView","behavior","block","inline","map","category","selectedModeAndCategoryActive","isChecked","type","onChangeMode","id","override","replace","includes","options","o","company","label"],"mappings":"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","sourcesContent":["import coreUtils from \"@opentripplanner/core-utils\";\nimport React, { useRef, useEffect } from \"react\";\n\nimport {\n  categoryIsActive,\n  getCategoryPrimaryMode,\n  getSelectedModes,\n  isServerEnv\n} from \"./util\";\nimport { CheckboxIcons, Modes, QueryParams } from \"./types\";\nimport * as S from \"./styled\";\n\nimport Checkbox from \"./Checkbox\";\n\nconst ModeRow = ({\n  checkboxIcons,\n  onQueryParamChange,\n  queryParamOverrides,\n  queryParams,\n  SimpleModeIcon,\n  supportedModes\n}: {\n  onQueryParamChange(paramsToUpdate: QueryParams, categoryId?: string): void;\n  checkboxIcons?: CheckboxIcons;\n  queryParamOverrides: { [key: string]: QueryParams };\n  queryParams: QueryParams;\n  SimpleModeIcon?: React.FunctionComponent<{ mode: string }>;\n  supportedModes: Modes;\n}): React.ReactElement => {\n  const { categories } = supportedModes;\n  const selectedModes = getSelectedModes(queryParams);\n  const selectedTransit = selectedModes.filter(coreUtils.itinerary.isTransit);\n  const hasTransit = selectedTransit.length > 0;\n  const selectedTransitString = selectedTransit.join(\",\") || \"TRANSIT\";\n  const setModeToTransit = () =>\n    onQueryParamChange({\n      companies: \"\",\n      mode: `${selectedTransitString},WALK`\n    });\n\n  // Scroll to active mode on initial render\n  // This ref is attached to every active mode checkbox\n  const initialRenderRef = useRef() as React.MutableRefObject<HTMLInputElement>;\n\n  useEffect(() => {\n    // Non-DOM environments don't support scrollIntoView\n    // Also disable for modes that have transit to prevent confusing\n    // and unnecessary scrolling\n    if (!isServerEnv && !hasTransit) {\n      initialRenderRef?.current?.scrollIntoView({\n        behavior: \"auto\",\n        // Ideally there is no vertical scrolling, but if this likely non-effective\n        // scrolling is acceptable, then it is simpler\n        block: \"end\",\n        inline: \"center\"\n      });\n    }\n  }, []);\n\n  return (\n    /* Not hiding the scrollbars here ensures the user can still scroll. Scrollbars are hidden using CSS. */\n    <S.ScrollableRow hideScrollbars={false}>\n      <Checkbox\n        ariaLabel=\"Go by Transit\"\n        checkboxIcons={checkboxIcons}\n        checked={hasTransit}\n        // Prettier conflicts with jsx style rules\n        // eslint-disable-next-line prettier/prettier\n        onClick={setModeToTransit}\n        selected={hasTransit}\n        SimpleModeIcon={SimpleModeIcon}\n      >\n        Go by Transit\n      </Checkbox>\n      {categories.map(category => {\n        const selectedModeAndCategoryActive = categoryIsActive(\n          category,\n          selectedModes\n        );\n        const isChecked = hasTransit\n          ? category.type === \"access\" && selectedModeAndCategoryActive\n          : category.type === \"exclusive\" && selectedModeAndCategoryActive;\n\n        const onChangeMode = () => {\n          // If clicking on a mode that's active, reset to transit only\n          if (isChecked) {\n            setModeToTransit();\n            return;\n          }\n\n          // Use override query if present\n          if (queryParamOverrides && queryParamOverrides[category.id]) {\n            const override = queryParamOverrides[category.id];\n            // Ensure exclusive modes that share IDs with non-exclusive modes don't have transit\n            if (category.type === \"exclusive\") {\n              override.mode = override.mode?.replace(\"TRANSIT,\", \"\");\n            }\n            // Ensure access modes that share IDs with exclusive modes include transit\n            if (\n              category.type !== \"exclusive\" &&\n              !override.mode?.includes(\"TRANSIT\")\n            ) {\n              override.mode = `TRANSIT,${override.mode}`;\n            }\n\n            onQueryParamChange(override, category.id);\n            return;\n          }\n\n          let mode = getCategoryPrimaryMode(category);\n          const companies =\n            typeof category.mode === \"undefined\"\n              ? \"\"\n              : category.options?.map(o => o.company).join(\",\") || \"\";\n          if (category.type === \"access\") {\n            mode = isChecked\n              ? selectedTransitString\n              : `${selectedTransitString},${mode}`;\n          }\n          onQueryParamChange({ companies, mode }, category.id);\n        };\n        // All Tri-Met categories either have a mode or the first option does\n        const mode =\n          category.mode || (category.options && category.options[0].mode);\n        return (\n          <Checkbox\n            ariaLabel={category.label}\n            checkboxIcons={checkboxIcons}\n            checked={isChecked}\n            key={`access-${category.label}`}\n            mode={mode}\n            onClick={onChangeMode}\n            innerRef={isChecked ? initialRenderRef : null}\n            selected={isChecked}\n            SimpleModeIcon={SimpleModeIcon}\n          >\n            {category.label}\n          </Checkbox>\n        );\n      })}\n    </S.ScrollableRow>\n  );\n};\n\nexport default ModeRow;\n"],"file":"ModeRow.js"}