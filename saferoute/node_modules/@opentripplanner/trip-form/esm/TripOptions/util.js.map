{"version":3,"sources":["../../src/TripOptions/util.ts"],"names":["coreUtils","getNonTransitModes","modeString","modes","split","filter","m","itinerary","isTransit","accessModeIsWalkOnly","nonTransitModes","length","getSelectedModes","queryParams","mode","categoryIsActive","category","selectedModes","some","options","isActive","forEach","o","getCategoryModes","map","getCategoryPrimaryMode","isServerEnv","navigator","userAgent","includes"],"mappings":"AAAA,OAAOA,SAAP,MAAsB,6BAAtB;AAIA,OAAO,SAASC,kBAAT,GAA6C;AAAA,MAAjBC,UAAiB,uEAAJ,EAAI;AAClD,MAAMC,KAAK,GAAG,CAAAD,UAAU,SAAV,IAAAA,UAAU,WAAV,YAAAA,UAAU,CAAEE,KAAZ,CAAkB,GAAlB,MAA0B,EAAxC;AACA,SAAOD,KAAK,CAACE,MAAN,CAAa,UAAAC,CAAC;AAAA,WAAI,CAACN,SAAS,CAACO,SAAV,CAAoBC,SAApB,CAA8BF,CAA9B,CAAL;AAAA,GAAd,CAAP;AACD;AAED,OAAO,SAASG,oBAAT,GAA+C;AAAA,MAAjBP,UAAiB,uEAAJ,EAAI;AACpD,MAAMQ,eAAe,GAAGT,kBAAkB,CAACC,UAAD,CAA1C;AACA,SACEQ,eAAe,CAACC,MAAhB,KAA2B,CAA3B,IACCD,eAAe,CAACC,MAAhB,KAA2B,CAA3B,IAAgCD,eAAe,CAAC,CAAD,CAAf,KAAuB,MAF1D;AAID;AAED,OAAO,SAASE,gBAAT,CAA0BC,WAA1B,EAAoD;AAAA;;AACzD,SAAO,CAAAA,WAAW,SAAX,IAAAA,WAAW,WAAX,iCAAAA,WAAW,CAAEC,IAAb,wEAAmBV,KAAnB,CAAyB,GAAzB,MAAiC,EAAxC;AACD;AAED,OAAO,IAAMW,gBAAgB,GAAG,SAAnBA,gBAAmB,CAC9BC,QAD8B,EAE9BC,aAF8B,EAG3B;AACH,MAAID,QAAQ,CAACF,IAAb,EAAmB;AACjB,WAAOG,aAAa,CAACC,IAAd,CAAmB,UAAAZ,CAAC;AAAA,aAAIA,CAAC,KAAKU,QAAQ,CAACF,IAAnB;AAAA,KAApB,CAAP;AACD;;AACD,MAAIE,QAAQ,CAACG,OAAb,EAAsB;AACpB,QAAIC,QAAQ,GAAG,KAAf;AACAJ,IAAAA,QAAQ,CAACG,OAAT,CAAiBE,OAAjB,CAAyB,UAAAC,CAAC,EAAI;AAC5B,UAAIL,aAAa,CAACC,IAAd,CAAmB,UAAAZ,CAAC;AAAA,eAAIA,CAAC,KAAKgB,CAAC,CAACR,IAAZ;AAAA,OAApB,CAAJ,EAA2C;AACzCM,QAAAA,QAAQ,GAAG,IAAX;AACD;AACF,KAJD;AAKA,WAAOA,QAAP;AACD;;AACD,SAAO,KAAP;AACD,CAjBM;AAmBP,OAAO,SAASG,gBAAT,CAA0BP,QAA1B,EAAwD;AAC7D,SAAOA,QAAQ,CAACF,IAAT,GAAgB,CAACE,QAAQ,CAACF,IAAV,CAAhB,GAAkCE,QAAQ,CAACG,OAAT,CAAiBK,GAAjB,CAAqB,UAAAF,CAAC;AAAA,WAAIA,CAAC,CAACR,IAAN;AAAA,GAAtB,CAAzC;AACD;AAED,OAAO,SAASW,sBAAT,CAAgCT,QAAhC,EAA4D;AACjE,SAAOO,gBAAgB,CAACP,QAAD,CAAhB,CAA2B,CAA3B,CAAP;AACD;AAED,OAAO,IAAMU,WAAW,GACtB,OAAOC,SAAP,KAAqB,WAArB,GACIA,SAAS,CAACC,SAAV,CAAoBC,QAApB,CAA6B,OAA7B,CADJ,GAEI,KAHC","sourcesContent":["import coreUtils from \"@opentripplanner/core-utils\";\n\nimport { Category, QueryParams } from \"./types\";\n\nexport function getNonTransitModes(modeString = \"\") {\n  const modes = modeString?.split(\",\") || [];\n  return modes.filter(m => !coreUtils.itinerary.isTransit(m));\n}\n\nexport function accessModeIsWalkOnly(modeString = \"\") {\n  const nonTransitModes = getNonTransitModes(modeString);\n  return (\n    nonTransitModes.length === 0 ||\n    (nonTransitModes.length === 1 && nonTransitModes[0] === \"WALK\")\n  );\n}\n\nexport function getSelectedModes(queryParams: QueryParams) {\n  return queryParams?.mode?.split(\",\") || [];\n}\n\nexport const categoryIsActive = (\n  category: Category,\n  selectedModes: Array<string>\n) => {\n  if (category.mode) {\n    return selectedModes.some(m => m === category.mode);\n  }\n  if (category.options) {\n    let isActive = false;\n    category.options.forEach(o => {\n      if (selectedModes.some(m => m === o.mode)) {\n        isActive = true;\n      }\n    });\n    return isActive;\n  }\n  return false;\n};\n\nexport function getCategoryModes(category: Category): string[] {\n  return category.mode ? [category.mode] : category.options.map(o => o.mode);\n}\n\nexport function getCategoryPrimaryMode(category: Category): string {\n  return getCategoryModes(category)[0];\n}\n\nexport const isServerEnv =\n  typeof navigator !== \"undefined\"\n    ? navigator.userAgent.includes(\"jsdom\")\n    : false;\n"],"file":"util.js"}