{"version":3,"sources":["../../src/SettingsSelectorPanel/index.tsx"],"names":["coreUtils","TriMetModeIcon","React","useCallback","useState","FormattedMessage","useIntl","ModeSelector","SubmodeSelector","GeneralSettingsPanel","S","getModeOptions","getTransitSubmodeOptions","getCompaniesForModeId","getCompaniesOptions","getBicycleOrMicromobilityModeOptions","getModeString","isBike","defaultMessages","getQueryParamMessagesWithI18n","itinerary","isMicromobility","isTransit","getSelectedCompanies","queryParams","companies","split","getSelectedModes","mode","modes","query","reduceOtpFlexModes","SettingsSelectorPanel","className","ModeIcon","onQueryParamChange","queryParamMessages","style","supportedCompanies","supportedModes","defaultAccessModeCompany","setDefaultAccessModeCompany","lastTransitModes","setLastTransitModes","selectedModes","selectedCompanies","handleQueryParamChange","queryParam","toggleSubmode","name","id","submodes","filter","o","after","newSubmodes","concat","idx","indexOf","subset","length","splice","push","join","handleMainModeChange","newModes","activeTransitModes","lastOrAllTransitModes","transitModes","map","defAccessModeCompany","nonTransitModes","finalModes","handleTransitModeChange","handleCompanyChange","undefined","intl","queryParamMessagesWithI18nAndCustomizations","modeOptions","m","comp","bikeModes","bicycleModes","scooterModes","micromobilityModes","submodeLabel","submodeCompaniesLabel","margin","paddingBottom","some"],"mappings":"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","sourcesContent":["import coreUtils from \"@opentripplanner/core-utils\";\nimport CSS from \"csstype\";\n// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n// @ts-ignore FIXME: Create TypeScript types for the icons package.\nimport { TriMetModeIcon } from \"@opentripplanner/icons\";\nimport React, { ReactElement, useCallback, useState } from \"react\";\nimport { FormattedMessage, useIntl } from \"react-intl\";\n\nimport ModeSelector from \"../ModeSelector\";\nimport SubmodeSelector from \"../SubmodeSelector\";\nimport GeneralSettingsPanel from \"../GeneralSettingsPanel\";\nimport * as S from \"../styled\";\nimport {\n  getModeOptions,\n  getTransitSubmodeOptions,\n  getCompaniesForModeId,\n  getCompaniesOptions,\n  getBicycleOrMicromobilityModeOptions,\n  getModeString,\n  isBike\n} from \"../util\";\n// eslint-disable-next-line prettier/prettier\nimport type {\n  ConfiguredCompany,\n  ConfiguredModes,\n  CustomQueryParameters,\n  ModeIconType,\n  QueryParamChangeEvent,\n  QueryParams\n} from \"../types\";\n\nimport {\n  defaultMessages,\n  getQueryParamMessagesWithI18n\n} from \"./query-params-i18n\";\n\nconst { isMicromobility, isTransit } = coreUtils.itinerary;\n\ninterface SettingsSelectorPanelProps {\n  /**\n   * The CSS class name to apply to this element.\n   */\n  className?: string;\n  /**\n   * The icon component for rendering mode icons. Defaults to the OTP-UI TriMetModeIcon component.\n   */\n  ModeIcon?: ModeIconType;\n  /**\n   * Triggered when a query parameter is changed.\n   * @param params An object that contains the new values for the parameter(s) that has (have) changed.\n   */\n  onQueryParamChange?: (evt: QueryParamChangeEvent) => void;\n  /**\n   * An object {parameterName: value, ...} whose attributes correspond to query parameters.\n   * For query parameter names and value formats,\n   * see https://github.com/opentripplanner/otp-ui/blob/master/packages/core-utils/src/__tests__/query.js#L14\n   */\n  queryParams?: QueryParams;\n  /**\n   * An optional object that defines customizations for certain query parameters\n   * to change the label or list of options (both text and values) displayed for the desired parameters.\n   * Customizations can be as few or as many as needed.\n   * For a given parameter, default values from core-utils are used if no customization is provided.\n   * If custom options are provided for a parameter, only those provided will be displayed.\n   *\n   * For query parameter names and value formats,\n   * see https://github.com/opentripplanner/otp-ui/blob/master/packages/core-utils/src/__tests__/query.js#L14\n   */\n  queryParamMessages?: CustomQueryParameters;\n  /**\n   * Standard React inline style prop.\n   */\n  style?: CSS.Properties;\n  /**\n   * An array of supported companies that will be displayed as options where applicable.\n   */\n  supportedCompanies?: ConfiguredCompany[];\n  /**\n   * Supported modes that will be displayed as primary, secondary, tertiary options.\n   */\n  supportedModes: ConfiguredModes;\n}\n\nfunction getSelectedCompanies(queryParams: QueryParams) {\n  const { companies } = queryParams;\n  return companies ? companies.split(\",\") : [];\n}\n\nfunction getSelectedModes(queryParams: QueryParams) {\n  const { mode } = queryParams;\n  const modes = mode ? mode.split(\",\") : [];\n\n  // Map OTP Flex modes to custom flex mode\n  return coreUtils.query.reduceOtpFlexModes(modes);\n}\n\n/**\n * The Settings Selector Panel allows the user to set trip search preferences,\n * such as modes, providers, and speed preferences.\n */\nexport default function SettingsSelectorPanel({\n  className = null,\n  ModeIcon = TriMetModeIcon,\n  onQueryParamChange = null,\n  queryParams = null,\n  queryParamMessages = null,\n  style = null,\n  supportedCompanies = [],\n  supportedModes = null\n}: SettingsSelectorPanelProps): ReactElement {\n  const [defaultAccessModeCompany, setDefaultAccessModeCompany] = useState(\n    null\n  );\n  const [lastTransitModes, setLastTransitModes] = useState([]);\n\n  const selectedModes = getSelectedModes(queryParams);\n  const selectedCompanies = getSelectedCompanies(queryParams);\n\n  const handleQueryParamChange = useCallback(\n    (queryParam: QueryParamChangeEvent) => {\n      if (typeof onQueryParamChange === \"function\") {\n        onQueryParamChange(queryParam);\n      }\n    },\n    [onQueryParamChange]\n  );\n\n  const toggleSubmode = useCallback(\n    (name, id, submodes, filter = o => o, after) => {\n      const newSubmodes = [].concat(submodes);\n      const idx = newSubmodes.indexOf(id);\n\n      // If the clicked mode is selected, then unselect it, o/w select it.\n      // Leave at least one selected, as in newplanner.trimet.org.\n      if (idx >= 0) {\n        const subset = newSubmodes.filter(filter);\n        if (subset.length >= 2) {\n          newSubmodes.splice(idx, 1);\n        }\n      } else {\n        newSubmodes.push(id);\n      }\n\n      if (newSubmodes.length !== submodes.length) {\n        handleQueryParamChange({\n          [name]: newSubmodes.join(\",\")\n        });\n        if (after) after(newSubmodes);\n      }\n    },\n    [onQueryParamChange]\n  );\n\n  const handleMainModeChange = useCallback(\n    (id: string) => {\n      const newModes = id.split(\"+\");\n\n      if (newModes[0] === \"TRANSIT\") {\n        const activeTransitModes = selectedModes.filter(isTransit);\n\n        const lastOrAllTransitModes =\n          lastTransitModes.length === 0\n            ? supportedModes.transitModes.map(getModeString)\n            : lastTransitModes;\n\n        const {\n          defaultAccessModeCompany: defAccessModeCompany,\n          companies,\n          nonTransitModes\n        } = getCompaniesForModeId(id, supportedCompanies);\n\n        // Add previously selected transit modes only if none were active.\n        const finalModes = (activeTransitModes.length > 0\n          ? activeTransitModes\n          : lastOrAllTransitModes\n        ).concat(nonTransitModes);\n\n        handleQueryParamChange({\n          companies: companies.join(\",\"),\n          mode: finalModes.join(\",\")\n        });\n\n        setDefaultAccessModeCompany(\n          defAccessModeCompany && defAccessModeCompany[0]\n        );\n      } else {\n        handleQueryParamChange({\n          companies: \"\", // New req: Don't list companies with this mode?\n          mode: newModes.join(\",\")\n        });\n      }\n    },\n    [onQueryParamChange, queryParams, lastTransitModes]\n  );\n\n  const handleTransitModeChange = useCallback(\n    (id: string) =>\n      toggleSubmode(\"mode\", id, selectedModes, isTransit, newModes =>\n        setLastTransitModes(newModes.filter(isTransit))\n      ),\n    [onQueryParamChange, queryParams]\n  );\n\n  const handleCompanyChange = useCallback(\n    (id: string) =>\n      toggleSubmode(\"companies\", id, selectedCompanies, undefined, () => {}),\n    [onQueryParamChange, queryParams]\n  );\n\n  const intl = useIntl();\n  const queryParamMessagesWithI18nAndCustomizations = {\n    ...getQueryParamMessagesWithI18n(intl),\n    ...queryParamMessages\n  };\n\n  const modeOptions = getModeOptions(\n    ModeIcon,\n    supportedModes,\n    selectedModes,\n    selectedCompanies,\n    supportedCompanies,\n    intl,\n    defaultMessages\n  );\n  const transitModes = getTransitSubmodeOptions(\n    ModeIcon,\n    supportedModes,\n    selectedModes\n  );\n  const nonTransitModes = selectedModes.filter(m => !isTransit(m));\n  const companies = getCompaniesOptions(\n    supportedCompanies.filter(comp =>\n      defaultAccessModeCompany ? comp.id === defaultAccessModeCompany : true\n    ),\n    nonTransitModes,\n    selectedCompanies\n  );\n  const bikeModes = getBicycleOrMicromobilityModeOptions(\n    ModeIcon,\n    supportedModes.bicycleModes,\n    selectedModes\n  );\n  const scooterModes = getBicycleOrMicromobilityModeOptions(\n    ModeIcon,\n    supportedModes.micromobilityModes,\n    selectedModes\n  );\n\n  const submodeLabel = (\n    <FormattedMessage\n      defaultMessage={defaultMessages[\"otpUi.SettingsSelectorPanel.use\"]}\n      description=\"Text announcing a list of submodes to use.\"\n      id=\"otpUi.SettingsSelectorPanel.use\"\n    />\n  );\n  const submodeCompaniesLabel = (\n    <FormattedMessage\n      defaultMessage={\n        defaultMessages[\"otpUi.SettingsSelectorPanel.useCompanies\"]\n      }\n      description=\"Text announcing a list of rental companies to use.\"\n      id=\"otpUi.SettingsSelectorPanel.useCompanies\"\n    />\n  );\n\n  return (\n    <S.SettingsSelectorPanel className={className} style={style}>\n      <ModeSelector\n        modes={modeOptions}\n        onChange={handleMainModeChange}\n        style={{ margin: \"0px -5px\", paddingBottom: \"8px\" }}\n      />\n\n      <S.SettingsHeader>\n        <FormattedMessage\n          defaultMessage={\n            defaultMessages[\"otpUi.SettingsSelectorPanel.travelPreferences\"]\n          }\n          description=\"Header text for the travel preferences.\"\n          id=\"otpUi.SettingsSelectorPanel.travelPreferences\"\n        />\n      </S.SettingsHeader>\n\n      {selectedModes.some(isTransit) && transitModes.length >= 2 && (\n        <SubmodeSelector\n          label={submodeLabel}\n          modes={transitModes}\n          onChange={handleTransitModeChange}\n        />\n      )}\n\n      {/* The bike trip type selector */}\n      {/* TODO: Handle different bikeshare networks */}\n      {selectedModes.some(isBike) && !selectedModes.some(isTransit) && (\n        <SubmodeSelector\n          label={submodeLabel}\n          inline\n          modes={bikeModes}\n          onChange={handleMainModeChange}\n        />\n      )}\n\n      {/* The micromobility trip type selector */}\n      {/* TODO: Handle different micromobility networks */}\n      {selectedModes.some(isMicromobility) &&\n        !selectedModes.some(isTransit) && (\n          <SubmodeSelector\n            label={submodeLabel}\n            inline\n            modes={scooterModes}\n            onChange={handleMainModeChange}\n          />\n        )}\n\n      {/* This order is probably better. */}\n      {companies.length >= 2 && (\n        <SubmodeSelector\n          label={submodeCompaniesLabel}\n          modes={companies}\n          onChange={handleCompanyChange}\n        />\n      )}\n\n      <GeneralSettingsPanel\n        query={queryParams}\n        queryParamMessages={queryParamMessagesWithI18nAndCustomizations}\n        supportedModes={supportedModes}\n        onQueryParamChange={handleQueryParamChange}\n      />\n    </S.SettingsSelectorPanel>\n  );\n}\n"],"file":"index.js"}