{"version":3,"sources":["../../src/SliderSelector/index.tsx"],"names":["React","useCallback","S","SliderSelector","className","max","label","labelLow","labelHigh","min","name","step","onChange","value","style","handleChange","evt","target","id","paddingLeft"],"mappings":";AACA,OAAOA,KAAP,IAA2CC,WAA3C,QAA8D,OAA9D;AAEA,OAAO,KAAKC,CAAZ,MAAmB,WAAnB,C,CAEA;;AAmDA;AACA;AACA;AACA,eAAe,SAASC,cAAT,OAYuB;AAAA,4BAXpCC,SAWoC;AAAA,MAXpCA,SAWoC,+BAXxB,IAWwB;AAAA,sBAVpCC,GAUoC;AAAA,MAVpCA,GAUoC,yBAV9B,EAU8B;AAAA,wBATpCC,KASoC;AAAA,MATpCA,KASoC,2BAT5B,IAS4B;AAAA,MARpCC,QAQoC,QARpCA,QAQoC;AAAA,MAPpCC,SAOoC,QAPpCA,SAOoC;AAAA,sBANpCC,GAMoC;AAAA,MANpCA,GAMoC,yBAN9B,CAM8B;AAAA,uBALpCC,IAKoC;AAAA,MALpCA,IAKoC,0BAL7B,IAK6B;AAAA,uBAJpCC,IAIoC;AAAA,MAJpCA,IAIoC,0BAJ7B,CAI6B;AAAA,2BAHpCC,QAGoC;AAAA,MAHpCA,QAGoC,8BAHzB,IAGyB;AAAA,wBAFpCC,KAEoC;AAAA,MAFpCA,KAEoC,2BAF5B,CAE4B;AAAA,MADpCC,KACoC,QADpCA,KACoC;AACpC,MAAMC,YAAY,GAAGd,WAAW,CAC9B,UAACe,GAAD,EAAwC;AACtC,QAAI,OAAOJ,QAAP,KAAoB,UAAxB,EAAoC;AAClCA,MAAAA,QAAQ,qBACLF,IADK,EACEM,GAAG,CAACC,MAAJ,CAAWJ,KADb,EAAR;AAGD;AACF,GAP6B,EAQ9B,CAACD,QAAD,CAR8B,CAAhC;AAWA,MAAMM,EAAE,4BAAqBR,IAArB,CAAR;AAEA,sBACE,oBAAC,CAAD,CAAG,cAAH;AAAkB,IAAA,SAAS,EAAEN,SAA7B;AAAwC,IAAA,KAAK,EAAEU;AAA/C,KAEG,CAACP,QAAD,IAAa,CAACC,SAAd,iBACC,8CACE,oBAAC,CAAD,CAAG,YAAH;AAAgB,IAAA,OAAO,EAAEU;AAAzB,KAA8BZ,KAA9B,CADF,CAHJ,eAQE,8CACE,oBAAC,CAAD,CAAG,YAAH;AAAgB,IAAA,OAAO,EAAEY;AAAzB,KACGX,QADH,CADF,eAIE;AACE,kBAAYD,KADd;AAEE,IAAA,EAAE,EAAEY,EAFN;AAGE,IAAA,GAAG,EAAEb,GAHP;AAIE,IAAA,GAAG,EAAEI,GAJP;AAKE,IAAA,QAAQ,EAAEM,YALZ;AAME,IAAA,IAAI,EAAEJ,IANR;AAOE,IAAA,IAAI,EAAC,OAPP;AAQE,IAAA,KAAK,EAAEE;AART,IAJF,eAcE,oBAAC,CAAD,CAAG,YAAH;AAAgB,IAAA,OAAO,EAAEK,EAAzB;AAA6B,IAAA,KAAK,EAAE;AAAEC,MAAAA,WAAW,EAAC;AAAd;AAApC,KACGX,SADH,CAdF,CARF,CADF;AA6BD","sourcesContent":["import CSS from \"csstype\";\nimport React, { ChangeEvent, ReactElement, useCallback } from \"react\";\n\nimport * as S from \"../styled\";\n\n// eslint-disable-next-line prettier/prettier\nimport type { QueryParamChangeEvent } from \"../types\";\n\ninterface SliderSelectorProps {\n  /**\n   * The CSS class name(s) to apply to this element.\n   */\n  className?: string;\n  /**\n   * The contents of the contained <label> control. \n   * Also used as the aria label when high and low labels are provided.\n   */\n  label?: string;\n  /**\n   * The label for the right end of the slider\n   */\n  labelHigh?: ReactElement | string;\n  /**\n   * The label for the left end of the slider\n   */\n  labelLow?: ReactElement | string;\n  /**\n   * The initial max value for the contained <input> control.\n   */\n  max: number;\n  /**\n   * The initial min value for the contained <input> control.\n   */\n  min: number;\n  /**\n   * A unique name for the setting.\n   */\n  name?: string;\n  /**\n   * Triggered when the value of the <input> control changes.\n   */\n  onChange?: (evt: QueryParamChangeEvent) => void;\n  /**\n   * How fine each step should be. Identical to html range step parameter.\n   */\n  step?: number\n  /**\n   * Standard React inline style prop.\n   */\n  style?: CSS.Properties;\n  /**\n   * Value to set slider to.\n   */\n  value?: number\n}\n\n/**\n * A wrapper that includes an <input type=\"range\" /> control and a <label> for the input control.\n */\nexport default function SliderSelector({\n  className = null,\n  max = 20,\n  label = null,\n  labelLow,\n  labelHigh,\n  min = 0,\n  name = null,\n  step = 1,\n  onChange = null,\n  value = 1,\n  style,\n}: SliderSelectorProps): ReactElement {\n  const handleChange = useCallback(\n    (evt: ChangeEvent<HTMLInputElement>) => {\n      if (typeof onChange === \"function\") {\n        onChange({\n          [name]: evt.target.value\n        });\n      }\n    },\n    [onChange]\n  );\n\n  const id = `id-query-param-${name}`;\n\n  return (\n    <S.SliderSelector className={className} style={style}>\n      {/* The <div> elements below are here for the grid layout, see S.DropdownSelector. */}\n      {!labelLow && !labelHigh && (\n        <div>\n          <S.SettingLabel htmlFor={id}>{label}</S.SettingLabel>\n        </div>\n      )}\n\n      <div>\n        <S.SettingLabel htmlFor={id}>\n          {labelLow}\n        </S.SettingLabel>\n        <input\n          aria-label={label}\n          id={id}\n          max={max}\n          min={min}\n          onChange={handleChange}\n          step={step}\n          type=\"range\"\n          value={value}\n        />\n        <S.SettingLabel htmlFor={id} style={{ paddingLeft:0 }}>\n          {labelHigh}\n        </S.SettingLabel>\n      </div>\n    </S.SliderSelector>\n  );\n}\n"],"file":"index.js"}