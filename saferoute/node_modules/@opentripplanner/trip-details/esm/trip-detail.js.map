{"version":3,"sources":["../src/trip-detail.tsx"],"names":["React","useState","QuestionCircle","TimesCircle","AnimateHeight","useIntl","S","isRunningJest","process","env","JEST_WORKER_ID","undefined","uuidv4","replace","c","r","Math","random","v","toString","TripDetail","icon","summary","description","intl","expanded","setExpanded","id","toggle","formatMessage"],"mappings":";AAAA,OAAOA,KAAP,IAA8BC,QAA9B,QAA8C,OAA9C;AACA,SAASC,cAAT,QAA+B,uCAA/B;AACA,SAASC,WAAT,QAA4B,oCAA5B;AAEA,OAAOC,aAAP,MAA0B,sBAA1B;AACA,SAASC,OAAT,QAAwB,YAAxB;AACA,OAAO,KAAKC,CAAZ,MAAmB,UAAnB;;AAQA;;AACA;AACA;AACA;AACA,SAASC,aAAT,GAAyB;AACvB,SAAOC,OAAO,CAACC,GAAR,CAAYC,cAAZ,KAA+BC,SAAtC;AACD;;AAED,SAASC,MAAT,GAA0B;AACxB,MAAIL,aAAa,EAAjB,EAAqB,OAAO,kBAAP;AAErB,SAAO,uCAAuCM,OAAvC,CAA+C,OAA/C,EAAwD,UAASC,CAAT,EAAY;AACzE;AACA,QAAMC,CAAC,GAAIC,IAAI,CAACC,MAAL,KAAgB,EAAjB,GAAuB,CAAjC,CAFyE,CAGzE;;AACA,QAAMC,CAAC,GAAGJ,CAAC,KAAK,GAAN,GAAYC,CAAZ,GAAiBA,CAAC,GAAG,GAAL,GAAY,GAAtC;AACA,WAAOG,CAAC,CAACC,QAAF,CAAW,EAAX,CAAP;AACD,GANM,CAAP;AAOD;;AAED,IAAMC,UAAU,GAAG,SAAbA,UAAa,OAAwD;AAAA,MAArDC,IAAqD,QAArDA,IAAqD;AAAA,MAA/CC,OAA+C,QAA/CA,OAA+C;AAAA,MAAtCC,WAAsC,QAAtCA,WAAsC;AACzE,MAAMC,IAAI,GAAGnB,OAAO,EAApB;;AACA,kBAAgCJ,QAAQ,CAAC,KAAD,CAAxC;AAAA;AAAA,MAAOwB,QAAP;AAAA,MAAiBC,WAAjB;;AAEA,MAAMC,EAAE,GAAGf,MAAM,EAAjB;;AAEA,MAAMgB,MAAM,GAAG,SAATA,MAAS,GAAY;AACzBF,IAAAA,WAAW,CAAC,CAACD,QAAF,CAAX;AACD,GAFD;;AAIA,sBACE,oBAAC,CAAD,CAAG,UAAH;AAAc,IAAA,IAAI,EAAC;AAAnB,kBACE,oBAAC,CAAD,CAAG,cAAH;AAAkB,IAAA,IAAI,EAAC;AAAvB,KAAuCJ,IAAvC,CADF,eAIE,oBAAC,CAAD,CAAG,iBAAH,QACGC,OADH,EAEGC,WAAW,iBACV,oBAAC,CAAD,CAAG,YAAH;AACE,kBACEE,QAAQ,GACJD,IAAI,CAACK,aAAL,CAAmB;AACjBF,MAAAA,EAAE,EAAE;AADa,KAAnB,CADI,GAIJH,IAAI,CAACK,aAAL,CAAmB;AACjBF,MAAAA,EAAE,EAAE;AADa,KAAnB,CANR;AAUE,qBAAeA,EAVjB;AAWE,qBAAeF,QAXjB;AAYE,IAAA,EAAE,EAAC,eAZL;AAaE,IAAA,OAAO,EAAEG,MAbX;AAcE,IAAA,QAAQ,EAAE;AAdZ,kBAgBE,oBAAC,cAAD;AAAgB,IAAA,IAAI,EAAC;AAArB,IAhBF,CAHJ,CAJF,eA2BE,oBAAC,aAAD;AAAe,IAAA,QAAQ,EAAE,GAAzB;AAA8B,IAAA,MAAM,EAAEH,QAAQ,GAAG,MAAH,GAAY;AAA1D,kBACE,oBAAC,CAAD,CAAG,qBAAH;AAAyB,uBAAgB,eAAzC;AAAyD,IAAA,EAAE,EAAEE;AAA7D,kBAIE,oBAAC,CAAD,CAAG,UAAH;AAAc,IAAA,IAAI,EAAC,cAAnB;AAAkC,IAAA,OAAO,EAAE;AAAA,aAAMD,WAAW,CAAC,KAAD,CAAjB;AAAA;AAA3C,kBACE,oBAAC,WAAD;AAAa,IAAA,IAAI,EAAC;AAAlB,IADF,CAJF,EAOGH,WAPH,CADF,CA3BF,CADF;AAyCD,CAnDD;;AAqDA,eAAeH,UAAf","sourcesContent":["import React, { ReactElement, useState } from \"react\";\nimport { QuestionCircle } from \"@styled-icons/fa-solid/QuestionCircle\";\nimport { TimesCircle } from \"@styled-icons/fa-solid/TimesCircle\";\n\nimport AnimateHeight from \"react-animate-height\";\nimport { useIntl } from \"react-intl\";\nimport * as S from \"./styled\";\n\ntype Props = {\n  description?: ReactElement | string;\n  icon: ReactElement;\n  summary: ReactElement | string;\n};\n\n// TODO: Remove these two helper methods by moving to semantically correct HTML\n/**\n * Copied from https://stackoverflow.com/questions/50940640/how-to-determine-if-jest-is-running-the-code-or-not\n */\nfunction isRunningJest() {\n  return process.env.JEST_WORKER_ID !== undefined;\n}\n\nfunction uuidv4(): string {\n  if (isRunningJest()) return \"mocked-random-id\";\n\n  return \"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\".replace(/[xy]/g, function(c) {\n    // eslint-disable-next-line no-bitwise\n    const r = (Math.random() * 16) | 0;\n    // eslint-disable-next-line no-bitwise\n    const v = c === \"x\" ? r : (r & 0x3) | 0x8;\n    return v.toString(16);\n  });\n}\n\nconst TripDetail = ({ icon, summary, description }: Props): JSX.Element => {\n  const intl = useIntl();\n  const [expanded, setExpanded] = useState(false);\n\n  const id = uuidv4();\n\n  const toggle = (): void => {\n    setExpanded(!expanded);\n  };\n\n  return (\n    <S.TripDetail role=\"group\">\n      <S.TripDetailIcon role=\"presentation\">{icon}</S.TripDetailIcon>\n      {/* TODO: Adjust the summary and description to be a `summary`/`details` pair, therefore semantically correct */}\n      {/* https://github.com/opentripplanner/otp-ui/pull/530#discussion_r1074006057 */}\n      <S.TripDetailSummary>\n        {summary}\n        {description && (\n          <S.ExpandButton\n            aria-label={\n              expanded\n                ? intl.formatMessage({\n                    id: \"otpUi.TripDetails.hideDetail\"\n                  })\n                : intl.formatMessage({\n                    id: \"otpUi.TripDetails.showDetail\"\n                  })\n            }\n            aria-controls={id}\n            aria-expanded={expanded}\n            id=\"expand-button\"\n            onClick={toggle}\n            tabIndex={0}\n          >\n            <QuestionCircle size=\"0.92em\" />\n          </S.ExpandButton>\n        )}\n      </S.TripDetailSummary>\n      <AnimateHeight duration={300} height={expanded ? \"auto\" : 0}>\n        <S.TripDetailDescription aria-labelledby=\"expand-button\" id={id}>\n          {/** This button isn't needed for screen readers as the main expand-button is\n           * more convenient.\n           */}\n          <S.HideButton role=\"presentation\" onClick={() => setExpanded(false)}>\n            <TimesCircle size=\"0.92em\" />\n          </S.HideButton>\n          {description}\n        </S.TripDetailDescription>\n      </AnimateHeight>\n    </S.TripDetail>\n  );\n};\n\nexport default TripDetail;\n"],"file":"trip-detail.js"}