import _toConsumableArray from "@babel/runtime/helpers/toConsumableArray";
import flatten from "flat";
import coreUtils from "@opentripplanner/core-utils";
import React from "react";
import { FormattedMessage, FormattedNumber } from "react-intl";
import { CalendarAlt } from "@styled-icons/fa-solid/CalendarAlt";
import { Heartbeat } from "@styled-icons/fa-solid/Heartbeat";
import { MoneyBillAlt } from "@styled-icons/fa-solid/MoneyBillAlt";
import { Leaf } from "@styled-icons/fa-solid/Leaf";
import { Route } from "@styled-icons/fa-solid/Route";
import * as S from "./styled";
import TripDetail from "./trip-detail";
import FareLegTable from "./fare-table";
import { boldText, renderFare } from "./utils";
// Load the default messages.
import defaultEnglishMessages from "../i18n/en-US.yml"; // HACK: We should flatten the messages loaded above because
// the YAML loaders behave differently between webpack and our version of jest:
// - the yaml loader for webpack returns a nested object,
// - the yaml loader for jest returns messages with flattened ids.

var defaultMessages = flatten(defaultEnglishMessages);

var subText = function subText(contents) {
  return /*#__PURE__*/React.createElement("sub", null, contents);
};
/**
 * Helper function to specify the link to dietary table.
 */


function dietaryLink(contents) {
  return /*#__PURE__*/React.createElement("a", {
    href: "https://health.gov/dietaryguidelines/dga2005/document/html/chapter3.htm#table4",
    rel: "noopener noreferrer",
    target: "_blank"
  }, contents);
}

function CO2DescriptionLink(contents) {
  return /*#__PURE__*/React.createElement("a", {
    href: "https://www.itf-oecd.org/sites/default/files/life-cycle-assessment-calculations-2020.xlsx",
    rel: "noopener noreferrer",
    target: "_blank"
  }, contents);
}
/**
 * Default rendering if no component is provided for the CaloriesDetails
 * slot in the TripDetails component.
 */


function DefaultCaloriesDetails(_ref) {
  var bikeSeconds = _ref.bikeSeconds,
      calories = _ref.calories,
      walkSeconds = _ref.walkSeconds;
  return /*#__PURE__*/React.createElement(FormattedMessage, {
    defaultMessage: defaultMessages["otpUi.TripDetails.caloriesDescription"],
    description: "Text describing how the calories relate to the walking and biking duration of a trip.",
    id: "otpUi.TripDetails.caloriesDescription",
    values: {
      bikeMinutes: Math.round(bikeSeconds / 60),
      calories: Math.round(calories),
      dietaryLink: dietaryLink,
      strong: boldText,
      walkMinutes: Math.round(walkSeconds / 60)
    }
  });
}
/**
 * Helper component that renders a transit fare entry.
 */


var TransitFare = function TransitFare(_ref2) {
  var fareKey = _ref2.fareKey,
      fareNameFallback = _ref2.fareNameFallback,
      fareKeyNameMap = _ref2.fareKeyNameMap,
      transitFares = _ref2.transitFares;
  var currentFare = transitFares[fareKey];
  return /*#__PURE__*/React.createElement("span", null, /*#__PURE__*/React.createElement(FormattedMessage, {
    defaultMessage: defaultMessages["otpUi.TripDetails.transitFareEntry"],
    description: "Text showing the price of tickets on public transportation.",
    id: "otpUi.TripDetails.transitFareEntry",
    values: {
      name: fareKeyNameMap[fareKey] || fareNameFallback || fareKey,
      strong: boldText,
      value: renderFare(currentFare.currency.currencyCode, currentFare.cents / 100)
    }
  }));
};
/**
 * Renders trip details such as departure instructions, fare amount, and calories spent.
 */


export function TripDetails(_ref3) {
  var _itinerary$fare, _itinerary$fare2;

  var _ref3$CaloriesDetails = _ref3.CaloriesDetails,
      CaloriesDetails = _ref3$CaloriesDetails === void 0 ? DefaultCaloriesDetails : _ref3$CaloriesDetails,
      _ref3$className = _ref3.className,
      className = _ref3$className === void 0 ? "" : _ref3$className,
      _ref3$defaultFareKey = _ref3.defaultFareKey,
      defaultFareKey = _ref3$defaultFareKey === void 0 ? "regular" : _ref3$defaultFareKey,
      _ref3$displayCalories = _ref3.displayCalories,
      displayCalories = _ref3$displayCalories === void 0 ? true : _ref3$displayCalories,
      _ref3$DepartureDetail = _ref3.DepartureDetails,
      DepartureDetails = _ref3$DepartureDetail === void 0 ? null : _ref3$DepartureDetail,
      _ref3$FareDetails = _ref3.FareDetails,
      FareDetails = _ref3$FareDetails === void 0 ? null : _ref3$FareDetails,
      fareDetailsLayout = _ref3.fareDetailsLayout,
      _ref3$fareKeyNameMap = _ref3.fareKeyNameMap,
      fareKeyNameMap = _ref3$fareKeyNameMap === void 0 ? {} : _ref3$fareKeyNameMap,
      itinerary = _ref3.itinerary,
      co2Config = _ref3.co2Config;
  // process the transit fare
  var fareResult = coreUtils.itinerary.calculateTncFares(itinerary);
  var currencyCode = fareResult.currencyCode,
      maxTNCFare = fareResult.maxTNCFare,
      minTNCFare = fareResult.minTNCFare;
  var transitFares = itinerary === null || itinerary === void 0 ? void 0 : (_itinerary$fare = itinerary.fare) === null || _itinerary$fare === void 0 ? void 0 : _itinerary$fare.fare;
  var fareDetails = (_itinerary$fare2 = itinerary.fare) === null || _itinerary$fare2 === void 0 ? void 0 : _itinerary$fare2.details;
  var companies = "";
  itinerary.legs.forEach(function (leg) {
    if (leg.tncData) {
      companies = leg.tncData.company;
    }
  });
  var fare;
  var fareKeys = transitFares && Object.keys(transitFares).sort();

  if (transitFares && fareKeys.length > 0) {
    var defaultFare = defaultFareKey;

    if (!transitFares[defaultFareKey]) {
      defaultFare = "regular";
    } // Depending on if there are additional fares to display either render a <span> or a <details>


    var TransitFareWrapper = transitFares && fareKeys.length > 1 ? S.TransitFare : S.TransitFareSingle;
    fare = /*#__PURE__*/React.createElement(S.Fare, null, /*#__PURE__*/React.createElement(TransitFareWrapper, null, /*#__PURE__*/React.createElement("summary", {
      style: {
        display: fareKeys.length > 1 ? "list-item" : ""
      }
    }, /*#__PURE__*/React.createElement(TransitFare, {
      fareNameFallback: /*#__PURE__*/React.createElement(FormattedMessage, {
        defaultMessage: defaultMessages["otpUi.TripDetails.transitFare"],
        description: "Text showing the price of tickets on public transportation.",
        id: "otpUi.TripDetails.transitFare"
      }),
      fareKey: defaultFare,
      fareKeyNameMap: fareKeyNameMap,
      transitFares: transitFares
    })), fareDetailsLayout ?
    /*#__PURE__*/
    // Show full Æ’are details by leg
    React.createElement(FareLegTable, {
      layout: fareDetailsLayout,
      legs: itinerary.legs,
      transitFareDetails: fareDetails,
      transitFares: transitFares
    }) : // Just show the fares for each payment type
    fareKeys.map(function (fareKey) {
      // Don't show the default fare twice!
      if (fareKey === defaultFare) {
        return null;
      }

      return /*#__PURE__*/React.createElement(TransitFare, {
        fareKey: fareKey,
        key: fareKey,
        fareKeyNameMap: fareKeyNameMap,
        transitFares: transitFares
      });
    })), minTNCFare !== 0 && /*#__PURE__*/React.createElement(S.TNCFare, null, /*#__PURE__*/React.createElement("br", null), /*#__PURE__*/React.createElement(FormattedMessage, {
      defaultMessage: defaultMessages["otpUi.TripDetails.tncFare"],
      description: "Text showing the price paid to transportation network companies.",
      id: "otpUi.TripDetails.tncFare",
      values: {
        companies:
        /*#__PURE__*/
        // S.TNCFareCompanies capitalizes the TNC company ID (e.g. "COMPANY")
        // after it is converted to lowercase, so it renders as "Company".
        React.createElement(S.TNCFareCompanies, null, companies.toLowerCase()),
        maxTNCFare: renderFare(currencyCode, maxTNCFare),
        minTNCFare: renderFare(currencyCode, minTNCFare),
        strong: boldText
      }
    })));
  }

  var departureDate = new Date(itinerary.startTime); // Compute calories burned.

  var _coreUtils$itinerary$ = coreUtils.itinerary.calculatePhysicalActivity(itinerary),
      bikeDuration = _coreUtils$itinerary$.bikeDuration,
      caloriesBurned = _coreUtils$itinerary$.caloriesBurned,
      walkDuration = _coreUtils$itinerary$.walkDuration; // Calculate CO2 if it's not provided by the itinerary


  var co2 = itinerary.co2 || (co2Config === null || co2Config === void 0 ? void 0 : co2Config.enabled) && coreUtils.itinerary.calculateEmissions(itinerary, co2Config === null || co2Config === void 0 ? void 0 : co2Config.carbonIntensity, co2Config === null || co2Config === void 0 ? void 0 : co2Config.units); // Parse flex info and generate appropriate strings

  var containsFlex = itinerary.legs.some(coreUtils.itinerary.isFlex);
  var pickupBookingInfo = itinerary.legs.map(function (leg) {
    return leg.pickupBookingInfo;
  }).filter(function (info) {
    return !!info;
  });
  var dropOffBookingInfo = itinerary.legs.map(function (leg) {
    return leg.dropOffBookingInfo;
  }).filter(function (info) {
    return !!info;
  });
  var totalDistance = itinerary.legs.reduce(function (total, leg) {
    return total + leg.distance;
  }, 0);
  return /*#__PURE__*/React.createElement(S.TripDetails, {
    className: className
  }, /*#__PURE__*/React.createElement(S.TripDetailsHeader, {
    id: "trip-details-header"
  }, /*#__PURE__*/React.createElement(FormattedMessage, {
    defaultMessage: defaultMessages["otpUi.TripDetails.title"],
    description: "Title (heading) text of the component.",
    id: "otpUi.TripDetails.title"
  })), /*#__PURE__*/React.createElement(S.TripDetailsBody, null, /*#__PURE__*/React.createElement(TripDetail // Any custom description for the Departure message needs to be handled by the slot.
  , {
    description: DepartureDetails && /*#__PURE__*/React.createElement(DepartureDetails, {
      departureDate: departureDate
    }),
    icon: /*#__PURE__*/React.createElement(CalendarAlt, {
      size: 17
    }),
    summary: /*#__PURE__*/React.createElement(S.Timing, null, /*#__PURE__*/React.createElement(FormattedMessage, {
      defaultMessage: defaultMessages["otpUi.TripDetails.departure"],
      description: "Text showing the departure date/time for a trip.",
      id: "otpUi.TripDetails.departure",
      values: {
        departureDate: departureDate,
        strong: boldText
      }
    }))
  }), fare && /*#__PURE__*/React.createElement(TripDetail // Any custom description for the transit fare needs to be handled by the slot.
  , {
    description: FareDetails && /*#__PURE__*/React.createElement(FareDetails, {
      maxTNCFare: maxTNCFare,
      minTNCFare: minTNCFare,
      transitFares: transitFares
    }),
    icon: /*#__PURE__*/React.createElement(MoneyBillAlt, {
      size: 17
    }),
    summary: fare
  }), displayCalories && caloriesBurned > 0 && /*#__PURE__*/React.createElement(TripDetail, {
    icon: /*#__PURE__*/React.createElement(Heartbeat, {
      size: 17
    }),
    summary: /*#__PURE__*/React.createElement(S.CaloriesSummary, null, /*#__PURE__*/React.createElement(FormattedMessage, {
      defaultMessage: defaultMessages["otpUi.TripDetails.calories"],
      description: "Text showing the number of calories for the walking and biking legs of a trip.",
      id: "otpUi.TripDetails.calories",
      values: {
        calories: caloriesBurned,
        strong: boldText
      }
    })),
    description: CaloriesDetails && /*#__PURE__*/React.createElement(CaloriesDetails, {
      bikeSeconds: bikeDuration,
      calories: caloriesBurned,
      walkSeconds: walkDuration
    })
  }), co2 > 0 && (co2Config === null || co2Config === void 0 ? void 0 : co2Config.enabled) && /*#__PURE__*/React.createElement(TripDetail, {
    icon: /*#__PURE__*/React.createElement(Leaf, {
      size: 17
    }),
    summary: /*#__PURE__*/React.createElement(S.CO2Summary, null, /*#__PURE__*/React.createElement(FormattedMessage, {
      defaultMessage: defaultMessages["otpUi.TripDetails.co2"],
      description: "Text showing the quantity of CO2 emitted by this trip.",
      id: "otpUi.TripDetails.co2",
      values: {
        co2: /*#__PURE__*/React.createElement(FormattedNumber, {
          value: Math.round(co2) // eslint-disable-next-line react/style-prop-object
          ,
          style: "unit",
          unit: (co2Config === null || co2Config === void 0 ? void 0 : co2Config.units) || "gram",
          unitDisplay: "narrow"
        }),
        strong: boldText,
        sub: subText
      }
    })),
    description: /*#__PURE__*/React.createElement(FormattedMessage, {
      defaultMessage: defaultMessages["otpUi.TripDetails.co2description"],
      values: {
        link: CO2DescriptionLink,
        sub: subText,
        totalDistance: totalDistance
      },
      description: "Text explaining how the CO2 emissions is calculated.",
      id: "otpUi.TripDetails.co2description"
    })
  }), containsFlex && /*#__PURE__*/React.createElement(TripDetail, {
    summary: /*#__PURE__*/React.createElement(S.FlexSummary, null, /*#__PURE__*/React.createElement(FormattedMessage, {
      defaultMessage: defaultMessages["otpUi.TripDetails.tripIncludesFlex"],
      description: "Text stating that portions of the trip include a flex (on-demand) transit service.",
      id: "otpUi.TripDetails.tripIncludesFlex",
      values: {
        extraMessage: _toConsumableArray(new Set([].concat(_toConsumableArray(pickupBookingInfo.map(function (info) {
          return info.message;
        })), _toConsumableArray(dropOffBookingInfo.map(function (info) {
          return info.message;
        }))))).join(" ")
      }
    })),
    icon: /*#__PURE__*/React.createElement(Route, {
      size: 17
    })
  })));
}
export default TripDetails; // Rename styled components for export

export { S as Styled, FareLegTable };
//# sourceMappingURL=index.js.map