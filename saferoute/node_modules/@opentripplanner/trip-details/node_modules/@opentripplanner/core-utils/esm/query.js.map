{"version":3,"sources":["../src/query.js"],"names":["format","isMatch","parse","getGeocoder","qs","getTransitModes","hasCar","isAccessMode","coordsToString","stringToCoords","queryParams","getCurrentTime","getCurrentDate","OTP_API_DATE_FORMAT","OTP_API_TIME_FORMAT","defaultParams","TIME_FORMATS","getQueryParamProperty","paramInfo","property","query","ensureSingleAccessMode","queryModes","accessCount","filter","m","length","firstAccess","find","push","getUrlParams","window","location","href","split","getOtpUrlParams","Object","keys","key","startsWith","getTripOptionsFromQuery","keepPlace","options","time","departArrive","date","from","to","getDefaultQueryParamValue","param","getDefaultQuery","config","defaultQuery","routingType","qp","forEach","name","routingTypes","defaultQueryParams","isParamApplicable","applicable","includes","reduceOtpFlexModes","modes","enabled","reduce","prev","cur","newModes","expandOtpFlexMode","mode","map","join","isNotDefaultQuery","activeModes","sort","mergeFlex","defaultModes","concat","modesEqual","every","value","index","i","getFirstGeocodeResult","text","geocoderConfig","geocoder","search","then","result","firstResult","features","getLocationFromGeocodedFeature","parseLocationString","parts","coordinates","lat","lon","queryParamToLocation","planParamsToQuery","params","fromPlace","toPlace","arriveBy","matchedTimeFormat","timeFormat","Date","intermediatePlaces","maybeNumber","Number","isNaN","planParamsToQueryAsync","getRoutingParams","currentQuery","ignoreRealtimeUpdates","isItinerary","indexOf","rewriteFunction","itineraryRewrite","profileRewrite","assign","dateValid","timeValid","minTransitDistance","searchTimeout","onlyTransitTrips","startTimeValid","startTime","endTimeValid","endTime","reducedMode"],"mappings":"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","sourcesContent":["import { format, isMatch, parse } from \"date-fns\";\nimport getGeocoder from \"@opentripplanner/geocoder/lib\";\nimport qs from \"qs\";\n\nimport { getTransitModes, hasCar, isAccessMode } from \"./itinerary\";\nimport { coordsToString, stringToCoords } from \"./map\";\nimport queryParams from \"./query-params\";\nimport {\n  getCurrentTime,\n  getCurrentDate,\n  OTP_API_DATE_FORMAT,\n  OTP_API_TIME_FORMAT\n} from \"./time\";\n\n/* The list of default parameters considered in the settings panel */\n\nexport const defaultParams = [\n  \"wheelchair\",\n  \"maxWalkDistance\",\n  \"walkReluctance\",\n  \"maxWalkTime\",\n  \"walkSpeed\",\n  \"maxBikeDistance\",\n  \"maxBikeTime\",\n  \"bikeSpeed\",\n  \"optimize\",\n  \"optimizeBike\",\n  \"maxEScooterDistance\",\n  \"watts\"\n];\n\n/**\n * List of time formats to parse when reading query params.\n */\nconst TIME_FORMATS = [\n  \"HH:mm:ss\",\n  \"HH:mm\",\n  \"H:mm\",\n  \"h:mm:ss a\",\n  \"h:mm:ssa\",\n  \"h:mm a\",\n  \"h:mma\",\n  \"h:mm\",\n  \"HHmm\",\n  \"hmm\",\n  \"ha\"\n];\n\n/* A function to retrieve a property value from an entry in the query-params\n * table, checking for either a static value or a function */\n\nexport function getQueryParamProperty(paramInfo, property, query) {\n  return typeof paramInfo[property] === \"function\"\n    ? paramInfo[property](query)\n    : paramInfo[property];\n}\n\nexport function ensureSingleAccessMode(queryModes) {\n  // Count the number of access modes\n  const accessCount = queryModes.filter(m => isAccessMode(m)).length;\n\n  // If multiple access modes are specified, keep only the first one\n  if (accessCount > 1) {\n    const firstAccess = queryModes.find(m => isAccessMode(m));\n    queryModes = queryModes.filter(m => !isAccessMode(m) || m === firstAccess);\n\n    // If no access modes are specified, add 'WALK' as the default\n  } else if (accessCount === 0) {\n    queryModes.push(\"WALK\");\n  }\n\n  return queryModes;\n}\n\nexport function getUrlParams() {\n  return qs.parse(window.location.href.split(\"?\")[1]);\n}\n\nexport function getOtpUrlParams() {\n  return Object.keys(getUrlParams()).filter(key => !key.startsWith(\"ui_\"));\n}\n\nexport function getTripOptionsFromQuery(query, keepPlace = false) {\n  const options = { ...query };\n  // Delete time/date options and from/to\n  delete options.time;\n  delete options.departArrive;\n  delete options.date;\n  if (!keepPlace) {\n    delete options.from;\n    delete options.to;\n  }\n  return options;\n}\n\n/**\n * Gets the query param's default value that is either a constant or by\n * executing the default value function.\n */\nfunction getDefaultQueryParamValue(param) {\n  return typeof param.default === \"function\" ? param.default() : param.default;\n}\n\n/**\n * Get the default query to OTP based on the given config.\n */\nexport function getDefaultQuery(config = null) {\n  const defaultQuery = { routingType: \"ITINERARY\" };\n  queryParams\n    .filter(qp => \"default\" in qp)\n    .forEach(qp => {\n      defaultQuery[qp.name] = getDefaultQueryParamValue(qp);\n    });\n  if (config) {\n    if (config.routingTypes && config.routingTypes.length > 0) {\n      defaultQuery.routingType = config.routingTypes[0].key;\n    }\n    if (config.defaultQueryParams) {\n      Object.keys(config.defaultQueryParams).forEach(key => {\n        defaultQuery[key] = config.defaultQueryParams[key];\n      });\n    }\n  }\n  return defaultQuery;\n}\n\n/**\n * Determine if the specified query param applies to the given query (based on\n * routing type and the param's own applicable function).\n * @param  paramInfo an entry from query-params.js\n * @param  query     the query against which to check if the param applies\n * @param  config    OTP config\n * @return {Boolean}\n */\nfunction isParamApplicable(paramInfo, query, config) {\n  const { applicable, routingTypes } = paramInfo;\n  if (!routingTypes.includes(query.routingType)) return false;\n  if (typeof applicable === \"function\" && !applicable(query, config)) {\n    return false;\n  }\n  return true;\n}\n\n/**\n * Helper method which replaces OTP flex modes with single FLEX mode that's\n * more useful and easier to work with.\n */\nexport function reduceOtpFlexModes(modes, enabled = true) {\n  if (!enabled) return modes;\n\n  return modes.reduce((prev, cur) => {\n    const newModes = prev;\n    // Add the current mode if it is not a flex mode\n    if (!cur.includes(\"FLEX\")) {\n      newModes.push(cur);\n      // If it is a flex mode, do not add it but rather add the custom flex mode\n      // if not already present\n    } else if (!newModes.includes(\"FLEX\")) {\n      newModes.push(\"FLEX\");\n    }\n    return newModes;\n  }, []);\n}\n\n/**\n * Helper method to process a mode string, replacing all instances of FLEX\n * with the full set of FLEX modes used by otp-2\n * @param {*} mode a mode String, not an array\n * @returns a mode String, not an array (with flex modes expanded)\n */\nexport function expandOtpFlexMode(mode) {\n  const modes = reduceOtpFlexModes(mode.split(\",\"));\n  return modes\n    .map(m => {\n      // If both the expanded and shrunk modes are included, remove the exapnded one\n      if (m === \"FLEX_EGRESS\" || m === \"FLEX_ACCESS\" || m === \"FLEX_DIRECT\") {\n        if (mode.includes(\"FLEX\")) return \"\";\n      }\n      if (m === \"FLEX\") {\n        return \"FLEX_EGRESS,FLEX_ACCESS,FLEX_DIRECT\";\n      }\n      return m;\n    })\n    .join(\",\");\n}\n\n/**\n * Determines whether the specified query differs from the default query, i.e.,\n * whether the user has modified any trip options (including mode) from their\n * default values.\n */\nexport function isNotDefaultQuery(query, config) {\n  const activeModes = reduceOtpFlexModes(\n    query.mode.split(\",\").sort(),\n    config.modes?.mergeFlex\n  );\n  if (\n    activeModes.length !== 2 ||\n    activeModes[0] !== \"TRANSIT\" ||\n    activeModes[1] !== \"WALK\"\n  ) {\n    // Default mode is TRANSIT,WALK. If general TRANSIT is not used, check\n    // against available transit modes in config.\n    const defaultModes = getTransitModes(config)\n      .concat([\"WALK\"])\n      .sort();\n    const modesEqual =\n      activeModes.length === defaultModes.length &&\n      activeModes.every((value, index) => {\n        return value === defaultModes[index];\n      });\n    if (!modesEqual) return true;\n  }\n  // If modes are equal, check the remaining params.\n  const defaultQuery = getDefaultQuery(config);\n  for (let i = 0; i < defaultParams.length; i++) {\n    const param = defaultParams[i];\n    const paramInfo = queryParams.find(qp => qp.name === param);\n    // If the parameter applies to the query and does not match the default\n    // value, the query is not default.\n    if (\n      isParamApplicable(paramInfo, query, config) &&\n      query[param] !== defaultQuery[param]\n    ) {\n      return true;\n    }\n  }\n  return false;\n}\n\n/**\n * Geocode utility for returning the first result for the provided place name text.\n * @param  {string} text - text to search\n * @param  {Object} geocoderConfig\n * @return {Location}\n */\nasync function getFirstGeocodeResult(text, geocoderConfig) {\n  const geocoder = getGeocoder(geocoderConfig);\n  // Attempt to geocode search text and return first result if found.\n  // TODO: Import geocoder from @opentripplanner\n  return geocoder.search({ text }).then(result => {\n    const firstResult = result.features && result.features[0];\n    if (firstResult) {\n      return geocoder.getLocationFromGeocodedFeature(firstResult);\n    }\n    return null;\n  });\n}\n\n/**\n * OTP allows passing a location in the form '123 Main St::lat,lon', so we check\n * for the double colon and parse the coordinates accordingly.\n * @param  {string} value - query param for place described above\n * @return {Location} - location or null if the value is falsey or the parsed\n *                      coordinates do not result in both a lat and lon\n */\nexport function parseLocationString(value) {\n  if (!value) return null;\n  const parts = value.split(\"::\");\n  const coordinates = parts[1]\n    ? stringToCoords(parts[1])\n    : stringToCoords(parts[0]);\n  const name = parts[1] ? parts[0] : coordsToString(coordinates);\n  return coordinates.length === 2\n    ? {\n        name: name || null,\n        lat: coordinates[0] || null,\n        lon: coordinates[1] || null\n      }\n    : null;\n}\n\n/**\n * Convert a string query param for a from or to place into a location. If\n * coordinates not provided and geocoder config is present, use the first\n * geocoded result.\n * @param  {string} value\n * @param  {Object} [geocoderConfig=null]\n * @return {Location}\n */\nasync function queryParamToLocation(value, geocoderConfig) {\n  let location = parseLocationString(value);\n  if (!location && value && geocoderConfig) {\n    // If a valid location was not found, but the place name text exists,\n    // attempt to geocode the name.\n    location = await getFirstGeocodeResult(value, geocoderConfig);\n  }\n  return location;\n}\n\n/**\n * Create a otp query based on a the url params.\n *\n * @param  {Object} params An object representing the parsed querystring of url\n *    params.\n */\nexport function planParamsToQuery(params) {\n  const query = {};\n  Object.keys(params).forEach(key => {\n    switch (key) {\n      case \"fromPlace\":\n        query.from = parseLocationString(params.fromPlace);\n        break;\n      case \"toPlace\":\n        query.to = parseLocationString(params.toPlace);\n        break;\n      case \"arriveBy\":\n        query.departArrive =\n          params.arriveBy === \"true\"\n            ? \"ARRIVE\"\n            : params.arriveBy === \"false\"\n            ? \"DEPART\"\n            : \"NOW\";\n        break;\n      case \"date\":\n        query.date = params.date || getCurrentDate();\n        break;\n      case \"time\":\n        {\n          // Match one of the supported time formats\n          const matchedTimeFormat = TIME_FORMATS.find(timeFormat =>\n            isMatch(params.time, timeFormat)\n          );\n          query.time = matchedTimeFormat\n            ? format(\n                parse(params.time, matchedTimeFormat, new Date()),\n                OTP_API_TIME_FORMAT\n              )\n            : getCurrentTime();\n        }\n        break;\n      case \"intermediatePlaces\":\n        // If query has intermediate places, ensure that they are parsed\n        // as locations.\n        query.intermediatePlaces = params.intermediatePlaces\n          ? params.intermediatePlaces.map(parseLocationString)\n          : [];\n        break;\n      default: {\n        const maybeNumber = Number(params[key]);\n        // If the param value is an empty string literal and is not a number,\n        // use string value. Else, use parsed number value.\n        // See https://github.com/opentripplanner/otp-ui/issues/50\n        query[key] =\n          params[key] === \"\" || Number.isNaN(maybeNumber)\n            ? params[key]\n            : maybeNumber;\n        break;\n      }\n    }\n  });\n  return query;\n}\n\n/**\n * Async method to create a otp query based on a the url params. This provides\n * the same functionality as planParamsToQuery, except that it will also attempt\n * to geocode the input from and to strings if no lat/lng values were provided.\n *\n * @param  {Object} params An object representing the parsed querystring of url\n *    params.\n * @param config the config in the otp-rr store.\n */\nexport async function planParamsToQueryAsync(params, config = {}) {\n  // Construct query from plan params.\n  const query = planParamsToQuery(params);\n  // Attempt to geocode from and to params if the string parsing does not return\n  // valid locations.\n  if (!query.from) {\n    query.from = await queryParamToLocation(params.fromPlace, config.geocoder);\n  }\n  if (!query.to) {\n    query.to = await queryParamToLocation(params.toPlace, config.geocoder);\n  }\n  return query;\n}\n\n/**\n * Create an object that can be used as a querystring in making an OTP\n * PlannerResource request.\n *\n * See http://otp-docs.ibi-transit.com/api/resource_PlannerResource.html\n *\n * @param  {Object} config  The OTP application config. See types#configType\n * @param  {Object} currentQuery  The current query parameters as saved in the\n *   application state. This method does some extra logic on top of this data\n *   in order to create a request suitable for OTP. See __tests__/query.js#L14 for more.\n * @param  {boolean} ignoreRealtimeUpdates  If true, will create a request that\n *   does not use realtime data.\n */\nexport function getRoutingParams(config, currentQuery, ignoreRealtimeUpdates) {\n  const routingType = currentQuery.routingType;\n  const isItinerary = routingType === \"ITINERARY\";\n  let params = {};\n\n  // Start with the universe of OTP parameters defined in query-params.js:\n  queryParams\n    .filter(qp => {\n      // A given parameter is included in the request if all of the following:\n      // 1. Must apply to the active routing type (ITINERARY or PROFILE)\n      // 2. Must be included in the current user-defined query\n      // 3. Must pass the parameter's applicability test, if one is specified\n      return (\n        qp.routingTypes.indexOf(routingType) !== -1 &&\n        qp.name in currentQuery &&\n        (typeof qp.applicable !== \"function\" ||\n          qp.applicable(currentQuery, config))\n      );\n    })\n    .forEach(qp => {\n      // Translate the applicable parameters according to their rewrite\n      // functions (if provided)\n      const rewriteFunction = isItinerary\n        ? qp.itineraryRewrite\n        : qp.profileRewrite;\n      params = Object.assign(\n        params,\n        rewriteFunction\n          ? rewriteFunction(currentQuery[qp.name])\n          : { [qp.name]: currentQuery[qp.name] }\n      );\n    });\n\n  // Additional processing specific to ITINERARY mode\n  if (isItinerary) {\n    // override ignoreRealtimeUpdates if provided\n    if (typeof ignoreRealtimeUpdates === \"boolean\") {\n      params.ignoreRealtimeUpdates = ignoreRealtimeUpdates;\n    }\n\n    // check date/time validity; ignore both if either is invalid\n    const dateValid = isMatch(params.date, OTP_API_DATE_FORMAT);\n    const timeValid = isMatch(params.time, OTP_API_TIME_FORMAT);\n\n    if (!dateValid || !timeValid) {\n      delete params.time;\n      delete params.date;\n    }\n\n    // temp: set additional parameters for CAR_HAIL or CAR_RENT trips\n    if (\n      params.mode &&\n      (params.mode.includes(\"CAR_HAIL\") || params.mode.includes(\"CAR_RENT\"))\n    ) {\n      params.minTransitDistance = \"50%\";\n      // increase search timeout because these queries can take a while\n      params.searchTimeout = 10000;\n    }\n\n    // set onlyTransitTrips for car rental searches\n    if (params.mode && params.mode.includes(\"CAR_RENT\")) {\n      params.onlyTransitTrips = true;\n    }\n\n    // Additional processing specific to PROFILE mode\n  } else {\n    // check start and end time validity; ignore both if either is invalid\n    const startTimeValid = isMatch(params.startTime, OTP_API_TIME_FORMAT);\n    const endTimeValid = isMatch(params.endTime, OTP_API_TIME_FORMAT);\n\n    if (!startTimeValid || !endTimeValid) {\n      delete params.startTimeValid;\n      delete params.endTimeValid;\n    }\n  }\n\n  // TODO: check that valid from/to locations are provided\n\n  // hack to add walking to driving/TNC trips\n  if (hasCar(params.mode)) {\n    params.mode += \",WALK\";\n  }\n\n  // Replace FLEX placeholder with OTP flex modes\n  // Explicit false check allows avoiding a breaking change -- undefined is true\n  if (params.mode && config.modes?.mergeFlex !== false) {\n    // Ensure query is in reduced format to avoid replacing twice\n    const reducedMode = reduceOtpFlexModes(params.mode.split(\",\")).join(\",\");\n    params.mode = expandOtpFlexMode(reducedMode);\n  }\n\n  return params;\n}\n"],"file":"query.js"}