{"version":3,"sources":["../src/map.ts"],"names":["currentPositionToLocation","currentPosition","error","coords","console","warn","lat","latitude","lon","longitude","category","coordsToString","length","map","c","toFixed","join","stringToCoords","str","split","constructLocation","latlng","lng","matchLatLon","location1","location2","isBikeshareStation","place","place_id","lastIndexOf","isEScooterStation","isCarWalkTransition","isValidLat","Number","isFinite","isValidLng","isValidLatLng","arr","Array","isArray"],"mappings":"AAEA,OAAO,SAASA,yBAAT,CACLC,eADK,EAEK;AACV,MAAIA,eAAe,CAACC,KAAhB,IAAyB,CAACD,eAAe,CAACE,MAA9C,EAAsD;AACpDC,IAAAA,OAAO,CAACC,IAAR,CACE,kGADF;AAGA,WAAO,IAAP;AACD;;AACD,SAAO;AACLC,IAAAA,GAAG,EAAEL,eAAe,CAACE,MAAhB,CAAuBI,QADvB;AAELC,IAAAA,GAAG,EAAEP,eAAe,CAACE,MAAhB,CAAuBM,SAFvB;AAGLC,IAAAA,QAAQ,EAAE;AAHL,GAAP;AAKD,C,CAED;AACA;;AACA,OAAO,SAASC,cAAT,CAAwBR,MAAxB,EAAkD;AACvD,SAAOA,MAAM,CAACS,MAAP,IAAiBT,MAAM,CAACU,GAAP,CAAW,UAAAC,CAAC;AAAA,WAAI,CAAC,CAACA,CAAF,EAAKC,OAAL,CAAa,CAAb,CAAJ;AAAA,GAAZ,EAAiCC,IAAjC,CAAsC,IAAtC,CAAxB;AACD;AAED,OAAO,SAASC,cAAT,CAAwBC,GAAxB,EAA+C;AACpD,SAAQA,GAAG,IAAIA,GAAG,CAACC,KAAJ,CAAU,GAAV,EAAeN,GAAf,CAAmB,UAAAC,CAAC;AAAA,WAAI,CAACA,CAAL;AAAA,GAApB,CAAR,IAAwC,EAA/C;AACD;AAED,OAAO,SAASM,iBAAT,CAA2BC,MAA3B,EAGM;AACX,SAAO;AACLf,IAAAA,GAAG,EAAEe,MAAM,CAACf,GADP;AAELE,IAAAA,GAAG,EAAEa,MAAM,CAACC;AAFP,GAAP;AAID;AAED,OAAO,SAASC,WAAT,CAAqBC,SAArB,EAA0CC,SAA1C,EAAwE;AAC7E,MAAI,CAACD,SAAD,IAAc,CAACC,SAAnB,EAA8B,OAAOD,SAAS,KAAKC,SAArB;AAC9B,SAAOD,SAAS,CAAClB,GAAV,KAAkBmB,SAAS,CAACnB,GAA5B,IAAmCkB,SAAS,CAAChB,GAAV,KAAkBiB,SAAS,CAACjB,GAAtE;AACD;AAKD,OAAO,SAASkB,kBAAT,CAA4BC,KAA5B,EAAgE;AACrE,SAAOA,KAAK,CAACC,QAAN,CAAeC,WAAf,CAA2B,sBAA3B,MAAuD,CAAC,CAA/D;AACD;AAED,OAAO,SAASC,iBAAT,CAA2BH,KAA3B,EAA+D;AACpE,SAAOA,KAAK,CAACC,QAAN,CAAeC,WAAf,CAA2B,uBAA3B,MAAwD,CAAC,CAAhE;AACD;AAED,OAAO,SAASE,mBAAT,CAA6BJ,KAA7B,EAAiE;AACtE,SAAOA,KAAK,CAACC,QAAN,CAAeC,WAAf,CAA2B,WAA3B,MAA4C,CAAC,CAApD;AACD;AAED,OAAO,SAASG,UAAT,CAAoB1B,GAApB,EAA0C;AAC/C,SAAO2B,MAAM,CAACC,QAAP,CAAgB5B,GAAhB,KAAwBA,GAAG,IAAI,CAAC,EAAhC,IAAsCA,GAAG,IAAI,EAApD;AACD;AAED,OAAO,SAAS6B,UAAT,CAAoBb,GAApB,EAA0C;AAC/C,SAAOW,MAAM,CAACC,QAAP,CAAgBZ,GAAhB,KAAwBA,GAAG,IAAI,CAAC,GAAhC,IAAuCA,GAAG,IAAI,GAArD;AACD;AAED,OAAO,SAASc,aAAT,CAAuBC,GAAvB,EAAkD;AACvD,SACEC,KAAK,CAACC,OAAN,CAAcF,GAAd,KACAA,GAAG,CAACzB,MAAJ,KAAe,CADf,IAEAoB,UAAU,CAACK,GAAG,CAAC,CAAD,CAAJ,CAFV,IAGAF,UAAU,CAACE,GAAG,CAAC,CAAD,CAAJ,CAJZ;AAMD","sourcesContent":["import { LatLngArray, Location, UserPosition } from \"@opentripplanner/types\";\n\nexport function currentPositionToLocation(\n  currentPosition: UserPosition\n): Location {\n  if (currentPosition.error || !currentPosition.coords) {\n    console.warn(\n      \"Cannot construct location from current position due to geolocation error or missing coordinates.\"\n    );\n    return null;\n  }\n  return {\n    lat: currentPosition.coords.latitude,\n    lon: currentPosition.coords.longitude,\n    category: \"CURRENT_LOCATION\"\n  };\n}\n\n// TRICKY: This method is used in query.js and in the context of\n// otp-rr actions where the intl context is not available/does not apply.\nexport function coordsToString(coords: number[]): string {\n  return coords.length && coords.map(c => (+c).toFixed(5)).join(\", \");\n}\n\nexport function stringToCoords(str: string): number[] {\n  return (str && str.split(\",\").map(c => +c)) || [];\n}\n\nexport function constructLocation(latlng: {\n  lat: number;\n  lng: number;\n}): Location {\n  return {\n    lat: latlng.lat,\n    lon: latlng.lng\n  };\n}\n\nexport function matchLatLon(location1: Location, location2: Location): boolean {\n  if (!location1 || !location2) return location1 === location2;\n  return location1.lat === location2.lat && location1.lon === location2.lon;\n}\n\ntype TransitivePlaceRaw = {\n  place_id: string;\n};\nexport function isBikeshareStation(place: TransitivePlaceRaw): boolean {\n  return place.place_id.lastIndexOf(\"bicycle_rent_station\") !== -1;\n}\n\nexport function isEScooterStation(place: TransitivePlaceRaw): boolean {\n  return place.place_id.lastIndexOf(\"escooter_rent_station\") !== -1;\n}\n\nexport function isCarWalkTransition(place: TransitivePlaceRaw): boolean {\n  return place.place_id.lastIndexOf(\"itin_car_\") !== -1;\n}\n\nexport function isValidLat(lat: number): boolean {\n  return Number.isFinite(lat) && lat >= -90 && lat <= 90;\n}\n\nexport function isValidLng(lng: number): boolean {\n  return Number.isFinite(lng) && lng >= -180 && lng <= 180;\n}\n\nexport function isValidLatLng(arr: LatLngArray): boolean {\n  return (\n    Array.isArray(arr) &&\n    arr.length === 2 &&\n    isValidLat(arr[0]) &&\n    isValidLng(arr[1])\n  );\n}\n"],"file":"map.js"}