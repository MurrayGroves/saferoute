{"version":3,"sources":["../src/query-gen.ts"],"names":["print","extractAdditionalModes","modeSettings","enabledModes","reduce","prev","cur","map","m","mode","includes","applicableMode","type","addTransportMode","value","transportMode","options","find","o","combinations","array","Array","length","fill","e1","i","filter","e2","j","SIMPLIFICATIONS","AIRPLANE","BICYCLE","BUS","CABLE_CAR","CAR","FERRY","FLEX","FUNICULAR","GONDOLA","RAIL","SCOOTER","SUBWAY","TRAM","TRANSIT","WALK","VALID_COMBOS","BANNED_TOGETHER","TRANSIT_SUBMODES","Object","keys","TRANSIT_SUBMODES_AND_TRANSIT","isCombinationValid","combo","queryTransitSubmodes","simplifiedModes","from","Set","c","qualifier","vc","every","generateCombinations","params","completeModeList","modes","generateOtp2Query","arriveBy","banned","date","numItineraries","preferred","time","to","planQuery","DefaultPlanQuery","modeSettingValues","inverseKey","high","low","key","bikeReluctance","carReluctance","walkReluctance","wheelchair","query","variables","fromPlace","name","lat","lon","toPlace"],"mappings":"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","sourcesContent":["import { LonLatOutput } from \"@conveyal/lonlat\";\nimport { print } from \"graphql\";\nimport {\n  ModeSetting,\n  ModeSettingValues,\n  TransportMode\n} from \"@opentripplanner/types\";\n\nimport DefaultPlanQuery from \"./planQuery.graphql\";\n\ntype InputBanned = {\n  routes?: string;\n  agencies?: string;\n  trips?: string;\n  stops?: string;\n  stopsHard?: string;\n};\n\ntype InputPreferred = {\n  routes?: string;\n  agencies?: string;\n  unpreferredCost?: string;\n};\n\ntype OTPQueryParams = {\n  arriveBy: boolean;\n  date?: string;\n  from: LonLatOutput & { name?: string };\n  modes: TransportMode[];\n  modeSettings: ModeSetting[];\n  time?: string;\n  numItineraries?: number;\n  to: LonLatOutput & { name?: string };\n  banned?: InputBanned;\n  preferred?: InputPreferred;\n};\n\ntype GraphQLQuery = {\n  query: string;\n  variables: Record<string, unknown>;\n};\n\n/**\n * Mode Settings can contain additional modes to add to the query,\n * this function extracts those additional modes from the settings\n * and returns them in an array.\n * @param modeSettings List of mode settings with values populated\n * @returns Additional transport modes to add to query\n */\nexport function extractAdditionalModes(\n  modeSettings: ModeSetting[],\n  enabledModes: TransportMode[]\n): TransportMode[] {\n  return modeSettings.reduce<TransportMode[]>((prev, cur) => {\n    // First, ensure that the mode associated with this setting is even enabled\n    if (!enabledModes.map(m => m.mode).includes(cur.applicableMode)) {\n      return prev;\n    }\n\n    // In checkboxes, mode must be enabled and have a transport mode in it\n    if (\n      (cur.type === \"CHECKBOX\" || cur.type === \"SUBMODE\") &&\n      cur.addTransportMode &&\n      cur.value\n    ) {\n      return [...prev, cur.addTransportMode];\n    }\n    if (cur.type === \"DROPDOWN\") {\n      const transportMode = cur.options.find(o => o.value === cur.value)\n        .addTransportMode;\n      if (transportMode) {\n        return [...prev, transportMode];\n      }\n    }\n    return prev;\n  }, []);\n}\n\n/**\n * Generates every possible mathematical subset of the input TransportModes.\n * Uses code from:\n * https://stackoverflow.com/questions/5752002/find-all-possible-subset-combos-in-an-array\n * @param array Array of input transport modes\n * @returns 2D array representing every possible subset of transport modes from input\n */\nfunction combinations(array: TransportMode[]): TransportMode[][] {\n  if (!array) return [];\n  return (\n    // eslint-disable-next-line no-bitwise\n    new Array(1 << array.length)\n      .fill(null)\n      // eslint-disable-next-line no-bitwise\n      .map((e1, i) => array.filter((e2, j) => i & (1 << j)))\n  );\n}\n\n/**\n * This constant maps all the transport mode to a broader mode type,\n * which is used to determine the valid combinations of modes used in query generation.\n */\nexport const SIMPLIFICATIONS = {\n  AIRPLANE: \"TRANSIT\",\n  BICYCLE: \"PERSONAL\",\n  BUS: \"TRANSIT\",\n  CABLE_CAR: \"TRANSIT\",\n  CAR: \"CAR\",\n  FERRY: \"TRANSIT\",\n  FLEX: \"SHARED\", // TODO: this allows FLEX+WALK. Is this reasonable?\n  FUNICULAR: \"TRANSIT\",\n  GONDOLA: \"TRANSIT\",\n  RAIL: \"TRANSIT\",\n  SCOOTER: \"PERSONAL\",\n  SUBWAY: \"TRANSIT\",\n  TRAM: \"TRANSIT\",\n  TRANSIT: \"TRANSIT\",\n  WALK: \"WALK\"\n};\n\n// Inclusion of \"TRANSIT\" alone automatically implies \"WALK\" in OTP\nconst VALID_COMBOS = [\n  [\"WALK\"],\n  [\"PERSONAL\"],\n  [\"TRANSIT\", \"SHARED\"],\n  [\"WALK\", \"SHARED\"],\n  [\"TRANSIT\"],\n  [\"TRANSIT\", \"PERSONAL\"],\n  [\"TRANSIT\", \"CAR\"]\n];\n\nconst BANNED_TOGETHER = [\"SCOOTER\", \"BICYCLE\", \"CAR\"];\n\nexport const TRANSIT_SUBMODES = Object.keys(SIMPLIFICATIONS).filter(\n  mode => SIMPLIFICATIONS[mode] === \"TRANSIT\" && mode !== \"TRANSIT\"\n);\nexport const TRANSIT_SUBMODES_AND_TRANSIT = Object.keys(SIMPLIFICATIONS).filter(\n  mode => SIMPLIFICATIONS[mode] === \"TRANSIT\"\n);\n\nfunction isCombinationValid(\n  combo: TransportMode[],\n  queryTransitSubmodes: string[]\n): boolean {\n  if (combo.length === 0) return false;\n\n  // All current qualifiers currently simplify to \"SHARED\"\n  const simplifiedModes = Array.from(\n    new Set(combo.map(c => (c.qualifier ? \"SHARED\" : SIMPLIFICATIONS[c.mode])))\n  );\n\n  // Ensure that if we have one transit mode, then we include ALL transit modes\n  if (simplifiedModes.includes(\"TRANSIT\")) {\n    // Don't allow TRANSIT along with any other submodes\n    if (queryTransitSubmodes.length && combo.find(c => c.mode === \"TRANSIT\")) {\n      return false;\n    }\n\n    if (\n      combo.reduce((prev, cur) => {\n        if (queryTransitSubmodes.includes(cur.mode)) {\n          return prev - 1;\n        }\n        return prev;\n      }, queryTransitSubmodes.length) !== 0\n    ) {\n      return false;\n    }\n    // Continue to the other checks\n  }\n\n  // OTP doesn't support multiple non-walk modes\n  if (BANNED_TOGETHER.filter(m => combo.find(c => c.mode === m)).length > 1) {\n    return false;\n  }\n\n  return !!VALID_COMBOS.find(\n    vc =>\n      simplifiedModes.every(m => vc.includes(m)) &&\n      vc.every(m => simplifiedModes.includes(m))\n  );\n}\n\n/**\n * Generates a list of queries for OTP to get a comprehensive\n * set of results based on the modes input.\n * @param params OTP Query Params\n * @returns Set of parameters to generate queries\n */\nexport function generateCombinations(params: OTPQueryParams): OTPQueryParams[] {\n  const completeModeList = [\n    ...extractAdditionalModes(params.modeSettings, params.modes),\n    ...params.modes\n  ];\n\n  // List of the transit *submodes* that are included in the input params\n  const queryTransitSubmodes = completeModeList\n    .filter(mode => TRANSIT_SUBMODES.includes(mode.mode))\n    .map(mode => mode.mode);\n\n  return combinations(completeModeList)\n    .filter(combo => isCombinationValid(combo, queryTransitSubmodes))\n    .map(combo => ({ ...params, modes: combo }));\n}\n\n/**\n * Generates a query for OTP GraphQL API based on parameters.\n * @param param0 OTP2 Parameters for the query\n * @param planQuery Override the default query for OTP\n * @returns A fully formed query+variables ready to be sent to GraphQL backend\n */\nexport function generateOtp2Query(\n  {\n    arriveBy,\n    banned,\n    date,\n    from,\n    modes,\n    modeSettings,\n    numItineraries,\n    preferred,\n    time,\n    to\n  }: OTPQueryParams,\n  planQuery = DefaultPlanQuery\n): GraphQLQuery {\n  // This extracts the values from the mode settings to key value pairs\n  const modeSettingValues = modeSettings.reduce((prev, cur) => {\n    if (cur.type === \"SLIDER\" && cur.inverseKey) {\n      prev[cur.inverseKey] = cur.high - cur.value + cur.low;\n    }\n    prev[cur.key] = cur.value;\n    return prev;\n  }, {}) as ModeSettingValues;\n\n  const {\n    bikeReluctance,\n    carReluctance,\n    walkReluctance,\n    wheelchair\n  } = modeSettingValues;\n\n  return {\n    query: print(planQuery),\n    variables: {\n      arriveBy,\n      banned,\n      bikeReluctance,\n      carReluctance,\n      date,\n      fromPlace: `${from.name}::${from.lat},${from.lon}}`,\n      modes,\n      numItineraries,\n      preferred,\n      time,\n      toPlace: `${to.name}::${to.lat},${to.lon}}`,\n      walkReluctance,\n      wheelchair\n    }\n  };\n}\n"],"file":"query-gen.js"}